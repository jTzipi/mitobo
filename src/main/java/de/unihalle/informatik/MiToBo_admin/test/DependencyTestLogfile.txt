 *
    B[] *
        <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.Image3D(java.lang.String)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.MTBImageByte(ij.ImagePlus)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.MTBImageByte(int, int, int, int, int)
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThresh.applyThreshold(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThresh.applyThreshold(ij.process.ImageProcessor, int)
        <-- mtb_contours.Contour_on_Labeled_Components.get_OuterContours(ij.process.ImageProcessor, java.util.Vector)
        <-- mtb_neurites.Neurit_Detector_2D.getSnakeRegion(java.awt.Polygon)
        <-- mtb_neurites.Neurit_Detector_2D.removeCellBody(de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
    B[][] *
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.MTBImageByte(ij.ImagePlus)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.MTBImageByte(int, int, int, int, int)
    B[][][][][] *
        <-- de.unihalle.informatik.MiToBo.datatypes.LevelSetByte.LevelSetByte(int, int, int, int, int)
    D[] *
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.getMinMaxDouble()
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.getMinMaxDouble()
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.getMinMaxDouble()
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.getMinMaxDouble()
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.getMinMaxDouble()
    D[][] *
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.MTBImageDouble(int, int, int, int, int)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.duplicate()
        <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.get_X_coords()
        <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.get_Y_coords()
        <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.SnakeAlgos.calcSnake(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double[], double[], int, double)
    F[] *
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.getImagePlus()
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.MTBImageFloat(ij.ImagePlus)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.MTBImageFloat(int, int, int, int, int)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.getImagePlus()
    F[][] *
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.MTBImageFloat(ij.ImagePlus)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.MTBImageFloat(int, int, int, int, int)
    I[] *
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.Image3D(de.unihalle.informatik.MiToBo.datatypes.Image3D)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.getMinMaxInt()
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.getMinMaxInt()
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.getMinMaxInt()
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.getImagePlusRGB()
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.getMinMaxInt()
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.getMinMaxInt()
        <-- mtb_contours.Contour_on_Labeled_Components.findNextPoint(java.awt.Point, int)
        clone() *
            <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.Image3D(de.unihalle.informatik.MiToBo.datatypes.Image3D)
    I[][] *
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcProfile(de.unihalle.informatik.MiToBo.datatypes.Region2D, de.unihalle.informatik.MiToBo.morphology.SkeletonTree, ij.process.ImageProcessor, ij.process.ImageProcessor)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.MTBImageInt(int, int, int, int, int)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.duplicate()
        <-- de.unihalle.informatik.MiToBo.morphology.ComponentPostprocess.LinkAdjacentComponents(ij.process.ImageProcessor, double)
    I[][][] *
        <-- de.unihalle.informatik.MiToBo.morphology.StructuringElement.createBox(int, int, int)
        <-- de.unihalle.informatik.MiToBo.morphology.StructuringElement.createCube(int)
        <-- de.unihalle.informatik.MiToBo.morphology.StructuringElement.createSphere(int)
    S[] *
        <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.Image3D(java.lang.String)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.MTBImageShort(ij.ImagePlus)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.MTBImageShort(int, int, int, int, int)
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.applyNiblackThresholdMaskwise(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, double, double, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
    S[][] *
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.MTBImageShort(ij.ImagePlus)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.MTBImageShort(int, int, int, int, int)
    Z[][] *
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
Jama *
    Matrix *
        <-- de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.FeatureVector(double[], int, double)
        <-- de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.add(de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector)
        <-- de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.copy()
        <-- de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.distCityBlock(de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector, de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector)
        <-- de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.distEuklid(de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector, de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector)
        <-- de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.distEuklidSquared(de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector, de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector)
        <-- de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.getValue(int)
        <-- de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.m_data
        <-- de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.scale(double)
        <-- de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.setValue(int, double)
        <-- de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.size()
        <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.Resampler(Jama.Matrix, Jama.Matrix, double)
        <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.get_X_coords()
        <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.get_Y_coords()
        <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.SnakeAlgos.calcSnake(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double[], double[], int, double)
        Matrix(double[], int) *
            <-- de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.FeatureVector(double[], int, double)
        Matrix(double[][]) *
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.get_X_coords()
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.get_Y_coords()
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.SnakeAlgos.calcSnake(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double[], double[], int, double)
        copy() *
            <-- de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.copy()
        get(int, int) *
            <-- de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.getValue(int)
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.Resampler(Jama.Matrix, Jama.Matrix, double)
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.SnakeAlgos.calcSnake(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double[], double[], int, double)
        getArray() *
            <-- de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.distCityBlock(de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector, de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector)
            <-- de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.distEuklid(de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector, de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector)
            <-- de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.distEuklidSquared(de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector, de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector)
        getColumnDimension() *
            <-- de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.size()
        getRowDimension() *
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.Resampler(Jama.Matrix, Jama.Matrix, double)
        inverse() *
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.SnakeAlgos.calcSnake(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double[], double[], int, double)
        plus(Jama.Matrix) *
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.SnakeAlgos.calcSnake(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double[], double[], int, double)
        plusEquals(Jama.Matrix) *
            <-- de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.add(de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector)
        set(int, int, double) *
            <-- de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.setValue(int, double)
        times(Jama.Matrix) *
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.SnakeAlgos.calcSnake(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double[], double[], int, double)
        times(double) *
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.SnakeAlgos.calcSnake(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double[], double[], int, double)
        timesEquals(double) *
            <-- de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.scale(double)
de.unihalle.informatik.MiToBo.apps.cells2D
    CellSegmentAlgos
        --> de.unihalle.informatik.MiToBo.meta.MTBOpBase
        CellSegmentAlgos()
            --> de.unihalle.informatik.MiToBo.meta.MTBOpBase.MTBOpBase()
            <-- mtb_granules.Cell_Segment_2D.run(ij.process.ImageProcessor)
        getMetaParams()
            --> java.util.LinkedList *
            --> java.util.LinkedList.LinkedList() *
        operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            --> de.unihalle.informatik.MiToBo.apps.cells2D.CellSegmentAlgos.voronoiTesselation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams
        voronoiTesselation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            <-- de.unihalle.informatik.MiToBo.apps.cells2D.CellSegmentAlgos.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            --> de.unihalle.informatik.MiToBo.datatypes.Region2D
            --> de.unihalle.informatik.MiToBo.datatypes.Region2D.getArea()
            --> de.unihalle.informatik.MiToBo.datatypes.Region2D.getPoints()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.createMTBImage(int, int, int, int, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeX()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeY()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getValueInt(int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.putValueInt(int, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.putValueInt(int, int, int, int, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.show()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.getImagePlus()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.getValueInt(int, int)
            --> de.unihalle.informatik.MiToBo.enhance.HistogramEqualization
            --> de.unihalle.informatik.MiToBo.enhance.HistogramEqualization$HistoEquParams.HistogramEqualization$HistoEquParams(de.unihalle.informatik.MiToBo.enhance.HistogramEqualization, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> de.unihalle.informatik.MiToBo.enhance.HistogramEqualization$HistoEquParams.getResultImage()
            --> de.unihalle.informatik.MiToBo.enhance.HistogramEqualization.HistogramEqualization()
            --> de.unihalle.informatik.MiToBo.enhance.HistogramEqualization.runOp(de.unihalle.informatik.MiToBo.meta.MTBOpParams) *
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams
            --> de.unihalle.informatik.MiToBo.morphology.ImgDilate
            --> de.unihalle.informatik.MiToBo.morphology.ImgDilate$ImgDilateParams.ImgDilate$ImgDilateParams(de.unihalle.informatik.MiToBo.morphology.ImgDilate, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            --> de.unihalle.informatik.MiToBo.morphology.ImgDilate$ImgDilateParams.getResultImage()
            --> de.unihalle.informatik.MiToBo.morphology.ImgDilate.ImgDilate()
            --> de.unihalle.informatik.MiToBo.morphology.ImgDilate.runOp(de.unihalle.informatik.MiToBo.meta.MTBOpParams) *
            --> de.unihalle.informatik.MiToBo.morphology.ImgErode
            --> de.unihalle.informatik.MiToBo.morphology.ImgErode$ImgErodeParams.ImgErode$ImgErodeParams(de.unihalle.informatik.MiToBo.morphology.ImgErode, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            --> de.unihalle.informatik.MiToBo.morphology.ImgErode$ImgErodeParams.getResultImage()
            --> de.unihalle.informatik.MiToBo.morphology.ImgErode.ImgErode()
            --> de.unihalle.informatik.MiToBo.morphology.ImgErode.runOp(de.unihalle.informatik.MiToBo.meta.MTBOpParams) *
            --> de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential.LabelComponentsSequential()
            --> de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential.regionSegmentation(ij.process.ImageProcessor, boolean)
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu$OtsuParams.CalcGlobalThreshOtsu$OtsuParams(de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu$OtsuParams.getOtsuThreshold()
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu.CalcGlobalThreshOtsu()
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu.runOp(de.unihalle.informatik.MiToBo.meta.MTBOpParams) *
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThresh.ImgThresh()
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThresh.applyThreshold(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double)
            --> ij.ImagePlus *
            --> ij.ImagePlus.getProcessor() *
            --> ij.ImagePlus.show() *
            --> ij.gui.NewImage.createByteImage(java.lang.String, int, int, int, int) *
            --> ij.gui.NewImage.createRGBImage(java.lang.String, int, int, int, int) *
            --> ij.process.ImageProcessor *
            --> ij.process.ImageProcessor.putPixel(int, int, int) *
            --> java.awt.geom.Point2D$Double *
            --> java.awt.geom.Point2D$Double.getX() *
            --> java.awt.geom.Point2D$Double.getY() *
            --> java.lang.Class *
            --> java.lang.Math.round(double) *
            --> java.lang.Object *
            --> java.lang.Object.getClass() *
            --> java.lang.String *
            --> java.util.Random.Random() *
            --> java.util.Random.nextInt() *
            --> java.util.Vector *
            --> java.util.Vector.Vector() *
            --> java.util.Vector.add(java.lang.Object) *
            --> java.util.Vector.elementAt(int) *
            --> java.util.Vector.size() *
            <-- mtb_granules.Cell_Segment_2D.run(ij.process.ImageProcessor)
de.unihalle.informatik.MiToBo.apps.granules2D
    GranuleDetectorAlgos
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$GranuleDetectorParams.GranuleDetectorAlgos$GranuleDetectorParams(de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$Subroutine)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$GranuleDetectorParams.GranuleDetectorAlgos$GranuleDetectorParams(de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos, de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$Subroutine)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$GranuleDetectorParams.this$0
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        --> de.unihalle.informatik.MiToBo.meta.MTBOpBase
        <-- mtb_granules.Cell_Segment_2D.run(ij.process.ImageProcessor)
        $SWITCH_TABLE$de$unihalle$informatik$MiToBo$apps$granules2D$GranuleDetectorAlgos$Subroutine
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.$SWITCH_TABLE$de$unihalle$informatik$MiToBo$apps$granules2D$GranuleDetectorAlgos$Subroutine()
        $SWITCH_TABLE$de$unihalle$informatik$MiToBo$apps$granules2D$GranuleDetectorAlgos$Subroutine()
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$Subroutine
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$Subroutine.DETECT_GRANULES
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$Subroutine.DETECT_GRANULES_OLD
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$Subroutine.DETECT_NUCLEI
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$Subroutine.DETECT_PBODIES
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$Subroutine.ordinal() *
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$Subroutine.values()
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.$SWITCH_TABLE$de$unihalle$informatik$MiToBo$apps$granules2D$GranuleDetectorAlgos$Subroutine
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            --> java.lang.NoSuchFieldError *
        GranuleDetectorAlgos()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> de.unihalle.informatik.MiToBo.meta.MTBOpBase.MTBOpBase()
            <-- mtb_granules.Cell_Segment_2D.run(ij.process.ImageProcessor)
        detectGranules_old(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.createMTBImage(int, int, int, int, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getMetaData()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeX()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeY()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getValueInt(int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.putValueInt(int, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.getValueInt(int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.putValueInt(int, int, int)
            --> de.unihalle.informatik.MiToBo.meta.MTBMetaData
            --> de.unihalle.informatik.MiToBo.meta.MTBMetaData.clone()
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams
            --> de.unihalle.informatik.MiToBo.morphology.ImgDilate
            --> de.unihalle.informatik.MiToBo.morphology.ImgDilate$ImgDilateParams.ImgDilate$ImgDilateParams(de.unihalle.informatik.MiToBo.morphology.ImgDilate, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            --> de.unihalle.informatik.MiToBo.morphology.ImgDilate$ImgDilateParams.getResultImage()
            --> de.unihalle.informatik.MiToBo.morphology.ImgDilate.ImgDilate()
            --> de.unihalle.informatik.MiToBo.morphology.ImgDilate.runOp(de.unihalle.informatik.MiToBo.meta.MTBOpParams) *
            --> de.unihalle.informatik.MiToBo.morphology.ImgErode
            --> de.unihalle.informatik.MiToBo.morphology.ImgErode$ImgErodeParams.ImgErode$ImgErodeParams(de.unihalle.informatik.MiToBo.morphology.ImgErode, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            --> de.unihalle.informatik.MiToBo.morphology.ImgErode$ImgErodeParams.getResultImage()
            --> de.unihalle.informatik.MiToBo.morphology.ImgErode.ImgErode()
            --> de.unihalle.informatik.MiToBo.morphology.ImgErode.runOp(de.unihalle.informatik.MiToBo.meta.MTBOpParams) *
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu$OtsuParams.CalcGlobalThreshOtsu$OtsuParams(de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu, de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu$OtsuParams.getOtsuThreshold()
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu.CalcGlobalThreshOtsu()
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu.runOp(de.unihalle.informatik.MiToBo.meta.MTBOpParams) *
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThresh.ImgThresh()
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThresh.applyThreshold(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double)
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$Mode
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$Mode.STD_LOCVARCHECK
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams.ImgThreshNiblack$NiblackParams(de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack, de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$Mode, double, double, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams.getResultImage()
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.ImgThreshNiblack()
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.runOp(de.unihalle.informatik.MiToBo.meta.MTBOpParams) *
            --> java.lang.Class *
            --> java.lang.Object *
            --> java.lang.Object.getClass() *
        detectNuclei(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.createMTBImage(int, int, int, int, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getMetaData()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeX()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeY()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getValueInt(int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.putValueInt(int, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.setMetaData(de.unihalle.informatik.MiToBo.meta.MTBMetaData) *
            --> de.unihalle.informatik.MiToBo.meta.MTBMetaData
            --> de.unihalle.informatik.MiToBo.meta.MTBMetaData.clone()
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu$OtsuParams.CalcGlobalThreshOtsu$OtsuParams(de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu, de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu$OtsuParams.getOtsuThreshold()
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu.CalcGlobalThreshOtsu()
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu.runOp(de.unihalle.informatik.MiToBo.meta.MTBOpParams) *
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThresh.ImgThresh()
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThresh.applyThreshold(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double)
            --> java.lang.Class *
            --> java.lang.Object *
            --> java.lang.Object.getClass() *
        detectPbodies(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.createMTBImage(int, int, int, int, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getImagePlus()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getMetaData()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeX()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeY()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getValueDouble(int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getValueInt(int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.putValueInt(int, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.setMetaData(de.unihalle.informatik.MiToBo.meta.MTBMetaData) *
            --> de.unihalle.informatik.MiToBo.meta.MTBMetaData
            --> de.unihalle.informatik.MiToBo.meta.MTBMetaData.clone()
            --> ij.ImagePlus *
            --> ij.ImagePlus.getProcessor() *
            --> ij.process.ImageProcessor *
            --> ij.process.ImageProcessor.getMax() *
            --> java.lang.Object *
        getMetaParams()
            --> java.lang.Object *
            --> java.util.LinkedList *
            --> java.util.LinkedList.LinkedList() *
            --> java.util.LinkedList.add(java.lang.Object) *
        operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$GranuleDetectorParams
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$GranuleDetectorParams.getInputImage()
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$GranuleDetectorParams.getSubroutine()
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$GranuleDetectorParams.setResultImage(de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$Subroutine
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$Subroutine.ordinal() *
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.$SWITCH_TABLE$de$unihalle$informatik$MiToBo$apps$granules2D$GranuleDetectorAlgos$Subroutine()
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.detectGranules_old(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.detectNuclei(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.detectPbodies(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams
        runOp(de.unihalle.informatik.MiToBo.meta.MTBOpParams) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- mtb_granules.Cell_Segment_2D.run(ij.process.ImageProcessor)
    GranuleDetectorAlgos$GranuleDetectorParams
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        --> de.unihalle.informatik.MiToBo.meta.MTBOpParams
        GranuleDetectorAlgos$GranuleDetectorParams(de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$Subroutine)
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$GranuleDetectorParams.setParameter(java.lang.String, java.lang.Object) *
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$GranuleDetectorParams.this$0
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$Subroutine
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams.MTBOpParams()
            --> java.lang.Object *
            --> java.lang.String *
            <-- mtb_granules.Cell_Segment_2D.run(ij.process.ImageProcessor)
        GranuleDetectorAlgos$GranuleDetectorParams(de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos, de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$Subroutine)
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$GranuleDetectorParams.setParameter(java.lang.String, java.lang.Object) *
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$GranuleDetectorParams.this$0
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$Subroutine
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.meta.MTBMetaData
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams.MTBOpParams(de.unihalle.informatik.MiToBo.meta.MTBMetaData)
            --> java.lang.Object *
            --> java.lang.String *
        getInputImage()
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$GranuleDetectorParams.getParameter(java.lang.String) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> java.lang.Object *
            --> java.lang.String *
        getParameter(java.lang.String) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$GranuleDetectorParams.getInputImage()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$GranuleDetectorParams.getResultImage()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$GranuleDetectorParams.getSubroutine()
        getResultImage()
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$GranuleDetectorParams.getParameter(java.lang.String) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte
            --> java.lang.Object *
            --> java.lang.String *
            <-- mtb_granules.Cell_Segment_2D.run(ij.process.ImageProcessor)
        getSubroutine()
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$GranuleDetectorParams.getParameter(java.lang.String) *
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$Subroutine
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            --> java.lang.Object *
            --> java.lang.String *
        setParameter(java.lang.String, java.lang.Object) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$GranuleDetectorParams.GranuleDetectorAlgos$GranuleDetectorParams(de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$Subroutine)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$GranuleDetectorParams.GranuleDetectorAlgos$GranuleDetectorParams(de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos, de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$Subroutine)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$GranuleDetectorParams.setResultImage(de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        setResultImage(de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$GranuleDetectorParams.setParameter(java.lang.String, java.lang.Object) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte
            --> java.lang.Object *
            --> java.lang.String *
        this$0
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$GranuleDetectorParams.GranuleDetectorAlgos$GranuleDetectorParams(de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$Subroutine)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$GranuleDetectorParams.GranuleDetectorAlgos$GranuleDetectorParams(de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos, de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$Subroutine)
    GranuleDetectorAlgos$Subroutine
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$GranuleDetectorParams.GranuleDetectorAlgos$GranuleDetectorParams(de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$Subroutine)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$GranuleDetectorParams.GranuleDetectorAlgos$GranuleDetectorParams(de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos, de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$Subroutine)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$GranuleDetectorParams.getSubroutine()
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.$SWITCH_TABLE$de$unihalle$informatik$MiToBo$apps$granules2D$GranuleDetectorAlgos$Subroutine()
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        --> java.lang.Enum *
        <-- mtb_granules.Cell_Segment_2D.run(ij.process.ImageProcessor)
        DETECT_GRANULES
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$Subroutine.static {}
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.$SWITCH_TABLE$de$unihalle$informatik$MiToBo$apps$granules2D$GranuleDetectorAlgos$Subroutine()
        DETECT_GRANULES_OLD
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$Subroutine.static {}
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.$SWITCH_TABLE$de$unihalle$informatik$MiToBo$apps$granules2D$GranuleDetectorAlgos$Subroutine()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        DETECT_NUCLEI
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$Subroutine.static {}
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.$SWITCH_TABLE$de$unihalle$informatik$MiToBo$apps$granules2D$GranuleDetectorAlgos$Subroutine()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- mtb_granules.Cell_Segment_2D.run(ij.process.ImageProcessor)
        DETECT_PBODIES
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$Subroutine.static {}
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.$SWITCH_TABLE$de$unihalle$informatik$MiToBo$apps$granules2D$GranuleDetectorAlgos$Subroutine()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        ENUM$VALUES
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$Subroutine.static {}
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$Subroutine.values()
        GranuleDetectorAlgos$Subroutine(java.lang.String, int)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$Subroutine.static {}
            --> java.lang.Enum.Enum(java.lang.String, int) *
            --> java.lang.String *
        ordinal() *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.$SWITCH_TABLE$de$unihalle$informatik$MiToBo$apps$granules2D$GranuleDetectorAlgos$Subroutine()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        static {}
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$Subroutine.DETECT_GRANULES
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$Subroutine.DETECT_GRANULES_OLD
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$Subroutine.DETECT_NUCLEI
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$Subroutine.DETECT_PBODIES
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$Subroutine.ENUM$VALUES
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$Subroutine.GranuleDetectorAlgos$Subroutine(java.lang.String, int)
            --> java.lang.String *
        valueOf(java.lang.String)
            --> java.lang.Class *
            --> java.lang.Enum *
            --> java.lang.Enum.valueOf(java.lang.Class, java.lang.String) *
            --> java.lang.String *
        values()
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$Subroutine.ENUM$VALUES
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.$SWITCH_TABLE$de$unihalle$informatik$MiToBo$apps$granules2D$GranuleDetectorAlgos$Subroutine()
            --> java.lang.Object *
            --> java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int) *
    GranuleDetectorControl
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.GranuleDetectorControl$DetectorHeart(de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.this$0
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.actionPerformed(java.awt.event.ActionEvent)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.detector
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.init(de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.open()
        --> java.lang.Object *
        --> java.lang.Runnable *
        GranuleDetectorControl(de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI)
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.GranuleDetectorControl$DetectorHeart(de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl)
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.detector
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.gui
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.open()
            --> java.lang.Object.Object() *
        applyToImage()
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.currentFile
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.detector
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.gui
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.actionPerformed(java.awt.event.ActionEvent)
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setStatus(java.lang.String)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.createMTBImage(ij.ImagePlus)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getImagePlus()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getMetaData()
            --> de.unihalle.informatik.MiToBo.io.files.ImgOpen.ImgOpen()
            --> de.unihalle.informatik.MiToBo.io.files.ImgOpen.deleteBorder(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            --> de.unihalle.informatik.MiToBo.meta.MTBMetaData
            --> ij.IJ.getImage() *
            --> ij.ImagePlus *
            --> ij.ImagePlus.getTitle() *
            --> java.lang.Object *
            --> java.lang.String *
        applyToImageBatch(java.lang.String)
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.currentFile
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.detector
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.gui
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.run()
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setStatus(java.lang.String)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.createMTBImage(ij.ImagePlus)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getImagePlus()
            --> de.unihalle.informatik.MiToBo.io.dirs.DirectoryTree.DirectoryTree(java.lang.String)
            --> de.unihalle.informatik.MiToBo.io.dirs.DirectoryTree.getFileList()
            --> de.unihalle.informatik.MiToBo.io.files.ImgOpen.ImgOpen()
            --> de.unihalle.informatik.MiToBo.io.files.ImgOpen.ImgOpen(java.lang.String, java.lang.String)
            --> de.unihalle.informatik.MiToBo.io.files.ImgOpen.deleteBorder(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            --> de.unihalle.informatik.MiToBo.io.files.ImgOpen.open()
            --> ij.ImagePlus *
            --> ij.ImagePlus.getTitle() *
            --> java.io.PrintStream *
            --> java.io.PrintStream.println(java.lang.String) *
            --> java.lang.Object *
            --> java.lang.String *
            --> java.lang.String.lastIndexOf(java.lang.String) *
            --> java.lang.String.length() *
            --> java.lang.String.substring(int, int) *
            --> java.lang.StringBuilder *
            --> java.lang.StringBuilder.StringBuilder(java.lang.String) *
            --> java.lang.StringBuilder.append(java.lang.String) *
            --> java.lang.StringBuilder.toString() *
            --> java.lang.System.out *
            --> java.util.Vector *
            --> java.util.Vector.Vector() *
            --> java.util.Vector.add(java.lang.Object) *
            --> java.util.Vector.get(int) *
            --> java.util.Vector.size() *
        detector
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.GranuleDetectorControl(de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.applyToImage()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.applyToImageBatch(java.lang.String)
        dirToWorkOn
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.run()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.setDirToWorkOn(java.lang.String)
            --> java.lang.String *
        gui
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.GranuleDetectorControl(de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.applyToImage()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.applyToImageBatch(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.run()
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI
        maxDiffToMean
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.static {}
        run()
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.applyToImageBatch(java.lang.String)
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.dirToWorkOn
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.gui
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setStatus(java.lang.String)
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.showResultData(java.util.Vector)
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.subThreadFinished()
            --> java.lang.String *
            --> java.util.Vector *
        setDirToWorkOn(java.lang.String)
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.dirToWorkOn
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.actionPerformed(java.awt.event.ActionEvent)
            --> java.lang.String *
        static {}
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.maxDiffToMean
    GranuleDetectorControl$DetectorHeart
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.GranuleDetectorControl(de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.applyToImage()
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.applyToImageBatch(java.lang.String)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.detector
        --> java.lang.Object *
        GranuleDetectorControl$DetectorHeart(de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl)
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.imageCounter
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.kernelChannel
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.this$0
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.GranuleDetectorControl(de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI)
            --> java.lang.Object.Object() *
        apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> I[] *
            --> Z[][] *
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$GranuleDetectorParams.GranuleDetectorAlgos$GranuleDetectorParams(de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$Subroutine)
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$GranuleDetectorParams.getResultImage()
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$Subroutine
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$Subroutine.DETECT_GRANULES_OLD
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$Subroutine.DETECT_NUCLEI
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$Subroutine.DETECT_PBODIES
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.GranuleDetectorAlgos()
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.runOp(de.unihalle.informatik.MiToBo.meta.MTBOpParams) *
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.currentFile
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.height
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.imageCounter
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.kernelChannel
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.kernelMask
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.this$0
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.width
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.applyToImage()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.applyToImageBatch(java.lang.String)
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.gui
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.detectMode(int)
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.getCopyChannels()
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.getKernelChannel()
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.getMinimumGranuleSize()
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.showResultImage()
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.showResultMask()
            --> de.unihalle.informatik.MiToBo.datatypes.Region2D
            --> de.unihalle.informatik.MiToBo.datatypes.Region2D.getArea()
            --> de.unihalle.informatik.MiToBo.datatypes.Region2D.getPoints()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.createMTBImage(int, int, int, int, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeX()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeY()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeZ()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getType()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getValueInt(int, int, int, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.putValueInt(int, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.getImagePlus()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.getSizeX() *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.getSizeY() *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.getValueInt(int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.putValueInt(int, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.putValueInt(int, int, int)
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams
            --> de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsRecursive.LabelComponentsRecursive()
            --> de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsRecursive.regionSegmentation(ij.process.ImageProcessor)
            --> de.unihalle.informatik.MiToBo.statistics.RegionSetStatistics.RegionSetStatistics()
            --> de.unihalle.informatik.MiToBo.statistics.RegionSetStatistics.calcAverageSize(java.util.Vector)
            --> ij.ImagePlus *
            --> ij.ImagePlus.ImagePlus() *
            --> ij.ImagePlus.ImagePlus(java.lang.String, ij.ImageStack) *
            --> ij.ImagePlus.getProcessor() *
            --> ij.ImagePlus.setProcessor(java.lang.String, ij.process.ImageProcessor) *
            --> ij.ImagePlus.show() *
            --> ij.ImageStack *
            --> ij.ImageStack.ImageStack(int, int) *
            --> ij.ImageStack.addSlice(java.lang.String, ij.process.ImageProcessor) *
            --> ij.ImageStack.getProcessor(int) *
            --> ij.ImageStack.getSize() *
            --> ij.gui.NewImage.createByteImage(java.lang.String, int, int, int, int) *
            --> ij.gui.NewImage.createRGBImage(java.lang.String, int, int, int, int) *
            --> ij.process.ImageProcessor *
            --> ij.process.ImageProcessor.getPixel(int, int) *
            --> ij.process.ImageProcessor.getPixels() *
            --> ij.process.ImageProcessor.invert() *
            --> ij.process.ImageProcessor.putPixel(int, int, int) *
            --> java.awt.geom.Point2D$Double *
            --> java.awt.geom.Point2D$Double.getX() *
            --> java.awt.geom.Point2D$Double.getY() *
            --> java.io.PrintStream *
            --> java.io.PrintStream.println(java.lang.String) *
            --> java.lang.Class *
            --> java.lang.Integer.Integer(int) *
            --> java.lang.Math.round(double) *
            --> java.lang.Object *
            --> java.lang.Object.getClass() *
            --> java.lang.String *
            --> java.lang.String.String() *
            --> java.lang.String.split(java.lang.String) *
            --> java.lang.String.valueOf(java.lang.Object) *
            --> java.lang.StringBuilder *
            --> java.lang.StringBuilder.StringBuilder(java.lang.String) *
            --> java.lang.StringBuilder.append(int) *
            --> java.lang.StringBuilder.append(java.lang.String) *
            --> java.lang.StringBuilder.toString() *
            --> java.lang.System.err *
            --> java.lang.System.out *
            --> java.text.NumberFormat *
            --> java.text.NumberFormat.format(double) *
            --> java.text.NumberFormat.getInstance() *
            --> java.text.NumberFormat.setMaximumFractionDigits(int) *
            --> java.util.Vector *
            --> java.util.Vector.Vector() *
            --> java.util.Vector.add(java.lang.Object) *
            --> java.util.Vector.elementAt(int) *
            --> java.util.Vector.size() *
        currentFile
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.applyToImage()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.applyToImageBatch(java.lang.String)
            --> java.lang.String *
        height
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        imageCounter
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.GranuleDetectorControl$DetectorHeart(de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        kernelChannel
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.GranuleDetectorControl$DetectorHeart(de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        kernelMask
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte
        maxLabel
        shortPath
            --> java.lang.String *
        this$0
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.GranuleDetectorControl$DetectorHeart(de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        width
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
    GranuleDetectorGUI
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.GranuleDetectorControl(de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.applyToImage()
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.applyToImageBatch(java.lang.String)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.gui
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.run()
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.GranuleDetectorGUI$GranuleTableModel(de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI, int, int)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.saveTable()
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.this$0
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorMain.GranuleDetectorMain()
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorMain.gui
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorMain.run()
        --> java.awt.event.ActionListener *
        --> javax.swing.JFrame *
        GranuleDetectorGUI()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorMain.GranuleDetectorMain()
            --> javax.swing.JFrame.JFrame() *
        a1_0
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.actionPerformed(java.awt.event.ActionEvent)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.detectMode(int)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
            --> javax.swing.JRadioButton *
        a1_1
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.actionPerformed(java.awt.event.ActionEvent)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.detectMode(int)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
            --> javax.swing.JRadioButton *
        a1_2
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.actionPerformed(java.awt.event.ActionEvent)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.detectMode(int)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
            --> javax.swing.JRadioButton *
        a2_0
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.actionPerformed(java.awt.event.ActionEvent)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.detectMode(int)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
            --> javax.swing.JRadioButton *
        a2_1
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.actionPerformed(java.awt.event.ActionEvent)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.detectMode(int)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
            --> javax.swing.JRadioButton *
        a2_2
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.actionPerformed(java.awt.event.ActionEvent)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.detectMode(int)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
            --> javax.swing.JRadioButton *
        a3_0
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.actionPerformed(java.awt.event.ActionEvent)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.detectMode(int)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
            --> javax.swing.JRadioButton *
        a3_1
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.actionPerformed(java.awt.event.ActionEvent)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.detectMode(int)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
            --> javax.swing.JRadioButton *
        a3_2
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.actionPerformed(java.awt.event.ActionEvent)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.detectMode(int)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
            --> javax.swing.JRadioButton *
        a4_0
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.actionPerformed(java.awt.event.ActionEvent)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.detectMode(int)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
            --> javax.swing.JRadioButton *
        a4_1
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.actionPerformed(java.awt.event.ActionEvent)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.detectMode(int)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
            --> javax.swing.JRadioButton *
        a4_2
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.actionPerformed(java.awt.event.ActionEvent)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.detectMode(int)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
            --> javax.swing.JRadioButton *
        actionPerformed(java.awt.event.ActionEvent)
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.applyToImage()
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.setDirToWorkOn(java.lang.String)
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.clear()
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.fireTableDataChanged() *
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.getRowCount()
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.saveTable()
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.setValueAt(java.lang.Object, int, int)
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.a1_0
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.a1_1
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.a1_2
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.a2_0
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.a2_1
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.a2_2
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.a3_0
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.a3_1
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.a3_2
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.a4_0
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.a4_1
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.a4_2
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.batchDetector
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.detector
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.detectorRunning
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.resultTabModel
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setStatus(java.lang.String)
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setVisible(boolean) *
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.tabFrame
            --> ij.IJ.showMessage(java.lang.String) *
            --> java.awt.Component *
            --> java.awt.event.ActionEvent *
            --> java.awt.event.ActionEvent.getActionCommand() *
            --> java.io.File *
            --> java.io.File.getPath() *
            --> java.io.PrintStream *
            --> java.io.PrintStream.println(java.lang.String) *
            --> java.lang.Object *
            --> java.lang.Runnable *
            --> java.lang.String *
            --> java.lang.System.out *
            --> java.lang.Thread *
            --> java.lang.Thread.Thread(java.lang.Runnable) *
            --> java.lang.Thread.interrupt() *
            --> java.lang.Thread.start() *
            --> javax.swing.JFileChooser.JFileChooser() *
            --> javax.swing.JFileChooser.getSelectedFile() *
            --> javax.swing.JFileChooser.setFileSelectionMode(int) *
            --> javax.swing.JFileChooser.showOpenDialog(java.awt.Component) *
            --> javax.swing.JFrame *
            --> javax.swing.JFrame.setVisible(boolean) *
            --> javax.swing.JRadioButton *
            --> javax.swing.JRadioButton.setEnabled(boolean) *
        add(java.awt.Component) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
        alg_1g
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.detectMode(int)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
            --> javax.swing.ButtonGroup *
        alg_2g
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.detectMode(int)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
            --> javax.swing.ButtonGroup *
        alg_3g
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.detectMode(int)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
            --> javax.swing.ButtonGroup *
        alg_4g
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.detectMode(int)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
            --> javax.swing.ButtonGroup *
        batchDetector
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.actionPerformed(java.awt.event.ActionEvent)
            --> java.lang.Thread *
        ch0
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.getKernelChannel()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
            --> javax.swing.JRadioButton *
        ch1
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.getKernelChannel()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
            --> javax.swing.JRadioButton *
        ch2
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.getKernelChannel()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
            --> javax.swing.JRadioButton *
        ch3
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.getKernelChannel()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
            --> javax.swing.JRadioButton *
        ch4
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.getKernelChannel()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
            --> javax.swing.JRadioButton *
        chs0
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.getCopyChannels()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
            --> javax.swing.JCheckBox *
        chs1
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.getCopyChannels()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
            --> javax.swing.JCheckBox *
        chs2
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.getCopyChannels()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
            --> javax.swing.JCheckBox *
        chs3
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.getCopyChannels()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
            --> javax.swing.JCheckBox *
        chs4
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.getCopyChannels()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
            --> javax.swing.JCheckBox *
        detectMode(int)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.a1_0
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.a1_1
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.a1_2
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.a2_0
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.a2_1
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.a2_2
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.a3_0
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.a3_1
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.a3_2
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.a4_0
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.a4_1
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.a4_2
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.alg_1g
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.alg_2g
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.alg_3g
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.alg_4g
            --> javax.swing.ButtonGroup *
            --> javax.swing.ButtonGroup.getSelection() *
            --> javax.swing.ButtonModel *
            --> javax.swing.JRadioButton *
            --> javax.swing.JRadioButton.getModel() *
        detector
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.actionPerformed(java.awt.event.ActionEvent)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.init(de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl)
        detectorRunning
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.actionPerformed(java.awt.event.ActionEvent)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.init(de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.subThreadFinished()
        entry_minGranuleSize
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.getMinimumGranuleSize()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
            --> javax.swing.JTextField *
        getCopyChannels()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.chs0
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.chs1
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.chs2
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.chs3
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.chs4
            --> javax.swing.JCheckBox *
            --> javax.swing.JCheckBox.isSelected() *
        getKernelChannel()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.ch0
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.ch1
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.ch2
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.ch3
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.ch4
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.kernelChannel
            --> javax.swing.ButtonGroup *
            --> javax.swing.ButtonGroup.getSelection() *
            --> javax.swing.ButtonModel *
            --> javax.swing.JRadioButton *
            --> javax.swing.JRadioButton.getModel() *
        getMinimumGranuleSize()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.entry_minGranuleSize
            --> java.lang.Integer *
            --> java.lang.Integer.intValue() *
            --> java.lang.Integer.valueOf(java.lang.String) *
            --> java.lang.String *
            --> javax.swing.JTextField *
            --> javax.swing.JTextField.getText() *
        getThis()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.saveTable()
        init(de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl)
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.detector
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.detectorRunning
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.open()
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupResultTable()
        kernelChannel
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.getKernelChannel()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
            --> javax.swing.ButtonGroup *
        open()
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.GranuleDetectorControl(de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI)
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.init(de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorMain.run()
        resultTab
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupResultTable()
            --> javax.swing.JTable *
        resultTabModel
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.actionPerformed(java.awt.event.ActionEvent)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupResultTable()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.showResultData(java.util.Vector)
        setResizable(boolean) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
        setSize(int, int) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
        setStatus(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.applyToImage()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.applyToImageBatch(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.run()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.actionPerformed(java.awt.event.ActionEvent)
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.status
            --> java.lang.String *
            --> java.lang.StringBuilder *
            --> java.lang.StringBuilder.StringBuilder(java.lang.String) *
            --> java.lang.StringBuilder.append(java.lang.String) *
            --> java.lang.StringBuilder.toString() *
            --> javax.swing.JLabel *
            --> javax.swing.JLabel.setText(java.lang.String) *
        setTitle(java.lang.String) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
        setVisible(boolean) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.actionPerformed(java.awt.event.ActionEvent)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
        setupMainControlWindow()
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.a1_0
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.a1_1
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.a1_2
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.a2_0
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.a2_1
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.a2_2
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.a3_0
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.a3_1
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.a3_2
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.a4_0
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.a4_1
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.a4_2
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.add(java.awt.Component) *
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.alg_1g
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.alg_2g
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.alg_3g
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.alg_4g
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.ch0
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.ch1
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.ch2
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.ch3
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.ch4
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.chs0
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.chs1
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.chs2
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.chs3
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.chs4
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.entry_minGranuleSize
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.init(de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl)
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.kernelChannel
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setResizable(boolean) *
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setSize(int, int) *
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setTitle(java.lang.String) *
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setVisible(boolean) *
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.showMaskOnly
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.showResultBox
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.status
            --> java.awt.BorderLayout.BorderLayout() *
            --> java.awt.BorderLayout.BorderLayout(int, int) *
            --> java.awt.BorderLayout.setVgap(int) *
            --> java.awt.Component *
            --> java.awt.Dimension *
            --> java.awt.Dimension.Dimension(int, int) *
            --> java.awt.GridBagConstraints *
            --> java.awt.GridBagConstraints.GridBagConstraints() *
            --> java.awt.GridBagConstraints.anchor *
            --> java.awt.GridBagConstraints.gridx *
            --> java.awt.GridBagConstraints.gridy *
            --> java.awt.GridBagConstraints.ipadx *
            --> java.awt.GridBagConstraints.ipady *
            --> java.awt.GridBagLayout.GridBagLayout() *
            --> java.awt.GridBagLayout.setConstraints(java.awt.Component, java.awt.GridBagConstraints) *
            --> java.awt.GridLayout.GridLayout(int, int) *
            --> java.awt.GridLayout.setVgap(int) *
            --> java.awt.LayoutManager *
            --> java.awt.event.ActionListener *
            --> java.lang.Object *
            --> java.lang.String *
            --> javax.swing.AbstractButton *
            --> javax.swing.BorderFactory.createLoweredBevelBorder() *
            --> javax.swing.ButtonGroup *
            --> javax.swing.ButtonGroup.ButtonGroup() *
            --> javax.swing.ButtonGroup.add(javax.swing.AbstractButton) *
            --> javax.swing.JButton.JButton(java.lang.String) *
            --> javax.swing.JButton.addActionListener(java.awt.event.ActionListener) *
            --> javax.swing.JButton.setActionCommand(java.lang.String) *
            --> javax.swing.JButton.setMaximumSize(java.awt.Dimension) *
            --> javax.swing.JButton.setMinimumSize(java.awt.Dimension) *
            --> javax.swing.JButton.setPreferredSize(java.awt.Dimension) *
            --> javax.swing.JCheckBox *
            --> javax.swing.JCheckBox.JCheckBox(java.lang.String) *
            --> javax.swing.JCheckBox.setSelected(boolean) *
            --> javax.swing.JCheckBox.setSize(int, int) *
            --> javax.swing.JLabel *
            --> javax.swing.JLabel.JLabel(java.lang.String) *
            --> javax.swing.JLabel.setSize(int, int) *
            --> javax.swing.JPanel.JPanel() *
            --> javax.swing.JPanel.add(java.awt.Component) *
            --> javax.swing.JPanel.add(java.awt.Component, java.lang.Object) *
            --> javax.swing.JPanel.setBorder(javax.swing.border.Border) *
            --> javax.swing.JPanel.setLayout(java.awt.LayoutManager) *
            --> javax.swing.JPanel.setMaximumSize(java.awt.Dimension) *
            --> javax.swing.JPanel.setPreferredSize(java.awt.Dimension) *
            --> javax.swing.JPanel.setSize(int, int) *
            --> javax.swing.JPanel.setSize(java.awt.Dimension) *
            --> javax.swing.JRadioButton *
            --> javax.swing.JRadioButton.JRadioButton(java.lang.String) *
            --> javax.swing.JRadioButton.addActionListener(java.awt.event.ActionListener) *
            --> javax.swing.JRadioButton.setActionCommand(java.lang.String) *
            --> javax.swing.JRadioButton.setEnabled(boolean) *
            --> javax.swing.JRadioButton.setSelected(boolean) *
            --> javax.swing.JRadioButton.setSize(int, int) *
            --> javax.swing.JTextField *
            --> javax.swing.JTextField.JTextField(int) *
            --> javax.swing.JTextField.setSize(int, int) *
            --> javax.swing.JTextField.setText(java.lang.String) *
            --> javax.swing.border.Border *
        setupResultTable()
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.GranuleDetectorGUI$GranuleTableModel(de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI, int, int)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.init(de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl)
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.resultTab
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.resultTabModel
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.tabFrame
            --> java.awt.BorderLayout.BorderLayout() *
            --> java.awt.Component *
            --> java.awt.Dimension *
            --> java.awt.Dimension.Dimension(int, int) *
            --> java.awt.FlowLayout.FlowLayout() *
            --> java.awt.LayoutManager *
            --> java.awt.event.ActionListener *
            --> java.lang.Object *
            --> java.lang.String *
            --> javax.swing.JButton.JButton(java.lang.String) *
            --> javax.swing.JButton.addActionListener(java.awt.event.ActionListener) *
            --> javax.swing.JButton.setActionCommand(java.lang.String) *
            --> javax.swing.JButton.setSize(java.awt.Dimension) *
            --> javax.swing.JFrame *
            --> javax.swing.JFrame.JFrame() *
            --> javax.swing.JFrame.add(java.awt.Component) *
            --> javax.swing.JFrame.setSize(int, int) *
            --> javax.swing.JFrame.setTitle(java.lang.String) *
            --> javax.swing.JFrame.setVisible(boolean) *
            --> javax.swing.JFrame.validate() *
            --> javax.swing.JPanel.JPanel() *
            --> javax.swing.JPanel.add(java.awt.Component) *
            --> javax.swing.JPanel.add(java.awt.Component, java.lang.Object) *
            --> javax.swing.JPanel.setLayout(java.awt.LayoutManager) *
            --> javax.swing.JScrollPane.JScrollPane(java.awt.Component) *
            --> javax.swing.JTable *
            --> javax.swing.JTable.JTable(javax.swing.table.TableModel) *
            --> javax.swing.JToolBar.JToolBar(java.lang.String) *
            --> javax.swing.JToolBar.add(java.awt.Component) *
            --> javax.swing.table.TableModel *
        showMaskOnly
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.showResultMask()
            --> javax.swing.JCheckBox *
        showResultBox
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.showResultImage()
            --> javax.swing.JCheckBox *
        showResultData(java.util.Vector)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.run()
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.insertData(java.util.Vector)
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.resultTabModel
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.tabFrame
            --> java.util.Vector *
            --> javax.swing.JFrame *
            --> javax.swing.JFrame.setVisible(boolean) *
        showResultImage()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.showResultBox
            --> javax.swing.JCheckBox *
            --> javax.swing.JCheckBox.isSelected() *
        showResultMask()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.showMaskOnly
            --> javax.swing.JCheckBox *
            --> javax.swing.JCheckBox.isSelected() *
        status
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setStatus(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
            --> javax.swing.JLabel *
        subThreadFinished()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.run()
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.detectorRunning
        tabFrame
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.actionPerformed(java.awt.event.ActionEvent)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupResultTable()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.showResultData(java.util.Vector)
            --> javax.swing.JFrame *
    GranuleDetectorGUI$GranuleTableModel
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel$ResultTabFileFilter.GranuleDetectorGUI$GranuleTableModel$ResultTabFileFilter(de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel$ResultTabFileFilter.this$1
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.actionPerformed(java.awt.event.ActionEvent)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.resultTabModel
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupResultTable()
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.showResultData(java.util.Vector)
        --> javax.swing.table.AbstractTableModel *
        GranuleDetectorGUI$GranuleTableModel(de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI, int, int)
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.cols
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.data
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.header
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.lastDir
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.rows
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.this$0
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupResultTable()
            --> java.io.File *
            --> java.io.File.File(java.lang.String) *
            --> java.lang.Object *
            --> java.lang.Object[][] *
            --> java.lang.String *
            --> java.lang.System.getProperty(java.lang.String) *
            --> javax.swing.table.AbstractTableModel.AbstractTableModel() *
        clear()
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.cols
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.data
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.fireTableDataChanged() *
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.rows
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.actionPerformed(java.awt.event.ActionEvent)
            --> java.lang.Object *
        cols
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.GranuleDetectorGUI$GranuleTableModel(de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI, int, int)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.clear()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.getColumnCount()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.setValueAt(java.lang.Object, int, int)
        data
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.GranuleDetectorGUI$GranuleTableModel(de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI, int, int)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.clear()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.getValueAt(int, int)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.setValueAt(java.lang.Object, int, int)
            --> java.lang.Object *
        fireTableDataChanged() *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.clear()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.insertData(java.util.Vector)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.actionPerformed(java.awt.event.ActionEvent)
        getColumnCount()
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.cols
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.tableToString()
        getColumnName(int)
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.header
            --> java.lang.String *
        getRowCount()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.insertData(java.util.Vector)
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.rows
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.tableToString()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.actionPerformed(java.awt.event.ActionEvent)
        getValueAt(int, int)
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.data
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.tableToString()
            --> java.lang.Object *
        header
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.GranuleDetectorGUI$GranuleTableModel(de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI, int, int)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.getColumnName(int)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.tableToString()
            --> java.lang.String *
        insertData(java.util.Vector)
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.fireTableDataChanged() *
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.getRowCount()
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.setValueAt(java.lang.Object, int, int)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.showResultData(java.util.Vector)
            --> java.lang.Object *
            --> java.lang.Object[] *
            --> java.util.Vector *
            --> java.util.Vector.get(int) *
            --> java.util.Vector.size() *
        lastDir
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.GranuleDetectorGUI$GranuleTableModel(de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI, int, int)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.saveTable()
            --> java.io.File *
        rows
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.GranuleDetectorGUI$GranuleTableModel(de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI, int, int)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.clear()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.getRowCount()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.setValueAt(java.lang.Object, int, int)
        saveTable()
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel$ResultTabFileFilter.GranuleDetectorGUI$GranuleTableModel$ResultTabFileFilter(de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel)
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.lastDir
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.tableToString()
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.this$0
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.actionPerformed(java.awt.event.ActionEvent)
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.getThis()
            --> java.awt.Component *
            --> java.io.File *
            --> java.io.File.File(java.lang.String) *
            --> java.io.File.getPath() *
            --> java.io.FileWriter.FileWriter(java.lang.String) *
            --> java.io.FileWriter.close() *
            --> java.io.FileWriter.write(java.lang.String) *
            --> java.io.IOException *
            --> java.io.PrintStream *
            --> java.io.PrintStream.println(java.lang.String) *
            --> java.lang.String *
            --> java.lang.StringBuffer *
            --> java.lang.StringBuffer.toString() *
            --> java.lang.StringBuilder *
            --> java.lang.StringBuilder.StringBuilder(java.lang.String) *
            --> java.lang.StringBuilder.append(java.lang.String) *
            --> java.lang.StringBuilder.toString() *
            --> java.lang.System.err *
            --> javax.swing.JFileChooser.JFileChooser() *
            --> javax.swing.JFileChooser.getCurrentDirectory() *
            --> javax.swing.JFileChooser.getSelectedFile() *
            --> javax.swing.JFileChooser.setApproveButtonText(java.lang.String) *
            --> javax.swing.JFileChooser.setCurrentDirectory(java.io.File) *
            --> javax.swing.JFileChooser.setDialogTitle(java.lang.String) *
            --> javax.swing.JFileChooser.setFileFilter(javax.swing.filechooser.FileFilter) *
            --> javax.swing.JFileChooser.setFileSelectionMode(int) *
            --> javax.swing.JFileChooser.setSelectedFile(java.io.File) *
            --> javax.swing.JFileChooser.showOpenDialog(java.awt.Component) *
            --> javax.swing.filechooser.FileFilter *
        setValueAt(java.lang.Object, int, int)
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.cols
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.data
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.insertData(java.util.Vector)
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.rows
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.actionPerformed(java.awt.event.ActionEvent)
            --> java.lang.Object *
            --> java.lang.Object[][] *
        tableToString()
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.getColumnCount()
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.getRowCount()
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.getValueAt(int, int)
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.header
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.saveTable()
            --> java.lang.Integer *
            --> java.lang.Integer.intValue() *
            --> java.lang.Integer.toString(int) *
            --> java.lang.Object *
            --> java.lang.String *
            --> java.lang.String.valueOf(java.lang.Object) *
            --> java.lang.StringBuffer *
            --> java.lang.StringBuffer.StringBuffer() *
            --> java.lang.StringBuffer.append(java.lang.String) *
            --> java.lang.StringBuilder *
            --> java.lang.StringBuilder.StringBuilder() *
            --> java.lang.StringBuilder.StringBuilder(java.lang.String) *
            --> java.lang.StringBuilder.append(java.lang.Object) *
            --> java.lang.StringBuilder.append(java.lang.String) *
            --> java.lang.StringBuilder.toString() *
        this$0
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.GranuleDetectorGUI$GranuleTableModel(de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI, int, int)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.saveTable()
    GranuleDetectorGUI$GranuleTableModel$ResultTabFileFilter
        --> javax.swing.filechooser.FileFilter *
        GranuleDetectorGUI$GranuleTableModel$ResultTabFileFilter(de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel)
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel$ResultTabFileFilter.this$1
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.saveTable()
            --> javax.swing.filechooser.FileFilter.FileFilter() *
        accept(java.io.File)
            --> java.io.File *
            --> java.io.File.getName() *
            --> java.lang.String *
            --> java.lang.String.endsWith(java.lang.String) *
        getDescription()
            --> java.lang.String *
        this$1
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel$ResultTabFileFilter.GranuleDetectorGUI$GranuleTableModel$ResultTabFileFilter(de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel)
    GranuleDetectorMain
        --> java.lang.Object *
        --> java.lang.Runnable *
        <-- mtb_granules.Granule_Detector_2D.detector
        <-- mtb_granules.Granule_Detector_2D.run()
        GranuleDetectorMain()
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.GranuleDetectorGUI()
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorMain.gui
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorMain.run()
            --> java.lang.Object.Object() *
            <-- mtb_granules.Granule_Detector_2D.run()
        gui
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorMain.GranuleDetectorMain()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorMain.run()
        run()
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.open()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorMain.GranuleDetectorMain()
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorMain.gui
de.unihalle.informatik.MiToBo.apps.neurites2D
    NeuritDetector2DGUI
        --> java.awt.event.ActionListener *
        --> javax.swing.JFrame *
        DirChanWindow()
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.DirFrame
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.PosX
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.PosY
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.chanText
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.getHeight() *
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.getWidth() *
            --> java.awt.BorderLayout.BorderLayout() *
            --> java.awt.Color *
            --> java.awt.Color.Color(int, int, int) *
            --> java.awt.Component *
            --> java.awt.GridLayout.GridLayout(int, int) *
            --> java.awt.LayoutManager *
            --> java.awt.event.ActionListener *
            --> java.lang.String *
            --> javax.swing.BorderFactory.createLineBorder(java.awt.Color, int) *
            --> javax.swing.BorderFactory.createTitledBorder(javax.swing.border.Border, java.lang.String) *
            --> javax.swing.JButton.JButton(java.lang.String) *
            --> javax.swing.JButton.addActionListener(java.awt.event.ActionListener) *
            --> javax.swing.JButton.setActionCommand(java.lang.String) *
            --> javax.swing.JFrame *
            --> javax.swing.JFrame.JFrame() *
            --> javax.swing.JFrame.add(java.awt.Component) *
            --> javax.swing.JFrame.getHeight() *
            --> javax.swing.JFrame.getWidth() *
            --> javax.swing.JFrame.pack() *
            --> javax.swing.JFrame.setLocation(int, int) *
            --> javax.swing.JFrame.setResizable(boolean) *
            --> javax.swing.JFrame.setTitle(java.lang.String) *
            --> javax.swing.JFrame.setVisible(boolean) *
            --> javax.swing.JFrame.toFront() *
            --> javax.swing.JLabel.JLabel(java.lang.String) *
            --> javax.swing.JPanel.JPanel() *
            --> javax.swing.JPanel.add(java.awt.Component) *
            --> javax.swing.JPanel.setBorder(javax.swing.border.Border) *
            --> javax.swing.JPanel.setLayout(java.awt.LayoutManager) *
            --> javax.swing.JTextField *
            --> javax.swing.JTextField.JTextField(int) *
            --> javax.swing.border.Border *
            --> javax.swing.border.TitledBorder *
        DirFrame
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.DirChanWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
            --> javax.swing.JFrame *
        MainWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.NeuritDetector2DGUI()
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.PosX
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.PosY
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.SnakeSetButton
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.add(java.awt.Component) *
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.cPanel
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.cancel
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.chanPanel
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.chans
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.coreButs
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.coreChan
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.coreGroup
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.dir
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.enableAll(boolean)
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.file
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.image
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.input
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.myBlue
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.nPanel
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.ncPanel
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.neuritButs
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.neuritChan
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.pack() *
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.progBar
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.run
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.setDefaultCloseOperation(int) *
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.setJMenuBar(javax.swing.JMenuBar) *
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.setLocation(int, int) *
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.setPanel
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.setResizable(boolean) *
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.setTitle(java.lang.String) *
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.setVisible(boolean) *
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.snakeGroup
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.snakeNo
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.snakeYes
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.snaked
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.status
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.textfield
            --> ij.ImagePlus *
            --> java.awt.BorderLayout.BorderLayout() *
            --> java.awt.Color *
            --> java.awt.Component *
            --> java.awt.FlowLayout.FlowLayout(int, int, int) *
            --> java.awt.GridLayout.GridLayout(int, int) *
            --> java.awt.LayoutManager *
            --> java.awt.event.ActionListener *
            --> java.io.File *
            --> java.lang.Integer *
            --> java.lang.Integer.valueOf(int) *
            --> java.lang.Object *
            --> java.lang.String *
            --> java.lang.String.valueOf(int) *
            --> java.util.Vector *
            --> java.util.Vector.Vector() *
            --> java.util.Vector.addElement(java.lang.Object) *
            --> javax.swing.AbstractButton *
            --> javax.swing.BorderFactory.createLineBorder(java.awt.Color, int) *
            --> javax.swing.BorderFactory.createTitledBorder(javax.swing.border.Border, java.lang.String) *
            --> javax.swing.ButtonGroup *
            --> javax.swing.ButtonGroup.ButtonGroup() *
            --> javax.swing.ButtonGroup.add(javax.swing.AbstractButton) *
            --> javax.swing.JButton *
            --> javax.swing.JButton.JButton(java.lang.String) *
            --> javax.swing.JButton.addActionListener(java.awt.event.ActionListener) *
            --> javax.swing.JButton.setActionCommand(java.lang.String) *
            --> javax.swing.JCheckBox.JCheckBox(java.lang.String) *
            --> javax.swing.JCheckBox.addActionListener(java.awt.event.ActionListener) *
            --> javax.swing.JCheckBox.setActionCommand(java.lang.String) *
            --> javax.swing.JCheckBox.setEnabled(boolean) *
            --> javax.swing.JCheckBox.setSelected(boolean) *
            --> javax.swing.JLabel *
            --> javax.swing.JLabel.JLabel(java.lang.String) *
            --> javax.swing.JMenu *
            --> javax.swing.JMenu.JMenu(java.lang.String) *
            --> javax.swing.JMenu.add(javax.swing.JMenuItem) *
            --> javax.swing.JMenuBar *
            --> javax.swing.JMenuBar.JMenuBar() *
            --> javax.swing.JMenuBar.add(javax.swing.JMenu) *
            --> javax.swing.JMenuItem *
            --> javax.swing.JMenuItem.JMenuItem(java.lang.String) *
            --> javax.swing.JMenuItem.addActionListener(java.awt.event.ActionListener) *
            --> javax.swing.JMenuItem.setActionCommand(java.lang.String) *
            --> javax.swing.JPanel *
            --> javax.swing.JPanel.JPanel() *
            --> javax.swing.JPanel.add(java.awt.Component) *
            --> javax.swing.JPanel.add(java.awt.Component, java.lang.Object) *
            --> javax.swing.JPanel.setBorder(javax.swing.border.Border) *
            --> javax.swing.JPanel.setLayout(java.awt.LayoutManager) *
            --> javax.swing.JProgressBar *
            --> javax.swing.JProgressBar.JProgressBar(int, int) *
            --> javax.swing.JProgressBar.setForeground(java.awt.Color) *
            --> javax.swing.JProgressBar.setToolTipText(java.lang.String) *
            --> javax.swing.JRadioButton *
            --> javax.swing.JRadioButton.JRadioButton(java.lang.String) *
            --> javax.swing.JRadioButton.addActionListener(java.awt.event.ActionListener) *
            --> javax.swing.JRadioButton.setActionCommand(java.lang.String) *
            --> javax.swing.JRadioButton.setSelected(boolean) *
            --> javax.swing.JRadioButton.setSize(int, int) *
            --> javax.swing.JTextField *
            --> javax.swing.JTextField.JTextField(int) *
            --> javax.swing.border.Border *
            --> javax.swing.border.TitledBorder *
        NeuritDetector2DGUI()
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.myBlue
            --> java.awt.Color *
            --> java.awt.Color.Color(int, int, int) *
            --> javax.swing.JFrame.JFrame() *
        PosX
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.DirChanWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
        PosY
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.DirChanWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
        SnakeSetButton
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.enableAll(boolean)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.resetSettings()
            --> javax.swing.JButton *
        SnakeWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
            --> java.awt.BorderLayout.BorderLayout() *
            --> java.awt.Color *
            --> java.awt.Color.Color(int, int, int) *
            --> java.awt.Component *
            --> java.awt.GridLayout.GridLayout(int, int) *
            --> java.awt.LayoutManager *
            --> java.lang.String *
            --> javax.swing.BorderFactory.createLineBorder(java.awt.Color, int) *
            --> javax.swing.BorderFactory.createTitledBorder(javax.swing.border.Border, java.lang.String) *
            --> javax.swing.JFrame.JFrame() *
            --> javax.swing.JFrame.add(java.awt.Component) *
            --> javax.swing.JFrame.pack() *
            --> javax.swing.JFrame.setJMenuBar(javax.swing.JMenuBar) *
            --> javax.swing.JFrame.setResizable(boolean) *
            --> javax.swing.JFrame.setTitle(java.lang.String) *
            --> javax.swing.JFrame.setVisible(boolean) *
            --> javax.swing.JMenu *
            --> javax.swing.JMenu.JMenu(java.lang.String) *
            --> javax.swing.JMenu.add(javax.swing.JMenuItem) *
            --> javax.swing.JMenuBar *
            --> javax.swing.JMenuBar.JMenuBar() *
            --> javax.swing.JMenuBar.add(javax.swing.JMenu) *
            --> javax.swing.JMenuItem *
            --> javax.swing.JMenuItem.JMenuItem(java.lang.String) *
            --> javax.swing.JPanel.JPanel() *
            --> javax.swing.JPanel.add(java.awt.Component) *
            --> javax.swing.JPanel.setBorder(javax.swing.border.Border) *
            --> javax.swing.JPanel.setLayout(java.awt.LayoutManager) *
            --> javax.swing.border.Border *
            --> javax.swing.border.TitledBorder *
        actionPerformed(java.awt.event.ActionEvent)
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.DirChanWindow()
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.DirFrame
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.SnakeSetButton
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.SnakeWindow()
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.cPanel
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.chanText
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.chans
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.coreButs
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.coreGroup
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.dir
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.dispose() *
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.enableAll(boolean)
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.file
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.getDirName()
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.image
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.input
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.nPanel
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.neuritButs
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.neuritChan
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.resetSettings()
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.setStatus(java.lang.String, int)
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.showMessage(java.lang.String)
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.snaked
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.textfield
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.toFront() *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getImagePlus()
            --> de.unihalle.informatik.MiToBo.io.files.ImageFilter.ImageFilter()
            --> de.unihalle.informatik.MiToBo.io.files.ImgOpen.ImgOpen(java.lang.String, java.lang.String)
            --> de.unihalle.informatik.MiToBo.io.files.ImgOpen.open()
            --> ij.ImagePlus *
            --> ij.ImagePlus.close() *
            --> ij.ImagePlus.getStackSize() *
            --> ij.ImagePlus.show() *
            --> java.awt.Component *
            --> java.awt.event.ActionEvent *
            --> java.awt.event.ActionEvent.getActionCommand() *
            --> java.awt.event.ActionListener *
            --> java.io.File *
            --> java.io.File.File(java.lang.String) *
            --> java.io.File.exists() *
            --> java.io.File.getName() *
            --> java.io.File.getParent() *
            --> java.io.File.getPath() *
            --> java.io.File.mkdir() *
            --> java.io.File.separator *
            --> java.io.PrintStream *
            --> java.io.PrintStream.println(int) *
            --> java.io.PrintStream.println(java.lang.String) *
            --> java.lang.Integer *
            --> java.lang.Integer.intValue() *
            --> java.lang.Integer.valueOf(int) *
            --> java.lang.Integer.valueOf(java.lang.String) *
            --> java.lang.NumberFormatException *
            --> java.lang.Object *
            --> java.lang.String *
            --> java.lang.String.valueOf(int) *
            --> java.lang.String.valueOf(java.lang.Object) *
            --> java.lang.StringBuilder *
            --> java.lang.StringBuilder.StringBuilder(java.lang.String) *
            --> java.lang.StringBuilder.append(java.lang.String) *
            --> java.lang.StringBuilder.toString() *
            --> java.lang.System.out *
            --> java.util.Vector *
            --> java.util.Vector.addElement(java.lang.Object) *
            --> java.util.Vector.elementAt(int) *
            --> java.util.Vector.removeAllElements() *
            --> java.util.Vector.size() *
            --> javax.swing.AbstractButton *
            --> javax.swing.ButtonGroup *
            --> javax.swing.ButtonGroup.add(javax.swing.AbstractButton) *
            --> javax.swing.JButton *
            --> javax.swing.JButton.setEnabled(boolean) *
            --> javax.swing.JCheckBox *
            --> javax.swing.JCheckBox.JCheckBox(java.lang.String) *
            --> javax.swing.JCheckBox.addActionListener(java.awt.event.ActionListener) *
            --> javax.swing.JCheckBox.isSelected() *
            --> javax.swing.JCheckBox.setActionCommand(java.lang.String) *
            --> javax.swing.JCheckBox.setEnabled(boolean) *
            --> javax.swing.JCheckBox.setSelected(boolean) *
            --> javax.swing.JFileChooser.JFileChooser(java.lang.String) *
            --> javax.swing.JFileChooser.addChoosableFileFilter(javax.swing.filechooser.FileFilter) *
            --> javax.swing.JFileChooser.getSelectedFile() *
            --> javax.swing.JFileChooser.setAcceptAllFileFilterUsed(boolean) *
            --> javax.swing.JFileChooser.setFileSelectionMode(int) *
            --> javax.swing.JFileChooser.showOpenDialog(java.awt.Component) *
            --> javax.swing.JFrame *
            --> javax.swing.JFrame.dispose() *
            --> javax.swing.JFrame.setVisible(boolean) *
            --> javax.swing.JPanel *
            --> javax.swing.JPanel.add(java.awt.Component) *
            --> javax.swing.JPanel.removeAll() *
            --> javax.swing.JPanel.updateUI() *
            --> javax.swing.JTextField *
            --> javax.swing.JTextField.getText() *
            --> javax.swing.JTextField.setText(java.lang.String) *
            --> javax.swing.filechooser.FileFilter *
        add(java.awt.Component) *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
        cPanel
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
            --> javax.swing.JPanel *
        cancel
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.enableAll(boolean)
            --> javax.swing.JButton *
        chanPanel
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
            --> javax.swing.JPanel *
        chanText
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.DirChanWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
            --> javax.swing.JTextField *
        chans
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
        coreButs
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.enableAll(boolean)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.resetSettings()
            --> java.util.Vector *
        coreChan
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.enableAll(boolean)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.resetSettings()
        coreGroup
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
            --> javax.swing.ButtonGroup *
        dir
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
            --> java.lang.String *
        dispose() *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
        enableAll(boolean)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.SnakeSetButton
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.cancel
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.coreButs
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.coreChan
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.neuritButs
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.run
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.snakeNo
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.snakeYes
            --> java.lang.Object *
            --> java.util.Vector *
            --> java.util.Vector.elementAt(int) *
            --> java.util.Vector.size() *
            --> javax.swing.JButton *
            --> javax.swing.JButton.setEnabled(boolean) *
            --> javax.swing.JCheckBox *
            --> javax.swing.JCheckBox.setEnabled(boolean) *
            --> javax.swing.JCheckBox.setSelected(boolean) *
            --> javax.swing.JRadioButton *
            --> javax.swing.JRadioButton.setEnabled(boolean) *
        file
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
            --> java.lang.String *
        getDirName()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
            --> java.lang.String *
            --> java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String) *
            --> java.text.SimpleDateFormat.format(java.util.Date) *
            --> java.util.Date *
            --> java.util.Date.Date() *
        getHeight() *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.DirChanWindow()
        getWidth() *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.DirChanWindow()
        image
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
            --> ij.ImagePlus *
        input
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
            --> java.io.File *
        myBlue
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.NeuritDetector2DGUI()
            --> java.awt.Color *
        nPanel
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
            --> javax.swing.JPanel *
        ncPanel
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
            --> javax.swing.JPanel *
        neuritButs
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.enableAll(boolean)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.resetSettings()
            --> java.util.Vector *
        neuritChan
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.resetSettings()
            --> java.util.Vector *
        pack() *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
        progBar
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.resetSettings()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.setStatus(java.lang.String, int)
            --> javax.swing.JProgressBar *
        resetSettings()
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.SnakeSetButton
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.coreButs
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.coreChan
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.neuritButs
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.neuritChan
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.progBar
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.snakeNo
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.snakeYes
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.snaked
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.status
            --> java.lang.Integer *
            --> java.lang.Integer.valueOf(int) *
            --> java.lang.Object *
            --> java.lang.String *
            --> java.util.Vector *
            --> java.util.Vector.Vector() *
            --> java.util.Vector.addElement(java.lang.Object) *
            --> java.util.Vector.elementAt(int) *
            --> java.util.Vector.size() *
            --> javax.swing.JButton *
            --> javax.swing.JButton.setEnabled(boolean) *
            --> javax.swing.JCheckBox *
            --> javax.swing.JCheckBox.setEnabled(boolean) *
            --> javax.swing.JCheckBox.setSelected(boolean) *
            --> javax.swing.JLabel *
            --> javax.swing.JLabel.setText(java.lang.String) *
            --> javax.swing.JProgressBar *
            --> javax.swing.JProgressBar.setToolTipText(java.lang.String) *
            --> javax.swing.JProgressBar.setValue(int) *
            --> javax.swing.JRadioButton *
            --> javax.swing.JRadioButton.setSelected(boolean) *
        run
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.enableAll(boolean)
            --> javax.swing.JButton *
        setDefaultCloseOperation(int) *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
        setJMenuBar(javax.swing.JMenuBar) *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
        setLocation(int, int) *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
        setPanel
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
            --> javax.swing.JPanel *
        setResizable(boolean) *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
        setStatus(java.lang.String, int)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.progBar
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.status
            --> java.lang.String *
            --> java.lang.String.valueOf(int) *
            --> java.lang.StringBuilder *
            --> java.lang.StringBuilder.StringBuilder(java.lang.String) *
            --> java.lang.StringBuilder.append(java.lang.String) *
            --> java.lang.StringBuilder.toString() *
            --> javax.swing.JLabel *
            --> javax.swing.JLabel.setText(java.lang.String) *
            --> javax.swing.JProgressBar *
            --> javax.swing.JProgressBar.getValue() *
            --> javax.swing.JProgressBar.setToolTipText(java.lang.String) *
            --> javax.swing.JProgressBar.setValue(int) *
        setTitle(java.lang.String) *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
        setVisible(boolean) *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
        showMessage(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
            --> java.awt.Component *
            --> java.lang.Object *
            --> java.lang.String *
            --> javax.swing.JOptionPane.showMessageDialog(java.awt.Component, java.lang.Object, java.lang.String, int) *
        snakeGroup
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
            --> javax.swing.ButtonGroup *
        snakeNo
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.enableAll(boolean)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.resetSettings()
            --> javax.swing.JRadioButton *
        snakeYes
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.enableAll(boolean)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.resetSettings()
            --> javax.swing.JRadioButton *
        snaked
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.resetSettings()
        status
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.resetSettings()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.setStatus(java.lang.String, int)
            --> javax.swing.JLabel *
        textfield
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
            --> javax.swing.JTextField *
        toFront() *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
    NeuriteProfile
        --> java.lang.Object *
        <-- mtb_neurites.Neurit_Detector_2D.process()
        NeuriteProfile(de.unihalle.informatik.MiToBo.datatypes.Region2D)
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.neuriteRegion
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.profileData
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.skelTree
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.skeletonImg
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.voronoiImg
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcLongestPathProfiles(ij.ImagePlus, ij.ImagePlus, ij.ImagePlus)
            --> de.unihalle.informatik.MiToBo.datatypes.Region2D
            --> de.unihalle.informatik.MiToBo.morphology.SkeletonTree
            --> ij.ImagePlus *
            --> java.lang.Object.Object() *
        getNeuriteRegion()
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.neuriteRegion
            --> de.unihalle.informatik.MiToBo.datatypes.Region2D
        getProfileData()
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.profileData
        getSkeletonImg()
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.skeletonImg
            --> ij.ImagePlus *
        getSkeletonTree()
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.skelTree
            --> de.unihalle.informatik.MiToBo.morphology.SkeletonTree
        getVoronoiImg()
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.voronoiImg
            --> ij.ImagePlus *
        neuriteRegion
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.NeuriteProfile(de.unihalle.informatik.MiToBo.datatypes.Region2D)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.getNeuriteRegion()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.setNeuriteRegion(de.unihalle.informatik.MiToBo.datatypes.Region2D)
            --> de.unihalle.informatik.MiToBo.datatypes.Region2D
        profileData
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.NeuriteProfile(de.unihalle.informatik.MiToBo.datatypes.Region2D)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.getProfileData()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.saveProfileData(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.saveProfileList(java.util.LinkedList, java.lang.String)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.setProfileData(double[])
        saveProfileData(java.lang.String)
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.profileData
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.skelTree
            --> de.unihalle.informatik.MiToBo.morphology.SkeletonTree
            --> de.unihalle.informatik.MiToBo.morphology.SkeletonTree.getLongestPath()
            --> java.awt.geom.Point2D$Double *
            --> java.awt.geom.Point2D$Double.x *
            --> java.awt.geom.Point2D$Double.y *
            --> java.io.FileNotFoundException *
            --> java.io.PrintStream *
            --> java.io.PrintStream.PrintStream(java.lang.String) *
            --> java.io.PrintStream.close() *
            --> java.io.PrintStream.println(java.lang.String) *
            --> java.lang.Object *
            --> java.lang.String *
            --> java.lang.String.valueOf(int) *
            --> java.lang.StringBuilder *
            --> java.lang.StringBuilder.StringBuilder(java.lang.String) *
            --> java.lang.StringBuilder.append(double) *
            --> java.lang.StringBuilder.append(int) *
            --> java.lang.StringBuilder.append(java.lang.String) *
            --> java.lang.StringBuilder.toString() *
            --> java.lang.System.err *
            --> java.util.Vector *
            --> java.util.Vector.elementAt(int) *
        saveProfileList(java.util.LinkedList, java.lang.String)
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.profileData
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.skelTree
            --> de.unihalle.informatik.MiToBo.morphology.SkeletonTree
            --> java.io.FileNotFoundException *
            --> java.io.PrintStream *
            --> java.io.PrintStream.PrintStream(java.lang.String) *
            --> java.io.PrintStream.close() *
            --> java.io.PrintStream.print(double) *
            --> java.io.PrintStream.print(java.lang.String) *
            --> java.io.PrintStream.println() *
            --> java.io.PrintStream.println(java.lang.String) *
            --> java.lang.Object *
            --> java.lang.String *
            --> java.lang.StringBuilder *
            --> java.lang.StringBuilder.StringBuilder(java.lang.String) *
            --> java.lang.StringBuilder.append(java.lang.String) *
            --> java.lang.StringBuilder.toString() *
            --> java.lang.System.err *
            --> java.util.LinkedList *
            --> java.util.LinkedList.get(int) *
            --> java.util.LinkedList.size() *
            <-- mtb_neurites.Neurit_Detector_2D.process()
        saveSkeletonImage(java.lang.String)
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.skeletonImg
            --> ij.ImagePlus *
            --> ij.io.FileSaver.FileSaver(ij.ImagePlus) *
            --> ij.io.FileSaver.saveAsTiff(java.lang.String) *
            --> java.lang.String *
        saveVoronoiImage(java.lang.String)
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.voronoiImg
            --> ij.ImagePlus *
            --> ij.io.FileSaver.FileSaver(ij.ImagePlus) *
            --> ij.io.FileSaver.saveAsTiff(java.lang.String) *
            --> java.lang.String *
            <-- mtb_neurites.Neurit_Detector_2D.process()
        setNeuriteRegion(de.unihalle.informatik.MiToBo.datatypes.Region2D)
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.neuriteRegion
            --> de.unihalle.informatik.MiToBo.datatypes.Region2D
        setProfileData(double[])
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.profileData
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcLongestPathProfiles(ij.ImagePlus, ij.ImagePlus, ij.ImagePlus)
        setSkeletonImg(ij.ImagePlus)
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.skeletonImg
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcLongestPathProfiles(ij.ImagePlus, ij.ImagePlus, ij.ImagePlus)
            --> ij.ImagePlus *
        setSkeletonTree(de.unihalle.informatik.MiToBo.morphology.SkeletonTree)
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.skelTree
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcLongestPathProfiles(ij.ImagePlus, ij.ImagePlus, ij.ImagePlus)
            --> de.unihalle.informatik.MiToBo.morphology.SkeletonTree
        setVoronoiImg(ij.ImagePlus)
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.voronoiImg
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcLongestPathProfiles(ij.ImagePlus, ij.ImagePlus, ij.ImagePlus)
            --> ij.ImagePlus *
        skelTree
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.NeuriteProfile(de.unihalle.informatik.MiToBo.datatypes.Region2D)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.getSkeletonTree()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.saveProfileData(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.saveProfileList(java.util.LinkedList, java.lang.String)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.setSkeletonTree(de.unihalle.informatik.MiToBo.morphology.SkeletonTree)
            --> de.unihalle.informatik.MiToBo.morphology.SkeletonTree
        skeletonImg
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.NeuriteProfile(de.unihalle.informatik.MiToBo.datatypes.Region2D)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.getSkeletonImg()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.saveSkeletonImage(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.setSkeletonImg(ij.ImagePlus)
            --> ij.ImagePlus *
        voronoiImg
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.NeuriteProfile(de.unihalle.informatik.MiToBo.datatypes.Region2D)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.getVoronoiImg()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.saveVoronoiImage(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.setVoronoiImg(ij.ImagePlus)
            --> ij.ImagePlus *
    NeuriteProfileExtraction
        --> java.lang.Object *
        NeuriteProfileExtraction()
            --> java.lang.Object.Object() *
            <-- mtb_neurites.Neurit_Detector_2D.process()
        SpineLength
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcLongestPathProfiles(ij.ImagePlus, ij.ImagePlus, ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcProfile(de.unihalle.informatik.MiToBo.datatypes.Region2D, de.unihalle.informatik.MiToBo.morphology.SkeletonTree, ij.process.ImageProcessor, ij.process.ImageProcessor)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.static {}
        calcLongestPathProfiles(ij.ImagePlus, ij.ImagePlus, ij.ImagePlus)
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.NeuriteProfile(de.unihalle.informatik.MiToBo.datatypes.Region2D)
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.setProfileData(double[])
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.setSkeletonImg(ij.ImagePlus)
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.setSkeletonTree(de.unihalle.informatik.MiToBo.morphology.SkeletonTree)
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.setVoronoiImg(ij.ImagePlus)
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.SpineLength
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcProfile(de.unihalle.informatik.MiToBo.datatypes.Region2D, de.unihalle.informatik.MiToBo.morphology.SkeletonTree, ij.process.ImageProcessor, ij.process.ImageProcessor)
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.color_blue
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.color_red
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.color_white
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.color_yellow
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.getNeuritePathTrees(ij.process.ImageProcessor, ij.process.ImageProcessor, ij.process.ImageProcessor, java.util.Vector)
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.height
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.width
            --> de.unihalle.informatik.MiToBo.datatypes.Region2D
            --> de.unihalle.informatik.MiToBo.datatypes.Region2D.getArea()
            --> de.unihalle.informatik.MiToBo.datatypes.Region2D.getPoints()
            --> de.unihalle.informatik.MiToBo.morphology.SkeletonTree
            --> de.unihalle.informatik.MiToBo.morphology.SkeletonTree.getAllPixels()
            --> de.unihalle.informatik.MiToBo.morphology.SkeletonTree.getLongestPath()
            --> de.unihalle.informatik.MiToBo.morphology.SkeletonTree.getSpinesAlongPath(int)
            --> de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential.LabelComponentsSequential()
            --> de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential.regionSegmentation(ij.process.ImageProcessor, boolean)
            --> ij.ImagePlus *
            --> ij.ImagePlus.getHeight() *
            --> ij.ImagePlus.getProcessor() *
            --> ij.ImagePlus.getWidth() *
            --> ij.gui.NewImage.createByteImage(java.lang.String, int, int, int, int) *
            --> ij.gui.NewImage.createRGBImage(java.lang.String, int, int, int, int) *
            --> ij.process.ImageProcessor *
            --> ij.process.ImageProcessor.copyBits(ij.process.ImageProcessor, int, int, int) *
            --> ij.process.ImageProcessor.getPixel(int, int) *
            --> ij.process.ImageProcessor.putPixel(int, int, int) *
            --> java.awt.geom.Point2D$Double *
            --> java.awt.geom.Point2D$Double.x *
            --> java.awt.geom.Point2D$Double.y *
            --> java.io.PrintStream *
            --> java.io.PrintStream.println(java.lang.String) *
            --> java.lang.Object *
            --> java.lang.String *
            --> java.lang.System.err *
            --> java.util.LinkedList *
            --> java.util.LinkedList.LinkedList() *
            --> java.util.LinkedList.add(java.lang.Object) *
            --> java.util.Vector *
            --> java.util.Vector.elementAt(int) *
            --> java.util.Vector.removeElementAt(int) *
            --> java.util.Vector.size() *
            <-- mtb_neurites.Neurit_Detector_2D.process()
        calcProfile(de.unihalle.informatik.MiToBo.datatypes.Region2D, de.unihalle.informatik.MiToBo.morphology.SkeletonTree, ij.process.ImageProcessor, ij.process.ImageProcessor)
            --> I[][] *
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.SpineLength
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcLongestPathProfiles(ij.ImagePlus, ij.ImagePlus, ij.ImagePlus)
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.color_blue
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.color_green
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.color_red
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.height
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.width
            --> de.unihalle.informatik.MiToBo.datatypes.Region2D
            --> de.unihalle.informatik.MiToBo.datatypes.Region2D.getPoints()
            --> de.unihalle.informatik.MiToBo.morphology.SkeletonTree
            --> de.unihalle.informatik.MiToBo.morphology.SkeletonTree.getAllPixels()
            --> de.unihalle.informatik.MiToBo.morphology.SkeletonTree.getLongestPath()
            --> de.unihalle.informatik.MiToBo.morphology.SkeletonTree.getSpinesAlongPath(int)
            --> ij.process.ImageProcessor *
            --> ij.process.ImageProcessor.getPixel(int, int) *
            --> ij.process.ImageProcessor.putPixel(int, int, int) *
            --> java.awt.geom.Point2D$Double *
            --> java.awt.geom.Point2D$Double.Point2D$Double(double, double) *
            --> java.awt.geom.Point2D$Double.x *
            --> java.awt.geom.Point2D$Double.y *
            --> java.io.PrintStream *
            --> java.io.PrintStream.println(java.lang.String) *
            --> java.lang.Integer *
            --> java.lang.Integer.intValue() *
            --> java.lang.Integer.valueOf(int) *
            --> java.lang.Object *
            --> java.lang.String *
            --> java.lang.StringBuilder *
            --> java.lang.StringBuilder.StringBuilder(java.lang.String) *
            --> java.lang.StringBuilder.append(double) *
            --> java.lang.StringBuilder.append(java.lang.String) *
            --> java.lang.StringBuilder.toString() *
            --> java.lang.System.out *
            --> java.util.Random.Random() *
            --> java.util.Random.nextInt() *
            --> java.util.Vector *
            --> java.util.Vector.Vector() *
            --> java.util.Vector.add(java.lang.Object) *
            --> java.util.Vector.clear() *
            --> java.util.Vector.elementAt(int) *
            --> java.util.Vector.size() *
        color_blue
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcLongestPathProfiles(ij.ImagePlus, ij.ImagePlus, ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcProfile(de.unihalle.informatik.MiToBo.datatypes.Region2D, de.unihalle.informatik.MiToBo.morphology.SkeletonTree, ij.process.ImageProcessor, ij.process.ImageProcessor)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.static {}
        color_gray
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.getNeuritePathTrees(ij.process.ImageProcessor, ij.process.ImageProcessor, ij.process.ImageProcessor, java.util.Vector)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.static {}
        color_green
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcProfile(de.unihalle.informatik.MiToBo.datatypes.Region2D, de.unihalle.informatik.MiToBo.morphology.SkeletonTree, ij.process.ImageProcessor, ij.process.ImageProcessor)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.static {}
        color_red
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcLongestPathProfiles(ij.ImagePlus, ij.ImagePlus, ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcProfile(de.unihalle.informatik.MiToBo.datatypes.Region2D, de.unihalle.informatik.MiToBo.morphology.SkeletonTree, ij.process.ImageProcessor, ij.process.ImageProcessor)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.getNeuritePathTrees(ij.process.ImageProcessor, ij.process.ImageProcessor, ij.process.ImageProcessor, java.util.Vector)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.static {}
        color_white
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcLongestPathProfiles(ij.ImagePlus, ij.ImagePlus, ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.static {}
        color_yellow
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcLongestPathProfiles(ij.ImagePlus, ij.ImagePlus, ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.static {}
        getNeuritePathTrees(ij.process.ImageProcessor, ij.process.ImageProcessor, ij.process.ImageProcessor, java.util.Vector)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcLongestPathProfiles(ij.ImagePlus, ij.ImagePlus, ij.ImagePlus)
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.color_gray
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.color_red
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.height
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.width
            --> de.unihalle.informatik.MiToBo.datatypes.Region2D
            --> de.unihalle.informatik.MiToBo.datatypes.Region2D.getPoints()
            --> de.unihalle.informatik.MiToBo.morphology.SkeletonTree.SkeletonTree(int, int, ij.ImagePlus)
            --> ij.ImagePlus *
            --> ij.ImagePlus.getProcessor() *
            --> ij.gui.NewImage.createRGBImage(java.lang.String, int, int, int, int) *
            --> ij.process.BinaryProcessor.BinaryProcessor(ij.process.ByteProcessor) *
            --> ij.process.BinaryProcessor.getPixel(int, int) *
            --> ij.process.BinaryProcessor.skeletonize() *
            --> ij.process.ByteProcessor *
            --> ij.process.ByteProcessor.ByteProcessor(int, int) *
            --> ij.process.ByteProcessor.putPixel(int, int, int) *
            --> ij.process.ImageProcessor *
            --> ij.process.ImageProcessor.getPixel(int, int) *
            --> ij.process.ImageProcessor.putPixel(int, int, int) *
            --> java.awt.geom.Point2D$Double *
            --> java.awt.geom.Point2D$Double.Point2D$Double() *
            --> java.awt.geom.Point2D$Double.Point2D$Double(double, double) *
            --> java.awt.geom.Point2D$Double.x *
            --> java.awt.geom.Point2D$Double.y *
            --> java.lang.Object *
            --> java.lang.String *
            --> java.util.Vector *
            --> java.util.Vector.Vector() *
            --> java.util.Vector.add(java.lang.Object) *
            --> java.util.Vector.elementAt(int) *
            --> java.util.Vector.size() *
        height
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcLongestPathProfiles(ij.ImagePlus, ij.ImagePlus, ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcProfile(de.unihalle.informatik.MiToBo.datatypes.Region2D, de.unihalle.informatik.MiToBo.morphology.SkeletonTree, ij.process.ImageProcessor, ij.process.ImageProcessor)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.getNeuritePathTrees(ij.process.ImageProcessor, ij.process.ImageProcessor, ij.process.ImageProcessor, java.util.Vector)
        static {}
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.SpineLength
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.color_blue
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.color_gray
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.color_green
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.color_red
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.color_white
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.color_yellow
        width
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcLongestPathProfiles(ij.ImagePlus, ij.ImagePlus, ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcProfile(de.unihalle.informatik.MiToBo.datatypes.Region2D, de.unihalle.informatik.MiToBo.morphology.SkeletonTree, ij.process.ImageProcessor, ij.process.ImageProcessor)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.getNeuritePathTrees(ij.process.ImageProcessor, ij.process.ImageProcessor, ij.process.ImageProcessor, java.util.Vector)
de.unihalle.informatik.MiToBo.datatypes
    Contour2D
        --> java.lang.Object *
        <-- mtb_contours.Contour_on_Labeled_Components.add_InnerContours(java.util.Vector, java.util.Vector)
        <-- mtb_contours.Contour_on_Labeled_Components.get_ContourImage(java.util.Vector)
        <-- mtb_contours.Contour_on_Labeled_Components.get_OuterContours(ij.process.ImageProcessor, java.util.Vector)
        <-- mtb_contours.Contour_on_Labeled_Components.traceContour(int, int)
        <-- mtb_neurites.Neurit_Detector_2D.getControlPoints(de.unihalle.informatik.MiToBo.datatypes.Contour2D)
        <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
        <-- mtb_neurites.Neurit_Detector_2D.process()
        Contour2D()
            --> de.unihalle.informatik.MiToBo.datatypes.Contour2D.inner
            --> de.unihalle.informatik.MiToBo.datatypes.Contour2D.length
            --> de.unihalle.informatik.MiToBo.datatypes.Contour2D.points
            --> java.lang.Object.Object() *
            --> java.util.Vector *
            --> java.util.Vector.Vector() *
            <-- mtb_contours.Contour_on_Labeled_Components.get_OuterContours(ij.process.ImageProcessor, java.util.Vector)
            <-- mtb_contours.Contour_on_Labeled_Components.traceContour(int, int)
        Contour2D(java.util.Vector)
            --> de.unihalle.informatik.MiToBo.datatypes.Contour2D.inner
            --> de.unihalle.informatik.MiToBo.datatypes.Contour2D.length
            --> de.unihalle.informatik.MiToBo.datatypes.Contour2D.points
            --> java.lang.Object.Object() *
            --> java.util.Vector *
            --> java.util.Vector.Vector() *
            --> java.util.Vector.size() *
        addInner(de.unihalle.informatik.MiToBo.datatypes.Contour2D)
            --> de.unihalle.informatik.MiToBo.datatypes.Contour2D.inner
            --> java.lang.Object *
            --> java.util.Vector *
            --> java.util.Vector.addElement(java.lang.Object) *
        addPixel(int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.Contour2D.length
            --> de.unihalle.informatik.MiToBo.datatypes.Contour2D.points
            --> java.awt.geom.Point2D$Double.Point2D$Double(double, double) *
            --> java.lang.Object *
            --> java.util.Vector *
            --> java.util.Vector.addElement(java.lang.Object) *
            <-- mtb_contours.Contour_on_Labeled_Components.traceContour(int, int)
        countInner()
            --> de.unihalle.informatik.MiToBo.datatypes.Contour2D.inner
            --> java.util.Vector *
            --> java.util.Vector.size() *
            <-- mtb_contours.Contour_on_Labeled_Components.get_ContourImage(java.util.Vector)
        getAllInner()
            --> de.unihalle.informatik.MiToBo.datatypes.Contour2D.inner
            --> java.util.Vector *
        getInner(int)
            --> de.unihalle.informatik.MiToBo.datatypes.Contour2D.inner
            --> java.lang.Object *
            --> java.util.Vector *
            --> java.util.Vector.elementAt(int) *
            <-- mtb_contours.Contour_on_Labeled_Components.get_ContourImage(java.util.Vector)
        getLength()
            --> de.unihalle.informatik.MiToBo.datatypes.Contour2D.length
            <-- mtb_contours.Contour_on_Labeled_Components.add_InnerContours(java.util.Vector, java.util.Vector)
            <-- mtb_neurites.Neurit_Detector_2D.getControlPoints(de.unihalle.informatik.MiToBo.datatypes.Contour2D)
        getPointAt(int)
            --> de.unihalle.informatik.MiToBo.datatypes.Contour2D.points
            --> java.awt.geom.Point2D$Double *
            --> java.lang.Object *
            --> java.util.Vector *
            --> java.util.Vector.elementAt(int) *
            <-- mtb_neurites.Neurit_Detector_2D.getControlPoints(de.unihalle.informatik.MiToBo.datatypes.Contour2D)
        getPoints()
            --> de.unihalle.informatik.MiToBo.datatypes.Contour2D.points
            --> java.util.Vector *
            <-- mtb_contours.Contour_on_Labeled_Components.add_InnerContours(java.util.Vector, java.util.Vector)
            <-- mtb_contours.Contour_on_Labeled_Components.get_ContourImage(java.util.Vector)
        inner
            <-- de.unihalle.informatik.MiToBo.datatypes.Contour2D.Contour2D()
            <-- de.unihalle.informatik.MiToBo.datatypes.Contour2D.Contour2D(java.util.Vector)
            <-- de.unihalle.informatik.MiToBo.datatypes.Contour2D.addInner(de.unihalle.informatik.MiToBo.datatypes.Contour2D)
            <-- de.unihalle.informatik.MiToBo.datatypes.Contour2D.countInner()
            <-- de.unihalle.informatik.MiToBo.datatypes.Contour2D.getAllInner()
            <-- de.unihalle.informatik.MiToBo.datatypes.Contour2D.getInner(int)
            <-- de.unihalle.informatik.MiToBo.datatypes.Contour2D.setInner(java.util.Vector)
            --> java.util.Vector *
        length
            <-- de.unihalle.informatik.MiToBo.datatypes.Contour2D.Contour2D()
            <-- de.unihalle.informatik.MiToBo.datatypes.Contour2D.Contour2D(java.util.Vector)
            <-- de.unihalle.informatik.MiToBo.datatypes.Contour2D.addPixel(int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.Contour2D.getLength()
        points
            <-- de.unihalle.informatik.MiToBo.datatypes.Contour2D.Contour2D()
            <-- de.unihalle.informatik.MiToBo.datatypes.Contour2D.Contour2D(java.util.Vector)
            <-- de.unihalle.informatik.MiToBo.datatypes.Contour2D.addPixel(int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.Contour2D.getPointAt(int)
            <-- de.unihalle.informatik.MiToBo.datatypes.Contour2D.getPoints()
            --> java.util.Vector *
        setInner(java.util.Vector)
            --> de.unihalle.informatik.MiToBo.datatypes.Contour2D.inner
            --> java.util.Vector *
            <-- mtb_contours.Contour_on_Labeled_Components.add_InnerContours(java.util.Vector, java.util.Vector)
    Histogram
        <-- de.unihalle.informatik.MiToBo.enhance.HistogramEqualization.equalizeHisto(de.unihalle.informatik.MiToBo.datatypes.Histogram)
        <-- de.unihalle.informatik.MiToBo.enhance.HistogramEqualization.equalizeImageHisto(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.enhance.HistogramEqualization.equalizeImageHisto(ij.process.ImageProcessor)
        <-- de.unihalle.informatik.MiToBo.enhance.HistogramEqualization.getTransferFunktion(de.unihalle.informatik.MiToBo.datatypes.Histogram)
        <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.initMaskThreshold()
        <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.initThreshold()
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshMoments.calcThreshold(de.unihalle.informatik.MiToBo.datatypes.Histogram)
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu.calcThreshold(de.unihalle.informatik.MiToBo.datatypes.Histogram)
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu.calcThreshold(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu.calcThreshold(ij.process.ImageProcessor)
        --> java.lang.Object *
        Histogram(de.unihalle.informatik.MiToBo.datatypes.Image3D)
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.initialize(int[])
            --> de.unihalle.informatik.MiToBo.datatypes.Image3D
            --> de.unihalle.informatik.MiToBo.datatypes.Image3D.getHistogram()
            --> java.lang.Object.Object() *
        Histogram(de.unihalle.informatik.MiToBo.datatypes.Image3D, int)
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.binning(int)
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.initialize(int[])
            --> de.unihalle.informatik.MiToBo.datatypes.Image3D
            --> de.unihalle.informatik.MiToBo.datatypes.Image3D.getHistogram()
            --> java.lang.Object.Object() *
        Histogram(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.initialize(double[])
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeC()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeT()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeX()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeY()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeZ()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getType()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getValueDouble(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.enhance.HistogramEqualization.equalizeImageHisto(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.initMaskThreshold()
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.initThreshold()
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu.calcThreshold(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> java.io.PrintStream *
            --> java.io.PrintStream.println(java.lang.String) *
            --> java.lang.Object.Object() *
            --> java.lang.String *
            --> java.lang.StringBuilder *
            --> java.lang.StringBuilder.StringBuilder(java.lang.String) *
            --> java.lang.StringBuilder.append(int) *
            --> java.lang.StringBuilder.append(java.lang.String) *
            --> java.lang.StringBuilder.toString() *
            --> java.lang.System.err *
        Histogram(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.binning(int)
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.initialize(double[])
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeC()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeT()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeX()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeY()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeZ()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getType()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getValueDouble(int, int, int, int, int)
            --> java.io.PrintStream *
            --> java.io.PrintStream.println(java.lang.String) *
            --> java.lang.Object.Object() *
            --> java.lang.String *
            --> java.lang.StringBuilder *
            --> java.lang.StringBuilder.StringBuilder(java.lang.String) *
            --> java.lang.StringBuilder.append(int) *
            --> java.lang.StringBuilder.append(java.lang.String) *
            --> java.lang.StringBuilder.toString() *
            --> java.lang.System.err *
        Histogram(double[])
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.createHistogramFromPixelArray(int[], int)
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.initialize(double[])
            --> java.lang.Object.Object() *
        Histogram(double[], int)
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.binning(int)
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.initialize(double[])
            --> java.lang.Object.Object() *
        Histogram(ij.ImageStack)
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.initialize(double[])
            --> ij.ImageStack *
            --> ij.ImageStack.getProcessor(int) *
            --> ij.ImageStack.getSize() *
            --> ij.process.ImageProcessor *
            --> ij.process.ImageProcessor.getHistogram() *
            --> java.lang.Object.Object() *
        Histogram(ij.ImageStack, int)
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.binning(int)
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.initialize(double[])
            --> ij.ImageStack *
            --> ij.ImageStack.getProcessor(int) *
            --> ij.ImageStack.getSize() *
            --> ij.process.ImageProcessor *
            --> ij.process.ImageProcessor.getHistogram() *
            --> java.lang.Object.Object() *
        Histogram(ij.process.ImageProcessor)
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.initialize(int[])
            <-- de.unihalle.informatik.MiToBo.enhance.HistogramEqualization.equalizeImageHisto(ij.process.ImageProcessor)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu.calcThreshold(ij.process.ImageProcessor)
            --> ij.process.ImageProcessor *
            --> ij.process.ImageProcessor.getHistogram() *
            --> java.lang.Object.Object() *
        Histogram(ij.process.ImageProcessor, int)
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.binning(int)
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.initialize(int[])
            --> ij.process.ImageProcessor *
            --> ij.process.ImageProcessor.getHistogram() *
            --> java.lang.Object.Object() *
        Histogram(int[])
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.initialize(int[])
            <-- de.unihalle.informatik.MiToBo.enhance.HistogramEqualization.equalizeHisto(de.unihalle.informatik.MiToBo.datatypes.Histogram)
            --> java.lang.Object.Object() *
        Histogram(int[], int)
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.binning(int)
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.initialize(int[])
            --> java.lang.Object.Object() *
        Histogram(java.lang.String)
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.initialize(double[])
            --> java.io.BufferedReader.BufferedReader(java.io.Reader) *
            --> java.io.BufferedReader.close() *
            --> java.io.BufferedReader.readLine() *
            --> java.io.File *
            --> java.io.File.File(java.lang.String) *
            --> java.io.FileReader.FileReader(java.io.File) *
            --> java.io.IOException *
            --> java.io.PrintStream *
            --> java.io.PrintStream.println(java.lang.Object) *
            --> java.io.Reader *
            --> java.lang.Double *
            --> java.lang.Double.doubleValue() *
            --> java.lang.Double.parseDouble(java.lang.String) *
            --> java.lang.Double.valueOf(double) *
            --> java.lang.Object *
            --> java.lang.Object.Object() *
            --> java.lang.String *
            --> java.lang.System.err *
            --> java.util.StringTokenizer.StringTokenizer(java.lang.String, java.lang.String) *
            --> java.util.StringTokenizer.hasMoreTokens() *
            --> java.util.StringTokenizer.nextToken() *
            --> java.util.Vector.Vector() *
            --> java.util.Vector.addElement(java.lang.Object) *
            --> java.util.Vector.get(int) *
            --> java.util.Vector.size() *
        binning(int)
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(de.unihalle.informatik.MiToBo.datatypes.Image3D, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(double[], int)
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(ij.ImageStack, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(ij.process.ImageProcessor, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(int[], int)
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.data
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.initialize(double[])
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.size
            --> java.io.PrintStream *
            --> java.io.PrintStream.println(double) *
            --> java.lang.System.out *
        createHistogramFromPixelArray(int[], int)
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(double[])
        cumulate()
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.data
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.initialize(double[])
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.size
        data
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.binning(int)
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.cumulate()
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.getBinValue(int)
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.getData()
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.getMaxValue()
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.getMaxValueBin()
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.getMean()
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.getVariance()
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.initialize(double[])
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.initialize(int[])
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.logarithmize()
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.normalize()
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.save(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.setBinValue(int, double)
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.truncate(int, int)
        getBinValue(int)
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.data
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.size
        getData()
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.data
            <-- de.unihalle.informatik.MiToBo.enhance.HistogramEqualization.equalizeHisto(de.unihalle.informatik.MiToBo.datatypes.Histogram)
            <-- de.unihalle.informatik.MiToBo.enhance.HistogramEqualization.getTransferFunktion(de.unihalle.informatik.MiToBo.datatypes.Histogram)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshMoments.calcThreshold(de.unihalle.informatik.MiToBo.datatypes.Histogram)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu.calcThreshold(de.unihalle.informatik.MiToBo.datatypes.Histogram)
        getGlobalContrast()
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.largestNonEmptyBin
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.smallestNonEmptyBin
        getLargestNonEmptyBin()
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.largestNonEmptyBin
            <-- de.unihalle.informatik.MiToBo.enhance.HistogramEqualization.getTransferFunktion(de.unihalle.informatik.MiToBo.datatypes.Histogram)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu.calcThreshold(de.unihalle.informatik.MiToBo.datatypes.Histogram)
        getMaxValue()
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.data
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.size
        getMaxValueBin()
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.data
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.size
            <-- de.unihalle.informatik.MiToBo.enhance.HistogramEqualization.equalizeImageHisto(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.enhance.HistogramEqualization.equalizeImageHisto(ij.process.ImageProcessor)
        getMean()
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.data
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.getVariance()
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.size
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.sum
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu.calcThreshold(de.unihalle.informatik.MiToBo.datatypes.Histogram)
        getSize()
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.size
            <-- de.unihalle.informatik.MiToBo.enhance.HistogramEqualization.equalizeHisto(de.unihalle.informatik.MiToBo.datatypes.Histogram)
            <-- de.unihalle.informatik.MiToBo.enhance.HistogramEqualization.getTransferFunktion(de.unihalle.informatik.MiToBo.datatypes.Histogram)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshMoments.calcThreshold(de.unihalle.informatik.MiToBo.datatypes.Histogram)
        getSmallestNonEmptyBin()
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.smallestNonEmptyBin
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu.calcThreshold(de.unihalle.informatik.MiToBo.datatypes.Histogram)
        getSum()
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.sum
        getVariance()
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.data
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.getMean()
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.size
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.sum
        initialize(double[])
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(double[])
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(double[], int)
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(ij.ImageStack)
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(ij.ImageStack, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.binning(int)
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.cumulate()
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.data
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.largestNonEmptyBin
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.logarithmize()
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.setBinValue(int, double)
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.size
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.smallestNonEmptyBin
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.sum
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.truncate(int, int)
        initialize(int[])
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(de.unihalle.informatik.MiToBo.datatypes.Image3D)
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(de.unihalle.informatik.MiToBo.datatypes.Image3D, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(ij.process.ImageProcessor)
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(ij.process.ImageProcessor, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(int[])
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(int[], int)
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.data
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.largestNonEmptyBin
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.size
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.smallestNonEmptyBin
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.sum
        largestNonEmptyBin
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.getGlobalContrast()
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.getLargestNonEmptyBin()
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.initialize(double[])
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.initialize(int[])
        logarithmize()
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.data
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.initialize(double[])
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.size
            --> java.lang.Math.log(double) *
        normalize()
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.data
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.size
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.sum
            <-- de.unihalle.informatik.MiToBo.enhance.HistogramEqualization.getTransferFunktion(de.unihalle.informatik.MiToBo.datatypes.Histogram)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshMoments.calcThreshold(de.unihalle.informatik.MiToBo.datatypes.Histogram)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu.calcThreshold(de.unihalle.informatik.MiToBo.datatypes.Histogram)
        save(java.lang.String)
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.data
            --> java.io.BufferedWriter.BufferedWriter(java.io.Writer) *
            --> java.io.BufferedWriter.close() *
            --> java.io.BufferedWriter.newLine() *
            --> java.io.BufferedWriter.write(java.lang.String) *
            --> java.io.FileNotFoundException *
            --> java.io.FileWriter.FileWriter(java.lang.String) *
            --> java.io.IOException *
            --> java.io.PrintStream *
            --> java.io.PrintStream.println(java.lang.Object) *
            --> java.io.Writer *
            --> java.lang.Object *
            --> java.lang.String *
            --> java.lang.String.valueOf(double) *
            --> java.lang.StringBuilder *
            --> java.lang.StringBuilder.StringBuilder(java.lang.String) *
            --> java.lang.StringBuilder.append(java.lang.String) *
            --> java.lang.StringBuilder.toString() *
            --> java.lang.System.err *
        setBinValue(int, double)
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.data
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.initialize(double[])
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.size
        size
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.binning(int)
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.cumulate()
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.getBinValue(int)
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.getMaxValue()
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.getMaxValueBin()
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.getMean()
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.getSize()
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.getVariance()
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.initialize(double[])
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.initialize(int[])
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.logarithmize()
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.normalize()
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.setBinValue(int, double)
        smallestNonEmptyBin
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.getGlobalContrast()
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.getSmallestNonEmptyBin()
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.initialize(double[])
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.initialize(int[])
        sum
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.getMean()
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.getSum()
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.getVariance()
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.initialize(double[])
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.initialize(int[])
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.normalize()
        truncate(int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.data
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.initialize(double[])
    Image3D
        <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(de.unihalle.informatik.MiToBo.datatypes.Image3D)
        <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(de.unihalle.informatik.MiToBo.datatypes.Image3D, int)
        --> java.lang.Object *
        Image3D(de.unihalle.informatik.MiToBo.datatypes.Image3D)
            --> I[] *
            --> I[].clone() *
            --> de.unihalle.informatik.MiToBo.datatypes.Image3D.depth
            --> de.unihalle.informatik.MiToBo.datatypes.Image3D.getDepth()
            --> de.unihalle.informatik.MiToBo.datatypes.Image3D.getHeight()
            --> de.unihalle.informatik.MiToBo.datatypes.Image3D.getType()
            --> de.unihalle.informatik.MiToBo.datatypes.Image3D.getVoxels()
            --> de.unihalle.informatik.MiToBo.datatypes.Image3D.getWidth()
            --> de.unihalle.informatik.MiToBo.datatypes.Image3D.height
            --> de.unihalle.informatik.MiToBo.datatypes.Image3D.type
            --> de.unihalle.informatik.MiToBo.datatypes.Image3D.voxels
            --> de.unihalle.informatik.MiToBo.datatypes.Image3D.width
            --> java.lang.Object *
            --> java.lang.Object.Object() *
        Image3D(int, int, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.Image3D.depth
            --> de.unihalle.informatik.MiToBo.datatypes.Image3D.height
            --> de.unihalle.informatik.MiToBo.datatypes.Image3D.type
            --> de.unihalle.informatik.MiToBo.datatypes.Image3D.voxels
            --> de.unihalle.informatik.MiToBo.datatypes.Image3D.width
            --> java.lang.Object.Object() *
        Image3D(java.lang.String)
            --> B[] *
            --> S[] *
            --> de.unihalle.informatik.MiToBo.datatypes.Image3D.depth
            --> de.unihalle.informatik.MiToBo.datatypes.Image3D.height
            --> de.unihalle.informatik.MiToBo.datatypes.Image3D.type
            --> de.unihalle.informatik.MiToBo.datatypes.Image3D.voxels
            --> de.unihalle.informatik.MiToBo.datatypes.Image3D.width
            --> ij.IJ.error(java.lang.String) *
            --> ij.ImagePlus.ImagePlus(java.lang.String) *
            --> ij.ImagePlus.getImageStack() *
            --> ij.ImagePlus.getType() *
            --> ij.ImageStack *
            --> ij.ImageStack.getHeight() *
            --> ij.ImageStack.getProcessor(int) *
            --> ij.ImageStack.getSize() *
            --> ij.ImageStack.getWidth() *
            --> ij.process.ImageProcessor *
            --> ij.process.ImageProcessor.getPixels() *
            --> java.io.PrintStream *
            --> java.io.PrintStream.println(java.lang.String) *
            --> java.lang.Object *
            --> java.lang.Object.Object() *
            --> java.lang.String *
            --> java.lang.System.err *
        Image3DToStack()
            --> de.unihalle.informatik.MiToBo.datatypes.Image3D.depth
            --> de.unihalle.informatik.MiToBo.datatypes.Image3D.height
            --> de.unihalle.informatik.MiToBo.datatypes.Image3D.type
            --> de.unihalle.informatik.MiToBo.datatypes.Image3D.voxels
            --> de.unihalle.informatik.MiToBo.datatypes.Image3D.width
            --> ij.IJ.error(java.lang.String) *
            --> ij.ImagePlus *
            --> ij.ImagePlus.ImagePlus() *
            --> ij.ImagePlus.setStack(java.lang.String, ij.ImageStack) *
            --> ij.ImageStack *
            --> ij.ImageStack.ImageStack(int, int) *
            --> ij.ImageStack.addSlice(java.lang.String, ij.process.ImageProcessor) *
            --> ij.process.ByteProcessor.ByteProcessor(int, int) *
            --> ij.process.ByteProcessor.setPixels(java.lang.Object) *
            --> ij.process.ImageProcessor *
            --> ij.process.ShortProcessor.ShortProcessor(int, int) *
            --> ij.process.ShortProcessor.setPixels(java.lang.Object) *
            --> java.io.PrintStream *
            --> java.io.PrintStream.println(java.lang.String) *
            --> java.lang.Object *
            --> java.lang.String *
            --> java.lang.StringBuilder *
            --> java.lang.StringBuilder.StringBuilder(java.lang.String) *
            --> java.lang.StringBuilder.append(int) *
            --> java.lang.StringBuilder.toString() *
            --> java.lang.System.err *
        depth
            <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.Image3D(de.unihalle.informatik.MiToBo.datatypes.Image3D)
            <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.Image3D(int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.Image3D(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.Image3DToStack()
            <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.getDepth()
        getDepth()
            <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.Image3D(de.unihalle.informatik.MiToBo.datatypes.Image3D)
            --> de.unihalle.informatik.MiToBo.datatypes.Image3D.depth
        getHeight()
            <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.Image3D(de.unihalle.informatik.MiToBo.datatypes.Image3D)
            --> de.unihalle.informatik.MiToBo.datatypes.Image3D.height
        getHistogram()
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(de.unihalle.informatik.MiToBo.datatypes.Image3D)
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(de.unihalle.informatik.MiToBo.datatypes.Image3D, int)
            --> de.unihalle.informatik.MiToBo.datatypes.Image3D.type
            --> de.unihalle.informatik.MiToBo.datatypes.Image3D.voxels
        getType()
            <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.Image3D(de.unihalle.informatik.MiToBo.datatypes.Image3D)
            --> de.unihalle.informatik.MiToBo.datatypes.Image3D.type
        getVoxel(int, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.Image3D.height
            --> de.unihalle.informatik.MiToBo.datatypes.Image3D.voxels
            --> de.unihalle.informatik.MiToBo.datatypes.Image3D.width
        getVoxels()
            <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.Image3D(de.unihalle.informatik.MiToBo.datatypes.Image3D)
            --> de.unihalle.informatik.MiToBo.datatypes.Image3D.voxels
        getWidth()
            <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.Image3D(de.unihalle.informatik.MiToBo.datatypes.Image3D)
            --> de.unihalle.informatik.MiToBo.datatypes.Image3D.width
        height
            <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.Image3D(de.unihalle.informatik.MiToBo.datatypes.Image3D)
            <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.Image3D(int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.Image3D(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.Image3DToStack()
            <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.getHeight()
            <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.getVoxel(int, int, int)
        invert()
            --> de.unihalle.informatik.MiToBo.datatypes.Image3D.type
            --> de.unihalle.informatik.MiToBo.datatypes.Image3D.voxels
        setVoxels(int[])
            --> de.unihalle.informatik.MiToBo.datatypes.Image3D.voxels
            --> ij.IJ.error(java.lang.String) *
            --> java.io.PrintStream *
            --> java.io.PrintStream.println(java.lang.String) *
            --> java.lang.String *
            --> java.lang.System.out *
        subtract(int[])
            --> de.unihalle.informatik.MiToBo.datatypes.Image3D.voxels
        type
            <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.Image3D(de.unihalle.informatik.MiToBo.datatypes.Image3D)
            <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.Image3D(int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.Image3D(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.Image3DToStack()
            <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.getHistogram()
            <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.getType()
            <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.invert()
        voxels
            <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.Image3D(de.unihalle.informatik.MiToBo.datatypes.Image3D)
            <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.Image3D(int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.Image3D(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.Image3DToStack()
            <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.getHistogram()
            <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.getVoxel(int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.getVoxels()
            <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.invert()
            <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.setVoxels(int[])
            <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.subtract(int[])
        width
            <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.Image3D(de.unihalle.informatik.MiToBo.datatypes.Image3D)
            <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.Image3D(int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.Image3D(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.Image3DToStack()
            <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.getVoxel(int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.getWidth()
    LevelSet
        <-- de.unihalle.informatik.MiToBo.datatypes.LevelSetByte
        <-- de.unihalle.informatik.MiToBo.segmentation.levelset.LevelSetSolver.LS
        <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.NoEdgesSolver3D(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double, double, int)
        <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.NoEdgesSolver3D(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double, double, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.deltaSurface(int, int, int)
        <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.getLevelSetAsBinary()
        <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.initMaskThreshold()
        <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.initThreshold()
        <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.step()
        --> java.lang.Object *
        LevelSet()
            <-- de.unihalle.informatik.MiToBo.datatypes.LevelSetByte.LevelSetByte(int, int, int, int, int)
            --> java.lang.Object.Object() *
        getValue(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.deltaSurface(int, int, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.initMaskThreshold()
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.initThreshold()
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.step()
        setValue(int, int, int, int, int, double)
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.initMaskThreshold()
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.initThreshold()
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.step()
        toBinaryImage()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.getLevelSetAsBinary()
    LevelSetByte
        --> de.unihalle.informatik.MiToBo.datatypes.LevelSet
        LevelSetByte(int, int, int, int, int)
            --> B[][][][][] *
            --> de.unihalle.informatik.MiToBo.datatypes.LevelSet.LevelSet()
            --> de.unihalle.informatik.MiToBo.datatypes.LevelSetByte.phi
            --> de.unihalle.informatik.MiToBo.datatypes.LevelSetByte.sizeC
            --> de.unihalle.informatik.MiToBo.datatypes.LevelSetByte.sizeT
            --> de.unihalle.informatik.MiToBo.datatypes.LevelSetByte.sizeX
            --> de.unihalle.informatik.MiToBo.datatypes.LevelSetByte.sizeY
            --> de.unihalle.informatik.MiToBo.datatypes.LevelSetByte.sizeZ
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.NoEdgesSolver3D(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double, double, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.NoEdgesSolver3D(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double, double, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        getValue(int, int, int, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.LevelSetByte.phi
        phi
            <-- de.unihalle.informatik.MiToBo.datatypes.LevelSetByte.LevelSetByte(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.LevelSetByte.getValue(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.LevelSetByte.setPhi(byte[][][][][])
            <-- de.unihalle.informatik.MiToBo.datatypes.LevelSetByte.setValue(int, int, int, int, int, double)
            <-- de.unihalle.informatik.MiToBo.datatypes.LevelSetByte.toBinaryImage()
        setPhi(byte[][][][][])
            --> de.unihalle.informatik.MiToBo.datatypes.LevelSetByte.phi
        setValue(int, int, int, int, int, double)
            --> de.unihalle.informatik.MiToBo.datatypes.LevelSetByte.phi
        sizeC
            <-- de.unihalle.informatik.MiToBo.datatypes.LevelSetByte.LevelSetByte(int, int, int, int, int)
        sizeT
            <-- de.unihalle.informatik.MiToBo.datatypes.LevelSetByte.LevelSetByte(int, int, int, int, int)
        sizeX
            <-- de.unihalle.informatik.MiToBo.datatypes.LevelSetByte.LevelSetByte(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.LevelSetByte.toBinaryImage()
        sizeY
            <-- de.unihalle.informatik.MiToBo.datatypes.LevelSetByte.LevelSetByte(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.LevelSetByte.toBinaryImage()
        sizeZ
            <-- de.unihalle.informatik.MiToBo.datatypes.LevelSetByte.LevelSetByte(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.LevelSetByte.toBinaryImage()
        toBinaryImage()
            --> de.unihalle.informatik.MiToBo.datatypes.LevelSetByte.phi
            --> de.unihalle.informatik.MiToBo.datatypes.LevelSetByte.sizeX
            --> de.unihalle.informatik.MiToBo.datatypes.LevelSetByte.sizeY
            --> de.unihalle.informatik.MiToBo.datatypes.LevelSetByte.sizeZ
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.createMTBImage(int, int, int, int, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.putValueDouble(int, int, int, int, int, double)
    Point3D
        <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.Region3D()
        <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.Region3D(java.util.Vector)
        <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.addPoint(de.unihalle.informatik.MiToBo.datatypes.Point3D)
        <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.addPoint(double, double, double)
        <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.calcCentre(java.util.Vector)
        <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.centroid
        <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.getCentre()
        <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.getCentreX()
        <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.getCentreY()
        <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.getCentreZ()
        <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.getSizeX()
        <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.getSizeY()
        <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.getSizeZ()
        <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.regionToFile(de.unihalle.informatik.MiToBo.datatypes.Region3D, java.lang.String)
        <-- de.unihalle.informatik.MiToBo.morphology.HDomeTransform3D.hybridGrayscaleReconstruct(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        --> java.lang.Object *
        <-- mtb_regions.Label_Components_Sequential_3D.run(ij.process.ImageProcessor)
        Point3D()
            --> de.unihalle.informatik.MiToBo.datatypes.Point3D.x
            --> de.unihalle.informatik.MiToBo.datatypes.Point3D.y
            --> de.unihalle.informatik.MiToBo.datatypes.Point3D.z
            <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.Region3D()
            <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.calcCentre(java.util.Vector)
            --> java.lang.Object.Object() *
        Point3D(de.unihalle.informatik.MiToBo.datatypes.Point3D)
            --> de.unihalle.informatik.MiToBo.datatypes.Point3D.x
            --> de.unihalle.informatik.MiToBo.datatypes.Point3D.y
            --> de.unihalle.informatik.MiToBo.datatypes.Point3D.z
            <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.getCentre()
            --> java.lang.Object.Object() *
        Point3D(double, double, double)
            --> de.unihalle.informatik.MiToBo.datatypes.Point3D.x
            --> de.unihalle.informatik.MiToBo.datatypes.Point3D.y
            --> de.unihalle.informatik.MiToBo.datatypes.Point3D.z
            <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.addPoint(double, double, double)
            <-- de.unihalle.informatik.MiToBo.morphology.HDomeTransform3D.hybridGrayscaleReconstruct(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> java.lang.Object.Object() *
        distance(de.unihalle.informatik.MiToBo.datatypes.Point3D)
            --> de.unihalle.informatik.MiToBo.datatypes.Point3D.x
            --> de.unihalle.informatik.MiToBo.datatypes.Point3D.y
            --> de.unihalle.informatik.MiToBo.datatypes.Point3D.z
            --> java.lang.Math.sqrt(double) *
        distance(double, double, double)
            --> de.unihalle.informatik.MiToBo.datatypes.Point3D.x
            --> de.unihalle.informatik.MiToBo.datatypes.Point3D.y
            --> de.unihalle.informatik.MiToBo.datatypes.Point3D.z
            --> java.lang.Math.sqrt(double) *
        getX()
            --> de.unihalle.informatik.MiToBo.datatypes.Point3D.x
            <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.addPoint(de.unihalle.informatik.MiToBo.datatypes.Point3D)
            <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.calcCentre(java.util.Vector)
            <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.getCentre()
            <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.getCentreX()
            <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.getSizeX()
            <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.regionToFile(de.unihalle.informatik.MiToBo.datatypes.Region3D, java.lang.String)
            <-- de.unihalle.informatik.MiToBo.morphology.HDomeTransform3D.hybridGrayscaleReconstruct(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- mtb_regions.Label_Components_Sequential_3D.run(ij.process.ImageProcessor)
        getY()
            --> de.unihalle.informatik.MiToBo.datatypes.Point3D.y
            <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.addPoint(de.unihalle.informatik.MiToBo.datatypes.Point3D)
            <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.calcCentre(java.util.Vector)
            <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.getCentre()
            <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.getCentreY()
            <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.getSizeY()
            <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.regionToFile(de.unihalle.informatik.MiToBo.datatypes.Region3D, java.lang.String)
            <-- de.unihalle.informatik.MiToBo.morphology.HDomeTransform3D.hybridGrayscaleReconstruct(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- mtb_regions.Label_Components_Sequential_3D.run(ij.process.ImageProcessor)
        getZ()
            --> de.unihalle.informatik.MiToBo.datatypes.Point3D.z
            <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.addPoint(de.unihalle.informatik.MiToBo.datatypes.Point3D)
            <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.calcCentre(java.util.Vector)
            <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.getCentre()
            <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.getCentreZ()
            <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.getSizeZ()
            <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.regionToFile(de.unihalle.informatik.MiToBo.datatypes.Region3D, java.lang.String)
            <-- de.unihalle.informatik.MiToBo.morphology.HDomeTransform3D.hybridGrayscaleReconstruct(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- mtb_regions.Label_Components_Sequential_3D.run(ij.process.ImageProcessor)
        setLocation(double, double, double)
            --> de.unihalle.informatik.MiToBo.datatypes.Point3D.x
            --> de.unihalle.informatik.MiToBo.datatypes.Point3D.y
            --> de.unihalle.informatik.MiToBo.datatypes.Point3D.z
        setX(double)
            --> de.unihalle.informatik.MiToBo.datatypes.Point3D.x
            <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.getCentre()
        setY(double)
            --> de.unihalle.informatik.MiToBo.datatypes.Point3D.y
            <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.getCentre()
        setZ(double)
            --> de.unihalle.informatik.MiToBo.datatypes.Point3D.z
            <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.getCentre()
        translate(double, double, double)
            --> de.unihalle.informatik.MiToBo.datatypes.Point3D.x
            --> de.unihalle.informatik.MiToBo.datatypes.Point3D.y
            --> de.unihalle.informatik.MiToBo.datatypes.Point3D.z
            <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.addPoint(de.unihalle.informatik.MiToBo.datatypes.Point3D)
            <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.addPoint(double, double, double)
            <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.calcCentre(java.util.Vector)
        x
            <-- de.unihalle.informatik.MiToBo.datatypes.Point3D.Point3D()
            <-- de.unihalle.informatik.MiToBo.datatypes.Point3D.Point3D(de.unihalle.informatik.MiToBo.datatypes.Point3D)
            <-- de.unihalle.informatik.MiToBo.datatypes.Point3D.Point3D(double, double, double)
            <-- de.unihalle.informatik.MiToBo.datatypes.Point3D.distance(de.unihalle.informatik.MiToBo.datatypes.Point3D)
            <-- de.unihalle.informatik.MiToBo.datatypes.Point3D.distance(double, double, double)
            <-- de.unihalle.informatik.MiToBo.datatypes.Point3D.getX()
            <-- de.unihalle.informatik.MiToBo.datatypes.Point3D.setLocation(double, double, double)
            <-- de.unihalle.informatik.MiToBo.datatypes.Point3D.setX(double)
            <-- de.unihalle.informatik.MiToBo.datatypes.Point3D.translate(double, double, double)
        y
            <-- de.unihalle.informatik.MiToBo.datatypes.Point3D.Point3D()
            <-- de.unihalle.informatik.MiToBo.datatypes.Point3D.Point3D(de.unihalle.informatik.MiToBo.datatypes.Point3D)
            <-- de.unihalle.informatik.MiToBo.datatypes.Point3D.Point3D(double, double, double)
            <-- de.unihalle.informatik.MiToBo.datatypes.Point3D.distance(de.unihalle.informatik.MiToBo.datatypes.Point3D)
            <-- de.unihalle.informatik.MiToBo.datatypes.Point3D.distance(double, double, double)
            <-- de.unihalle.informatik.MiToBo.datatypes.Point3D.getY()
            <-- de.unihalle.informatik.MiToBo.datatypes.Point3D.setLocation(double, double, double)
            <-- de.unihalle.informatik.MiToBo.datatypes.Point3D.setY(double)
            <-- de.unihalle.informatik.MiToBo.datatypes.Point3D.translate(double, double, double)
        z
            <-- de.unihalle.informatik.MiToBo.datatypes.Point3D.Point3D()
            <-- de.unihalle.informatik.MiToBo.datatypes.Point3D.Point3D(de.unihalle.informatik.MiToBo.datatypes.Point3D)
            <-- de.unihalle.informatik.MiToBo.datatypes.Point3D.Point3D(double, double, double)
            <-- de.unihalle.informatik.MiToBo.datatypes.Point3D.distance(de.unihalle.informatik.MiToBo.datatypes.Point3D)
            <-- de.unihalle.informatik.MiToBo.datatypes.Point3D.distance(double, double, double)
            <-- de.unihalle.informatik.MiToBo.datatypes.Point3D.getZ()
            <-- de.unihalle.informatik.MiToBo.datatypes.Point3D.setLocation(double, double, double)
            <-- de.unihalle.informatik.MiToBo.datatypes.Point3D.setZ(double)
            <-- de.unihalle.informatik.MiToBo.datatypes.Point3D.translate(double, double, double)
    Region2D
        <-- de.unihalle.informatik.MiToBo.apps.cells2D.CellSegmentAlgos.voronoiTesselation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.NeuriteProfile(de.unihalle.informatik.MiToBo.datatypes.Region2D)
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.getNeuriteRegion()
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.neuriteRegion
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.setNeuriteRegion(de.unihalle.informatik.MiToBo.datatypes.Region2D)
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcLongestPathProfiles(ij.ImagePlus, ij.ImagePlus, ij.ImagePlus)
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcProfile(de.unihalle.informatik.MiToBo.datatypes.Region2D, de.unihalle.informatik.MiToBo.morphology.SkeletonTree, ij.process.ImageProcessor, ij.process.ImageProcessor)
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.getNeuritePathTrees(ij.process.ImageProcessor, ij.process.ImageProcessor, ij.process.ImageProcessor, java.util.Vector)
        <-- de.unihalle.informatik.MiToBo.morphology.ComponentPostprocess.EraseSmallComponents(ij.process.ImageProcessor, int)
        <-- de.unihalle.informatik.MiToBo.morphology.ComponentPostprocess.LinkAdjacentComponents(ij.process.ImageProcessor, double)
        <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsRecursive.labelRecursive(int, int, int, de.unihalle.informatik.MiToBo.datatypes.Region2D)
        <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsRecursive.regionSegmentation(ij.process.ImageProcessor)
        <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential.regionSegmentation(ij.process.ImageProcessor, boolean)
        <-- de.unihalle.informatik.MiToBo.statistics.RegionSetStatistics.calcAverageSize(java.util.Vector)
        --> java.lang.Object *
        <-- mtb_contours.Contour_on_Labeled_Components.add_InnerContours(java.util.Vector, java.util.Vector)
        <-- mtb_contours.Contour_on_Labeled_Components.get_OuterContours(ij.process.ImageProcessor, java.util.Vector)
        <-- mtb_neurites.Neurit_Detector_2D.drawSnakeRegion(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.Region2D)
        <-- mtb_neurites.Neurit_Detector_2D.getSnakeRegion(java.awt.Polygon)
        <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
        <-- mtb_neurites.Neurit_Detector_2D.process()
        <-- mtb_neurites.Neurit_Detector_2D.removeCellBody(de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        <-- mtb_neurites.Neurit_Detector_2D.testRegions(de.unihalle.informatik.MiToBo.datatypes.Region2D, de.unihalle.informatik.MiToBo.datatypes.Region2D)
        <-- mtb_neurites.Neurit_Detector_2D.testRegions2(de.unihalle.informatik.MiToBo.datatypes.Region2D, de.unihalle.informatik.MiToBo.datatypes.Region2D)
        <-- mtb_regions.Label_Components_Recursive.run(ij.process.ImageProcessor)
        <-- mtb_regions.Label_Components_Sequential.run(ij.process.ImageProcessor)
        Region2D()
            --> de.unihalle.informatik.MiToBo.datatypes.Region2D.area
            --> de.unihalle.informatik.MiToBo.datatypes.Region2D.com_x
            --> de.unihalle.informatik.MiToBo.datatypes.Region2D.com_y
            --> de.unihalle.informatik.MiToBo.datatypes.Region2D.points
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsRecursive.regionSegmentation(ij.process.ImageProcessor)
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential.regionSegmentation(ij.process.ImageProcessor, boolean)
            --> java.lang.Object.Object() *
            --> java.util.Vector *
            --> java.util.Vector.Vector() *
        addPixel(int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.Region2D.area
            --> de.unihalle.informatik.MiToBo.datatypes.Region2D.com_x
            --> de.unihalle.informatik.MiToBo.datatypes.Region2D.com_y
            --> de.unihalle.informatik.MiToBo.datatypes.Region2D.points
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsRecursive.labelRecursive(int, int, int, de.unihalle.informatik.MiToBo.datatypes.Region2D)
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsRecursive.regionSegmentation(ij.process.ImageProcessor)
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential.regionSegmentation(ij.process.ImageProcessor, boolean)
            --> java.awt.geom.Point2D$Double.Point2D$Double(double, double) *
            --> java.lang.Object *
            --> java.util.Vector *
            --> java.util.Vector.addElement(java.lang.Object) *
        area
            <-- de.unihalle.informatik.MiToBo.datatypes.Region2D.Region2D()
            <-- de.unihalle.informatik.MiToBo.datatypes.Region2D.addPixel(int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.Region2D.getArea()
            <-- de.unihalle.informatik.MiToBo.datatypes.Region2D.getCenterOfMass_X()
            <-- de.unihalle.informatik.MiToBo.datatypes.Region2D.getCenterOfMass_Y()
        com_x
            <-- de.unihalle.informatik.MiToBo.datatypes.Region2D.Region2D()
            <-- de.unihalle.informatik.MiToBo.datatypes.Region2D.addPixel(int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.Region2D.getCenterOfMass_X()
        com_y
            <-- de.unihalle.informatik.MiToBo.datatypes.Region2D.Region2D()
            <-- de.unihalle.informatik.MiToBo.datatypes.Region2D.addPixel(int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.Region2D.getCenterOfMass_Y()
        getArea()
            <-- de.unihalle.informatik.MiToBo.apps.cells2D.CellSegmentAlgos.voronoiTesselation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcLongestPathProfiles(ij.ImagePlus, ij.ImagePlus, ij.ImagePlus)
            --> de.unihalle.informatik.MiToBo.datatypes.Region2D.area
            <-- de.unihalle.informatik.MiToBo.morphology.ComponentPostprocess.EraseSmallComponents(ij.process.ImageProcessor, int)
            <-- de.unihalle.informatik.MiToBo.statistics.RegionSetStatistics.calcAverageSize(java.util.Vector)
            <-- mtb_contours.Contour_on_Labeled_Components.add_InnerContours(java.util.Vector, java.util.Vector)
            <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
            <-- mtb_neurites.Neurit_Detector_2D.removeCellBody(de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            <-- mtb_neurites.Neurit_Detector_2D.testRegions(de.unihalle.informatik.MiToBo.datatypes.Region2D, de.unihalle.informatik.MiToBo.datatypes.Region2D)
            <-- mtb_neurites.Neurit_Detector_2D.testRegions2(de.unihalle.informatik.MiToBo.datatypes.Region2D, de.unihalle.informatik.MiToBo.datatypes.Region2D)
        getCenterOfMass_X()
            --> de.unihalle.informatik.MiToBo.datatypes.Region2D.area
            --> de.unihalle.informatik.MiToBo.datatypes.Region2D.com_x
        getCenterOfMass_Y()
            --> de.unihalle.informatik.MiToBo.datatypes.Region2D.area
            --> de.unihalle.informatik.MiToBo.datatypes.Region2D.com_y
        getID()
            --> de.unihalle.informatik.MiToBo.datatypes.Region2D.id
        getPoints()
            <-- de.unihalle.informatik.MiToBo.apps.cells2D.CellSegmentAlgos.voronoiTesselation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcLongestPathProfiles(ij.ImagePlus, ij.ImagePlus, ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcProfile(de.unihalle.informatik.MiToBo.datatypes.Region2D, de.unihalle.informatik.MiToBo.morphology.SkeletonTree, ij.process.ImageProcessor, ij.process.ImageProcessor)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.getNeuritePathTrees(ij.process.ImageProcessor, ij.process.ImageProcessor, ij.process.ImageProcessor, java.util.Vector)
            --> de.unihalle.informatik.MiToBo.datatypes.Region2D.points
            <-- de.unihalle.informatik.MiToBo.morphology.ComponentPostprocess.EraseSmallComponents(ij.process.ImageProcessor, int)
            <-- de.unihalle.informatik.MiToBo.morphology.ComponentPostprocess.LinkAdjacentComponents(ij.process.ImageProcessor, double)
            --> java.util.Vector *
            <-- mtb_contours.Contour_on_Labeled_Components.add_InnerContours(java.util.Vector, java.util.Vector)
            <-- mtb_contours.Contour_on_Labeled_Components.get_OuterContours(ij.process.ImageProcessor, java.util.Vector)
            <-- mtb_neurites.Neurit_Detector_2D.drawSnakeRegion(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.Region2D)
            <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
            <-- mtb_neurites.Neurit_Detector_2D.removeCellBody(de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            <-- mtb_neurites.Neurit_Detector_2D.testRegions(de.unihalle.informatik.MiToBo.datatypes.Region2D, de.unihalle.informatik.MiToBo.datatypes.Region2D)
            <-- mtb_neurites.Neurit_Detector_2D.testRegions2(de.unihalle.informatik.MiToBo.datatypes.Region2D, de.unihalle.informatik.MiToBo.datatypes.Region2D)
            <-- mtb_regions.Label_Components_Recursive.run(ij.process.ImageProcessor)
            <-- mtb_regions.Label_Components_Sequential.run(ij.process.ImageProcessor)
        id
            <-- de.unihalle.informatik.MiToBo.datatypes.Region2D.getID()
            <-- de.unihalle.informatik.MiToBo.datatypes.Region2D.setID(int)
        points
            <-- de.unihalle.informatik.MiToBo.datatypes.Region2D.Region2D()
            <-- de.unihalle.informatik.MiToBo.datatypes.Region2D.addPixel(int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.Region2D.getPoints()
            <-- de.unihalle.informatik.MiToBo.datatypes.Region2D.toMTBImageByte(java.lang.String, int, int)
            --> java.util.Vector *
        setID(int)
            --> de.unihalle.informatik.MiToBo.datatypes.Region2D.id
        toMTBImageByte(java.lang.String, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.Region2D.points
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.createMTBImage(ij.ImagePlus) *
            --> de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.io.File, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> de.unihalle.informatik.MiToBo.io.files.ImgSave.saveFile(boolean)
            --> ij.ImagePlus *
            --> ij.ImagePlus.getProcessor() *
            --> ij.ImagePlus.setColor(java.awt.Color) *
            --> ij.gui.NewImage.createByteImage(java.lang.String, int, int, int, int) *
            --> ij.process.ImageProcessor *
            --> ij.process.ImageProcessor.drawPixel(int, int) *
            --> java.awt.Color *
            --> java.awt.Color.WHITE *
            --> java.awt.geom.Point2D$Double *
            --> java.awt.geom.Point2D$Double.getX() *
            --> java.awt.geom.Point2D$Double.getY() *
            --> java.io.File *
            --> java.io.File.File(java.lang.String) *
            --> java.lang.Math.round(double) *
            --> java.lang.Object *
            --> java.lang.String *
            --> java.util.Vector *
            --> java.util.Vector.elementAt(int) *
            --> java.util.Vector.size() *
            <-- mtb_neurites.Neurit_Detector_2D.process()
    Region3D
        <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3D.regionSegmentation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, boolean, int, int)
        --> java.lang.Object *
        <-- mtb_regions.Label_Components_Sequential_3D.run(ij.process.ImageProcessor)
        Region3D()
            --> de.unihalle.informatik.MiToBo.datatypes.Point3D
            --> de.unihalle.informatik.MiToBo.datatypes.Point3D.Point3D()
            --> de.unihalle.informatik.MiToBo.datatypes.Region3D.centroid
            --> de.unihalle.informatik.MiToBo.datatypes.Region3D.points
            --> de.unihalle.informatik.MiToBo.datatypes.Region3D.volume
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3D.regionSegmentation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, boolean, int, int)
            --> java.lang.Object.Object() *
            --> java.util.Vector *
            --> java.util.Vector.Vector() *
        Region3D(java.util.Vector)
            --> de.unihalle.informatik.MiToBo.datatypes.Point3D
            --> de.unihalle.informatik.MiToBo.datatypes.Region3D.calcCentre(java.util.Vector)
            --> de.unihalle.informatik.MiToBo.datatypes.Region3D.centroid
            --> de.unihalle.informatik.MiToBo.datatypes.Region3D.points
            --> de.unihalle.informatik.MiToBo.datatypes.Region3D.volume
            --> java.lang.Object.Object() *
            --> java.util.Vector *
            --> java.util.Vector.size() *
        addPoint(de.unihalle.informatik.MiToBo.datatypes.Point3D)
            --> de.unihalle.informatik.MiToBo.datatypes.Point3D
            --> de.unihalle.informatik.MiToBo.datatypes.Point3D.getX()
            --> de.unihalle.informatik.MiToBo.datatypes.Point3D.getY()
            --> de.unihalle.informatik.MiToBo.datatypes.Point3D.getZ()
            --> de.unihalle.informatik.MiToBo.datatypes.Point3D.translate(double, double, double)
            --> de.unihalle.informatik.MiToBo.datatypes.Region3D.centroid
            --> de.unihalle.informatik.MiToBo.datatypes.Region3D.points
            --> de.unihalle.informatik.MiToBo.datatypes.Region3D.volume
            --> java.lang.Object *
            --> java.util.Vector *
            --> java.util.Vector.addElement(java.lang.Object) *
        addPoint(double, double, double)
            --> de.unihalle.informatik.MiToBo.datatypes.Point3D
            --> de.unihalle.informatik.MiToBo.datatypes.Point3D.Point3D(double, double, double)
            --> de.unihalle.informatik.MiToBo.datatypes.Point3D.translate(double, double, double)
            --> de.unihalle.informatik.MiToBo.datatypes.Region3D.centroid
            --> de.unihalle.informatik.MiToBo.datatypes.Region3D.points
            --> de.unihalle.informatik.MiToBo.datatypes.Region3D.volume
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3D.regionSegmentation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, boolean, int, int)
            --> java.lang.Object *
            --> java.util.Vector *
            --> java.util.Vector.addElement(java.lang.Object) *
        calcCentre(java.util.Vector)
            --> de.unihalle.informatik.MiToBo.datatypes.Point3D
            --> de.unihalle.informatik.MiToBo.datatypes.Point3D.Point3D()
            --> de.unihalle.informatik.MiToBo.datatypes.Point3D.getX()
            --> de.unihalle.informatik.MiToBo.datatypes.Point3D.getY()
            --> de.unihalle.informatik.MiToBo.datatypes.Point3D.getZ()
            --> de.unihalle.informatik.MiToBo.datatypes.Point3D.translate(double, double, double)
            <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.Region3D(java.util.Vector)
            --> java.lang.Object *
            --> java.util.Vector *
            --> java.util.Vector.elementAt(int) *
            --> java.util.Vector.size() *
        centroid
            --> de.unihalle.informatik.MiToBo.datatypes.Point3D
            <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.Region3D()
            <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.Region3D(java.util.Vector)
            <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.addPoint(de.unihalle.informatik.MiToBo.datatypes.Point3D)
            <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.addPoint(double, double, double)
            <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.getCentre()
            <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.getCentreX()
            <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.getCentreY()
            <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.getCentreZ()
        getCentre()
            --> de.unihalle.informatik.MiToBo.datatypes.Point3D
            --> de.unihalle.informatik.MiToBo.datatypes.Point3D.Point3D(de.unihalle.informatik.MiToBo.datatypes.Point3D)
            --> de.unihalle.informatik.MiToBo.datatypes.Point3D.getX()
            --> de.unihalle.informatik.MiToBo.datatypes.Point3D.getY()
            --> de.unihalle.informatik.MiToBo.datatypes.Point3D.getZ()
            --> de.unihalle.informatik.MiToBo.datatypes.Point3D.setX(double)
            --> de.unihalle.informatik.MiToBo.datatypes.Point3D.setY(double)
            --> de.unihalle.informatik.MiToBo.datatypes.Point3D.setZ(double)
            --> de.unihalle.informatik.MiToBo.datatypes.Region3D.centroid
            --> de.unihalle.informatik.MiToBo.datatypes.Region3D.volume
        getCentreX()
            --> de.unihalle.informatik.MiToBo.datatypes.Point3D
            --> de.unihalle.informatik.MiToBo.datatypes.Point3D.getX()
            --> de.unihalle.informatik.MiToBo.datatypes.Region3D.centroid
            --> de.unihalle.informatik.MiToBo.datatypes.Region3D.volume
        getCentreY()
            --> de.unihalle.informatik.MiToBo.datatypes.Point3D
            --> de.unihalle.informatik.MiToBo.datatypes.Point3D.getY()
            --> de.unihalle.informatik.MiToBo.datatypes.Region3D.centroid
            --> de.unihalle.informatik.MiToBo.datatypes.Region3D.volume
        getCentreZ()
            --> de.unihalle.informatik.MiToBo.datatypes.Point3D
            --> de.unihalle.informatik.MiToBo.datatypes.Point3D.getZ()
            --> de.unihalle.informatik.MiToBo.datatypes.Region3D.centroid
            --> de.unihalle.informatik.MiToBo.datatypes.Region3D.volume
        getPoints()
            --> de.unihalle.informatik.MiToBo.datatypes.Region3D.points
            <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.regionToFile(de.unihalle.informatik.MiToBo.datatypes.Region3D, java.lang.String)
            --> java.util.Vector *
            <-- mtb_regions.Label_Components_Sequential_3D.run(ij.process.ImageProcessor)
        getSizeX()
            --> de.unihalle.informatik.MiToBo.datatypes.Point3D
            --> de.unihalle.informatik.MiToBo.datatypes.Point3D.getX()
            --> de.unihalle.informatik.MiToBo.datatypes.Region3D.points
            --> java.lang.Object *
            --> java.util.Vector *
            --> java.util.Vector.elementAt(int) *
            --> java.util.Vector.size() *
        getSizeY()
            --> de.unihalle.informatik.MiToBo.datatypes.Point3D
            --> de.unihalle.informatik.MiToBo.datatypes.Point3D.getY()
            --> de.unihalle.informatik.MiToBo.datatypes.Region3D.points
            --> java.lang.Object *
            --> java.util.Vector *
            --> java.util.Vector.elementAt(int) *
            --> java.util.Vector.size() *
        getSizeZ()
            --> de.unihalle.informatik.MiToBo.datatypes.Point3D
            --> de.unihalle.informatik.MiToBo.datatypes.Point3D.getZ()
            --> de.unihalle.informatik.MiToBo.datatypes.Region3D.points
            --> java.lang.Object *
            --> java.util.Vector *
            --> java.util.Vector.elementAt(int) *
            --> java.util.Vector.size() *
        getVolume()
            --> de.unihalle.informatik.MiToBo.datatypes.Region3D.volume
        points
            <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.Region3D()
            <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.Region3D(java.util.Vector)
            <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.addPoint(de.unihalle.informatik.MiToBo.datatypes.Point3D)
            <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.addPoint(double, double, double)
            <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.getPoints()
            <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.getSizeX()
            <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.getSizeY()
            <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.getSizeZ()
            --> java.util.Vector *
        regionToFile(de.unihalle.informatik.MiToBo.datatypes.Region3D, java.lang.String)
            --> de.unihalle.informatik.MiToBo.datatypes.Point3D
            --> de.unihalle.informatik.MiToBo.datatypes.Point3D.getX()
            --> de.unihalle.informatik.MiToBo.datatypes.Point3D.getY()
            --> de.unihalle.informatik.MiToBo.datatypes.Point3D.getZ()
            --> de.unihalle.informatik.MiToBo.datatypes.Region3D.getPoints()
            --> java.io.BufferedWriter.BufferedWriter(java.io.Writer) *
            --> java.io.BufferedWriter.close() *
            --> java.io.BufferedWriter.newLine() *
            --> java.io.BufferedWriter.write(java.lang.String) *
            --> java.io.FileNotFoundException *
            --> java.io.FileWriter.FileWriter(java.lang.String) *
            --> java.io.IOException *
            --> java.io.Writer *
            --> java.lang.Object *
            --> java.lang.String *
            --> java.lang.StringBuilder *
            --> java.lang.StringBuilder.StringBuilder(java.lang.String) *
            --> java.lang.StringBuilder.append(double) *
            --> java.lang.StringBuilder.append(java.lang.String) *
            --> java.lang.StringBuilder.toString() *
            --> java.util.Vector *
            --> java.util.Vector.elementAt(int) *
            --> java.util.Vector.size() *
        volume
            <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.Region3D()
            <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.Region3D(java.util.Vector)
            <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.addPoint(de.unihalle.informatik.MiToBo.datatypes.Point3D)
            <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.addPoint(double, double, double)
            <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.getCentre()
            <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.getCentreX()
            <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.getCentreY()
            <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.getCentreZ()
            <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.getVolume()
    Snake
        <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.SnakeAlgos.SnakeAlgos()
        <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.SnakeAlgos.SnakeAlgos(de.unihalle.informatik.MiToBo.datatypes.Snake)
        <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.SnakeAlgos.calcSnake(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double[], double[], int, double)
        <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.SnakeAlgos.snake
        --> java.lang.Object *
        <-- mtb_neurites.Neurit_Detector_2D.activeContours(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, java.util.Vector, int, double)
        <-- mtb_neurites.Neurit_Detector_2D.process()
        Snake()
            --> de.unihalle.informatik.MiToBo.datatypes.Snake.cycle
            --> de.unihalle.informatik.MiToBo.datatypes.Snake.points
            --> java.lang.Object.Object() *
            --> java.util.Vector *
        Snake(java.util.Vector, boolean)
            --> de.unihalle.informatik.MiToBo.datatypes.Snake.cycle
            --> de.unihalle.informatik.MiToBo.datatypes.Snake.points
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.SnakeAlgos.calcSnake(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double[], double[], int, double)
            --> java.lang.Object.Object() *
            --> java.util.Vector *
            <-- mtb_neurites.Neurit_Detector_2D.activeContours(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, java.util.Vector, int, double)
            <-- mtb_neurites.Neurit_Detector_2D.process()
        cycle
            <-- de.unihalle.informatik.MiToBo.datatypes.Snake.Snake()
            <-- de.unihalle.informatik.MiToBo.datatypes.Snake.Snake(java.util.Vector, boolean)
            <-- de.unihalle.informatik.MiToBo.datatypes.Snake.isCycle()
            <-- de.unihalle.informatik.MiToBo.datatypes.Snake.setCycle(boolean)
            <-- de.unihalle.informatik.MiToBo.datatypes.Snake.toMTBImage(java.lang.String, int, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.datatypes.Snake.toMTBImageByte(java.lang.String, int, int)
        getPoints()
            --> de.unihalle.informatik.MiToBo.datatypes.Snake.points
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.SnakeAlgos.SnakeAlgos(de.unihalle.informatik.MiToBo.datatypes.Snake)
            --> java.util.Vector *
            <-- mtb_neurites.Neurit_Detector_2D.process()
        getSnakePolygon()
            --> de.unihalle.informatik.MiToBo.datatypes.Snake.points
            --> java.awt.Polygon *
            --> java.awt.Polygon.Polygon() *
            --> java.awt.Polygon.addPoint(int, int) *
            --> java.awt.geom.Point2D$Double *
            --> java.awt.geom.Point2D$Double.getX() *
            --> java.awt.geom.Point2D$Double.getY() *
            --> java.lang.Math.round(double) *
            --> java.lang.Object *
            --> java.util.Vector *
            --> java.util.Vector.elementAt(int) *
            --> java.util.Vector.size() *
            <-- mtb_neurites.Neurit_Detector_2D.process()
        isCycle()
            --> de.unihalle.informatik.MiToBo.datatypes.Snake.cycle
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.SnakeAlgos.SnakeAlgos(de.unihalle.informatik.MiToBo.datatypes.Snake)
        points
            <-- de.unihalle.informatik.MiToBo.datatypes.Snake.Snake()
            <-- de.unihalle.informatik.MiToBo.datatypes.Snake.Snake(java.util.Vector, boolean)
            <-- de.unihalle.informatik.MiToBo.datatypes.Snake.getPoints()
            <-- de.unihalle.informatik.MiToBo.datatypes.Snake.getSnakePolygon()
            <-- de.unihalle.informatik.MiToBo.datatypes.Snake.setPoints(java.util.Vector)
            <-- de.unihalle.informatik.MiToBo.datatypes.Snake.toMTBImage(java.lang.String, int, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.datatypes.Snake.toMTBImageByte(java.lang.String, int, int)
            --> java.util.Vector *
        setCycle(boolean)
            --> de.unihalle.informatik.MiToBo.datatypes.Snake.cycle
        setPoints(java.util.Vector)
            --> de.unihalle.informatik.MiToBo.datatypes.Snake.points
            --> java.util.Vector *
            <-- mtb_neurites.Neurit_Detector_2D.process()
        toMTBImage(java.lang.String, int, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> de.unihalle.informatik.MiToBo.datatypes.Snake.cycle
            --> de.unihalle.informatik.MiToBo.datatypes.Snake.points
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.createMTBImage(ij.ImagePlus)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.duplicate()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getImagePlus()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getTypeMax()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.putValueDouble(int, int, double)
            --> de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.io.File, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> de.unihalle.informatik.MiToBo.io.files.ImgSave.saveFile(boolean)
            --> ij.ImagePlus *
            --> ij.ImagePlus.getProcessor() *
            --> ij.ImagePlus.setColor(java.awt.Color) *
            --> ij.gui.NewImage.createShortImage(java.lang.String, int, int, int, int) *
            --> ij.process.ImageProcessor *
            --> ij.process.ImageProcessor.copyBits(ij.process.ImageProcessor, int, int, int) *
            --> ij.process.ImageProcessor.drawLine(int, int, int, int) *
            --> java.awt.Color *
            --> java.awt.Color.WHITE *
            --> java.awt.geom.Point2D$Double *
            --> java.awt.geom.Point2D$Double.getX() *
            --> java.awt.geom.Point2D$Double.getY() *
            --> java.io.File *
            --> java.io.File.File(java.lang.String) *
            --> java.lang.Math.round(double) *
            --> java.lang.Object *
            --> java.lang.String *
            --> java.util.Vector *
            --> java.util.Vector.elementAt(int) *
            --> java.util.Vector.size() *
            <-- mtb_neurites.Neurit_Detector_2D.process()
        toMTBImageByte(java.lang.String, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.Snake.cycle
            --> de.unihalle.informatik.MiToBo.datatypes.Snake.points
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.createMTBImage(ij.ImagePlus) *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.createMTBImage(int, int, int, int, int, int) *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.getTypeMax() *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.putValueDouble(int, int, double)
            --> de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.io.File, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> de.unihalle.informatik.MiToBo.io.files.ImgSave.saveFile(boolean)
            --> ij.ImagePlus *
            --> ij.ImagePlus.getProcessor() *
            --> ij.ImagePlus.setColor(java.awt.Color) *
            --> ij.gui.NewImage.createByteImage(java.lang.String, int, int, int, int) *
            --> ij.process.ImageProcessor *
            --> ij.process.ImageProcessor.drawLine(int, int, int, int) *
            --> java.awt.Color *
            --> java.awt.Color.WHITE *
            --> java.awt.geom.Point2D$Double *
            --> java.awt.geom.Point2D$Double.getX() *
            --> java.awt.geom.Point2D$Double.getY() *
            --> java.io.File *
            --> java.io.File.File(java.lang.String) *
            --> java.lang.Math.round(double) *
            --> java.lang.Object *
            --> java.lang.String *
            --> java.util.Vector *
            --> java.util.Vector.elementAt(int) *
            --> java.util.Vector.size() *
            <-- mtb_neurites.Neurit_Detector_2D.process()
    Tree
        <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTree
        <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree
        --> java.lang.Object *
        Tree(de.unihalle.informatik.MiToBo.datatypes.TreeNodeData)
            --> de.unihalle.informatik.MiToBo.datatypes.Tree.root
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNode
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNode.TreeNode(de.unihalle.informatik.MiToBo.datatypes.TreeNodeData)
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNodeData
            <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTree.DirectoryTree(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.SkeletonTree(int, int, ij.ImagePlus)
            --> java.lang.Object.Object() *
        getRoot()
            --> de.unihalle.informatik.MiToBo.datatypes.Tree.root
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNode
        printTree()
            --> de.unihalle.informatik.MiToBo.datatypes.Tree.root
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNode
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNode.printData()
        root
            <-- de.unihalle.informatik.MiToBo.datatypes.Tree.Tree(de.unihalle.informatik.MiToBo.datatypes.TreeNodeData)
            <-- de.unihalle.informatik.MiToBo.datatypes.Tree.getRoot()
            <-- de.unihalle.informatik.MiToBo.datatypes.Tree.printTree()
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNode
    TreeNode
        <-- de.unihalle.informatik.MiToBo.datatypes.Tree.Tree(de.unihalle.informatik.MiToBo.datatypes.TreeNodeData)
        <-- de.unihalle.informatik.MiToBo.datatypes.Tree.getRoot()
        <-- de.unihalle.informatik.MiToBo.datatypes.Tree.printTree()
        <-- de.unihalle.informatik.MiToBo.datatypes.Tree.root
        <-- de.unihalle.informatik.MiToBo.datatypes.TreeNodeData.getNode()
        <-- de.unihalle.informatik.MiToBo.datatypes.TreeNodeData.node
        <-- de.unihalle.informatik.MiToBo.datatypes.TreeNodeData.setNode(de.unihalle.informatik.MiToBo.datatypes.TreeNode)
        <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTree.getFileList()
        <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTree.initFromDirectory()
        <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTree.traverseSubdir(java.lang.String, java.lang.String)
        <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTreeNodeData.getSubtreeFileList()
        <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTreeNodeData.setNode(de.unihalle.informatik.MiToBo.datatypes.TreeNode)
        <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.buildTree()
        <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.expandPath(de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData, int, int)
        <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.getAllPixels()
        <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.getLongestPath()
        <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.getSpinesAlongPath(int)
        <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.getStartPoint()
        <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.getAllPathPixels(java.util.Vector)
        <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.getFirstPixels(java.util.Vector, int, int)
        <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.getLongestPath(java.util.Vector)
        <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.getMaxLength()
        <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.getSpinesAlongPath(java.util.Vector, int)
        --> java.lang.Object *
        TreeNode(de.unihalle.informatik.MiToBo.datatypes.TreeNodeData)
            <-- de.unihalle.informatik.MiToBo.datatypes.Tree.Tree(de.unihalle.informatik.MiToBo.datatypes.TreeNodeData)
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNode.childs
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNode.dataObject
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNodeData
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNodeData.setNode(de.unihalle.informatik.MiToBo.datatypes.TreeNode)
            <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTree.traverseSubdir(java.lang.String, java.lang.String)
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.expandPath(de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData, int, int)
            --> java.lang.Object.Object() *
            --> java.util.Vector *
            --> java.util.Vector.Vector() *
        addChild(de.unihalle.informatik.MiToBo.datatypes.TreeNode)
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNode.childs
            <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTree.initFromDirectory()
            <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTree.traverseSubdir(java.lang.String, java.lang.String)
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.expandPath(de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData, int, int)
            --> java.lang.Object *
            --> java.util.Vector *
            --> java.util.Vector.addElement(java.lang.Object) *
        childs
            <-- de.unihalle.informatik.MiToBo.datatypes.TreeNode.TreeNode(de.unihalle.informatik.MiToBo.datatypes.TreeNodeData)
            <-- de.unihalle.informatik.MiToBo.datatypes.TreeNode.addChild(de.unihalle.informatik.MiToBo.datatypes.TreeNode)
            <-- de.unihalle.informatik.MiToBo.datatypes.TreeNode.getChilds()
            <-- de.unihalle.informatik.MiToBo.datatypes.TreeNode.printData()
            --> java.util.Vector *
        dataObject
            <-- de.unihalle.informatik.MiToBo.datatypes.TreeNode.TreeNode(de.unihalle.informatik.MiToBo.datatypes.TreeNodeData)
            <-- de.unihalle.informatik.MiToBo.datatypes.TreeNode.getData()
            <-- de.unihalle.informatik.MiToBo.datatypes.TreeNode.printData()
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNodeData
        getChilds()
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNode.childs
            <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTree.getFileList()
            <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTreeNodeData.getSubtreeFileList()
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.expandPath(de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData, int, int)
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.getAllPathPixels(java.util.Vector)
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.getFirstPixels(java.util.Vector, int, int)
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.getLongestPath(java.util.Vector)
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.getMaxLength()
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.getSpinesAlongPath(java.util.Vector, int)
            --> java.util.Vector *
        getData()
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNode.dataObject
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNodeData
            <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTree.getFileList()
            <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTree.initFromDirectory()
            <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTreeNodeData.getSubtreeFileList()
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.buildTree()
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.expandPath(de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData, int, int)
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.getAllPixels()
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.getLongestPath()
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.getSpinesAlongPath(int)
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.getStartPoint()
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.getAllPathPixels(java.util.Vector)
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.getFirstPixels(java.util.Vector, int, int)
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.getLongestPath(java.util.Vector)
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.getMaxLength()
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.getSpinesAlongPath(java.util.Vector, int)
        printData()
            <-- de.unihalle.informatik.MiToBo.datatypes.Tree.printTree()
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNode.childs
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNode.dataObject
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNodeData
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNodeData.printData()
            --> java.io.PrintStream *
            --> java.io.PrintStream.println(java.lang.String) *
            --> java.lang.Object *
            --> java.lang.String *
            --> java.lang.System.out *
            --> java.util.Vector *
            --> java.util.Vector.get(int) *
            --> java.util.Vector.size() *
    TreeNodeData
        <-- de.unihalle.informatik.MiToBo.datatypes.Tree.Tree(de.unihalle.informatik.MiToBo.datatypes.TreeNodeData)
        <-- de.unihalle.informatik.MiToBo.datatypes.TreeNode.TreeNode(de.unihalle.informatik.MiToBo.datatypes.TreeNodeData)
        <-- de.unihalle.informatik.MiToBo.datatypes.TreeNode.dataObject
        <-- de.unihalle.informatik.MiToBo.datatypes.TreeNode.getData()
        <-- de.unihalle.informatik.MiToBo.datatypes.TreeNode.printData()
        <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTree.DirectoryTree(java.lang.String)
        <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTree.getFileList()
        <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTree.initFromDirectory()
        <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTree.traverseSubdir(java.lang.String, java.lang.String)
        <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTreeNodeData
        <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTreeNodeData.getSubtreeFileList()
        <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.SkeletonTree(int, int, ij.ImagePlus)
        <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.buildTree()
        <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.expandPath(de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData, int, int)
        <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.getAllPixels()
        <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.getLongestPath()
        <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.getSpinesAlongPath(int)
        <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.getStartPoint()
        <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData
        <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.getAllPathPixels(java.util.Vector)
        <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.getFirstPixels(java.util.Vector, int, int)
        <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.getLongestPath(java.util.Vector)
        <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.getMaxLength()
        <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.getSpinesAlongPath(java.util.Vector, int)
        --> java.lang.Object *
        TreeNodeData()
            <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTreeNodeData.DirectoryTreeNodeData(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.SkeletonTreeNodeData(int, int)
            --> java.lang.Object.Object() *
        getNode()
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNode
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNodeData.node
        node
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNode
            <-- de.unihalle.informatik.MiToBo.datatypes.TreeNodeData.getNode()
            <-- de.unihalle.informatik.MiToBo.datatypes.TreeNodeData.setNode(de.unihalle.informatik.MiToBo.datatypes.TreeNode)
        printData()
            <-- de.unihalle.informatik.MiToBo.datatypes.TreeNode.printData()
        setNode(de.unihalle.informatik.MiToBo.datatypes.TreeNode)
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNode
            <-- de.unihalle.informatik.MiToBo.datatypes.TreeNode.TreeNode(de.unihalle.informatik.MiToBo.datatypes.TreeNodeData)
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNodeData.node
de.unihalle.informatik.MiToBo.datatypes.features
    FeatureVector
        --> java.lang.Object *
        FeatureVector(double[])
            --> de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.FeatureVector(double[], int, double)
            <-- de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.copy()
            --> de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.m_isLabeled
        FeatureVector(double[], double)
            --> de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.FeatureVector(double[], int, double)
            --> de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.m_isLabeled
        FeatureVector(double[], int)
            --> de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.FeatureVector(double[], int, double)
        FeatureVector(double[], int, double)
            --> Jama.Matrix *
            --> Jama.Matrix.Matrix(double[], int) *
            <-- de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.FeatureVector(double[])
            <-- de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.FeatureVector(double[], double)
            <-- de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.FeatureVector(double[], int)
            --> de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.m_data
            --> de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.m_isLabeled
            --> de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.m_label
            --> de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.m_weight
            --> java.lang.Object.Object() *
        add(de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector)
            --> Jama.Matrix *
            --> Jama.Matrix.plusEquals(Jama.Matrix) *
            --> de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.m_data
        copy()
            --> Jama.Matrix *
            --> Jama.Matrix.copy() *
            --> de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.FeatureVector(double[])
            --> de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.m_data
            --> de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.m_isLabeled
            --> de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.m_label
            --> de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.m_weight
        distCityBlock(de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector, de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector)
            --> Jama.Matrix *
            --> Jama.Matrix.getArray() *
            --> de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.m_data
            --> de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.size()
            --> java.lang.IllegalArgumentException *
            --> java.lang.IllegalArgumentException.IllegalArgumentException(java.lang.String) *
            --> java.lang.Math.abs(double) *
            --> java.lang.String *
        distEuklid(de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector, de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector)
            --> Jama.Matrix *
            --> Jama.Matrix.getArray() *
            --> de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.m_data
            --> de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.size()
            --> java.lang.IllegalArgumentException *
            --> java.lang.IllegalArgumentException.IllegalArgumentException(java.lang.String) *
            --> java.lang.Math.sqrt(double) *
            --> java.lang.String *
        distEuklidSquared(de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector, de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector)
            --> Jama.Matrix *
            --> Jama.Matrix.getArray() *
            --> de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.m_data
            --> de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.size()
            --> java.lang.IllegalArgumentException *
            --> java.lang.IllegalArgumentException.IllegalArgumentException(java.lang.String) *
            --> java.lang.String *
        getLabel()
            --> de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.m_label
        getValue(int)
            --> Jama.Matrix *
            --> Jama.Matrix.get(int, int) *
            --> de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.m_data
        getWeight()
            --> de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.m_weight
        isLabeled()
            --> de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.m_isLabeled
        m_data
            --> Jama.Matrix *
            <-- de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.FeatureVector(double[], int, double)
            <-- de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.add(de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector)
            <-- de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.copy()
            <-- de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.distCityBlock(de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector, de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector)
            <-- de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.distEuklid(de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector, de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector)
            <-- de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.distEuklidSquared(de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector, de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector)
            <-- de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.getValue(int)
            <-- de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.scale(double)
            <-- de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.setValue(int, double)
            <-- de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.size()
        m_isLabeled
            <-- de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.FeatureVector(double[])
            <-- de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.FeatureVector(double[], double)
            <-- de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.FeatureVector(double[], int, double)
            <-- de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.copy()
            <-- de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.isLabeled()
            <-- de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.setLabel(int)
            <-- de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.unsetLabel()
        m_label
            <-- de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.FeatureVector(double[], int, double)
            <-- de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.copy()
            <-- de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.getLabel()
            <-- de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.setLabel(int)
            <-- de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.unsetLabel()
        m_weight
            <-- de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.FeatureVector(double[], int, double)
            <-- de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.copy()
            <-- de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.getWeight()
            <-- de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.setWeight(double)
        scale(double)
            --> Jama.Matrix *
            --> Jama.Matrix.timesEquals(double) *
            --> de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.m_data
        setLabel(int)
            --> de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.m_isLabeled
            --> de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.m_label
        setValue(int, double)
            --> Jama.Matrix *
            --> Jama.Matrix.set(int, int, double) *
            --> de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.m_data
        setWeight(double)
            --> de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.m_weight
        size()
            --> Jama.Matrix *
            --> Jama.Matrix.getColumnDimension() *
            <-- de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.distCityBlock(de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector, de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector)
            <-- de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.distEuklid(de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector, de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector)
            <-- de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.distEuklidSquared(de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector, de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector)
            --> de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.m_data
        unsetLabel()
            --> de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.m_isLabeled
            --> de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.m_label
de.unihalle.informatik.MiToBo.datatypes.images
    MTBImage
        <-- de.unihalle.informatik.MiToBo.apps.cells2D.CellSegmentAlgos.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        <-- de.unihalle.informatik.MiToBo.apps.cells2D.CellSegmentAlgos.voronoiTesselation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$GranuleDetectorParams.GranuleDetectorAlgos$GranuleDetectorParams(de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$Subroutine)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$GranuleDetectorParams.GranuleDetectorAlgos$GranuleDetectorParams(de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos, de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$Subroutine)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$GranuleDetectorParams.getInputImage()
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.detectGranules_old(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.detectNuclei(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.detectPbodies(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.applyToImage()
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.applyToImageBatch(java.lang.String)
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
        <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
        <-- de.unihalle.informatik.MiToBo.datatypes.LevelSet.toBinaryImage()
        <-- de.unihalle.informatik.MiToBo.datatypes.LevelSetByte.toBinaryImage()
        <-- de.unihalle.informatik.MiToBo.datatypes.Region2D.toMTBImageByte(java.lang.String, int, int)
        <-- de.unihalle.informatik.MiToBo.datatypes.Snake.toMTBImage(java.lang.String, int, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.datatypes.Snake.toMTBImageByte(java.lang.String, int, int)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.duplicate()
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.duplicate()
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.duplicate()
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.duplicate()
        --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageManipulator
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.duplicate()
        <-- de.unihalle.informatik.MiToBo.enhance.GammaCorrection3D.correctGamma(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, int)
        <-- de.unihalle.informatik.MiToBo.enhance.HistogramEqualization$HistoEquParams.HistogramEqualization$HistoEquParams(de.unihalle.informatik.MiToBo.enhance.HistogramEqualization, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.enhance.HistogramEqualization$HistoEquParams.HistogramEqualization$HistoEquParams(de.unihalle.informatik.MiToBo.enhance.HistogramEqualization, de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.enhance.HistogramEqualization$HistoEquParams.getInputImage()
        <-- de.unihalle.informatik.MiToBo.enhance.HistogramEqualization$HistoEquParams.getResultImage()
        <-- de.unihalle.informatik.MiToBo.enhance.HistogramEqualization$HistoEquParams.setResultImage(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.enhance.HistogramEqualization.equalizeImageHisto(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.enhance.HistogramEqualization.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.rankOp(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, int, boolean, boolean, boolean, boolean, boolean)
        <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.rankedValueAt(int, int, int, int, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double[])
        <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.RankOperatorParams(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, int)
        <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.RankOperatorParams(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, int, boolean, boolean, boolean, boolean, boolean)
        <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.RankOperatorParams(de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, int)
        <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.RankOperatorParams(de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, int, boolean, boolean, boolean, boolean, boolean)
        <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.getInputImage()
        <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.getResultImage()
        <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.setResultImage(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.ImgOpen()
        <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.ImgOpen(java.io.File)
        <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.ImgOpen(java.lang.String, java.lang.String)
        <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.deleteBorder(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
        <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.inputImage
        <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.open()
        <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.open(int[])
        <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave()
        <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.io.File, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.io.File, ij.ImagePlus)
        <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.lang.String, java.lang.String, ij.ImagePlus)
        <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.lang.String, java.lang.String, java.lang.String, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.getImage()
        <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.image
        <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.saveFile(boolean)
        <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.setImage(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.setImage(ij.ImagePlus)
        <-- de.unihalle.informatik.MiToBo.meta.MTBOpBasePlugin.mtbInput
        <-- de.unihalle.informatik.MiToBo.meta.MTBOpBasePlugin.run(ij.process.ImageProcessor)
        <-- de.unihalle.informatik.MiToBo.morphology.HDomeTransform3D.hybridGrayscaleReconstruct(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.morphology.HDomeTransform3D.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        <-- de.unihalle.informatik.MiToBo.morphology.HDomeTransform3D.transform(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double)
        <-- de.unihalle.informatik.MiToBo.morphology.HDomeTransform3DParams.HDomeTransform3DParams(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double)
        <-- de.unihalle.informatik.MiToBo.morphology.HDomeTransform3DParams.HDomeTransform3DParams(de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double)
        <-- de.unihalle.informatik.MiToBo.morphology.HDomeTransform3DParams.getInputImage()
        <-- de.unihalle.informatik.MiToBo.morphology.HDomeTransform3DParams.getResultImage()
        <-- de.unihalle.informatik.MiToBo.morphology.HDomeTransform3DParams.setResultImage(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.morphology.ImgDilate$ImgDilateParams.ImgDilate$ImgDilateParams(de.unihalle.informatik.MiToBo.morphology.ImgDilate, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
        <-- de.unihalle.informatik.MiToBo.morphology.ImgDilate$ImgDilateParams.ImgDilate$ImgDilateParams(de.unihalle.informatik.MiToBo.morphology.ImgDilate, de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
        <-- de.unihalle.informatik.MiToBo.morphology.ImgDilate$ImgDilateParams.getInputImage()
        <-- de.unihalle.informatik.MiToBo.morphology.ImgDilate$ImgDilateParams.setResultImage(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.morphology.ImgDilate.applyMask(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
        <-- de.unihalle.informatik.MiToBo.morphology.ImgDilate.applyMask(ij.process.ImageProcessor, int)
        <-- de.unihalle.informatik.MiToBo.morphology.ImgDilate.mtbImg
        <-- de.unihalle.informatik.MiToBo.morphology.ImgDilate.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        <-- de.unihalle.informatik.MiToBo.morphology.ImgErode$ImgErodeParams.ImgErode$ImgErodeParams(de.unihalle.informatik.MiToBo.morphology.ImgErode, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
        <-- de.unihalle.informatik.MiToBo.morphology.ImgErode$ImgErodeParams.ImgErode$ImgErodeParams(de.unihalle.informatik.MiToBo.morphology.ImgErode, de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
        <-- de.unihalle.informatik.MiToBo.morphology.ImgErode$ImgErodeParams.getInputImage()
        <-- de.unihalle.informatik.MiToBo.morphology.ImgErode$ImgErodeParams.setResultImage(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.morphology.ImgErode.applyMask(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
        <-- de.unihalle.informatik.MiToBo.morphology.ImgErode.applyMask(ij.process.ImageProcessor, int)
        <-- de.unihalle.informatik.MiToBo.morphology.ImgErode.mtbImg
        <-- de.unihalle.informatik.MiToBo.morphology.ImgErode.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        <-- de.unihalle.informatik.MiToBo.morphology.Morphology3D.close(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.morphology.StructuringElement, de.unihalle.informatik.MiToBo.morphology.StructuringElement)
        <-- de.unihalle.informatik.MiToBo.morphology.Morphology3D.dilate(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.morphology.StructuringElement)
        <-- de.unihalle.informatik.MiToBo.morphology.Morphology3D.erode(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.morphology.StructuringElement)
        <-- de.unihalle.informatik.MiToBo.morphology.Morphology3D.open(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.morphology.StructuringElement, de.unihalle.informatik.MiToBo.morphology.StructuringElement)
        <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.SnakeAlgos.calcSnake(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double[], double[], int, double)
        <-- de.unihalle.informatik.MiToBo.segmentation.levelset.LevelSetSolver.LevelSetSolver(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.segmentation.levelset.LevelSetSolver.img
        <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.NoEdgesSolver3D(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double, double, int)
        <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.NoEdgesSolver3D(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double, double, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.getLevelSetAsBinary()
        <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.initMaskThreshold()
        <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.initThreshold()
        <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.initialize()
        <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.mask
        <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.step()
        <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3D.getLabelSavely(int, int, int)
        <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3D.m_labelImage
        <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3D.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3D.regionSegmentation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, boolean, int, int)
        <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3DParams.LabelComponentsSequential3DParams(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, boolean)
        <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3DParams.LabelComponentsSequential3DParams(de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, boolean)
        <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3DParams.getInputImage()
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu$OtsuParams.CalcGlobalThreshOtsu$OtsuParams(de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu$OtsuParams.CalcGlobalThreshOtsu$OtsuParams(de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu, de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu$OtsuParams.getInputImage()
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu.calcThreshold(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu.mtbImg
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThresh.applyThreshold(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double)
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThresh.applyThreshold(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double)
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThresh.applyThreshold(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThresh.applyThresholdToSlice(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double, int)
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams.ImgThreshNiblack$NiblackParams(de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$Mode, double, double, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams.ImgThreshNiblack$NiblackParams(de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack, de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$Mode, double, double, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams.getInputImage()
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.applyNiblackThreshold(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, double, double, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.applyNiblackThresholdMaskwise(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, double, double, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.applyNiblackThresholdWholeImage(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.applyNiblackThresholdWholeImage(ij.process.ImageProcessor, double, double, ij.ImagePlus)
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.applyNiblackThreshold_withLocalVarCheck(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, double, double, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.mtbImg
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        --> java.lang.Object *
        <-- mtb_demo.Demo_MTBOpBase_Plugin.m_img
        <-- mtb_demo.Demo_MTBOpBase_Plugin.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        <-- mtb_demo.Demo_MTBOpBase_Plugin.run(ij.process.ImageProcessor)
        <-- mtb_demo.Demo_MTBOpBase_Plugin.setup(java.lang.String, ij.ImagePlus)
        <-- mtb_demo.Demo_MTBOpBase_Plugin.threshold(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double)
        <-- mtb_enhance.Histogram_Equalize.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        <-- mtb_fields.Create_GVF.GVF_field(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
        <-- mtb_fields.Create_GVF.GradAbs(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- mtb_fields.Create_GVF.run(ij.process.ImageProcessor)
        <-- mtb_filters.Rank_Operator.m_img
        <-- mtb_filters.Rank_Operator.parameterDialog()
        <-- mtb_filters.Rank_Operator.run(ij.process.ImageProcessor)
        <-- mtb_filters.Rank_Operator.setup(java.lang.String, ij.ImagePlus)
        <-- mtb_granules.Cell_Segment_2D.run(ij.process.ImageProcessor)
        <-- mtb_io.Open_Image.inputImg
        <-- mtb_io.Open_Image.open()
        <-- mtb_io.Save_Image.inputImg
        <-- mtb_io.Save_Image.save()
        <-- mtb_morphology.CalcOtsuThreshold_Image.mtbInput
        <-- mtb_morphology.CalcOtsuThreshold_Image.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        <-- mtb_morphology.CalcOtsuThreshold_Image.run(ij.process.ImageProcessor)
        <-- mtb_morphology.Dilate_Image.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        <-- mtb_morphology.Erode_Image.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        <-- mtb_morphology.HDomeTransform_3D.m_img
        <-- mtb_morphology.HDomeTransform_3D.parameterDialog()
        <-- mtb_morphology.HDomeTransform_3D.run(ij.process.ImageProcessor)
        <-- mtb_morphology.HDomeTransform_3D.setup(java.lang.String, ij.ImagePlus)
        <-- mtb_morphology.Morph_3D.run(java.lang.String)
        <-- mtb_morphology.Threshold_Image.dialogItemChanged(ij.gui.GenericDialog, java.awt.AWTEvent)
        <-- mtb_morphology.Threshold_Image.m_img
        <-- mtb_morphology.Threshold_Image.m_threshImg
        <-- mtb_morphology.Threshold_Image.run(ij.process.ImageProcessor)
        <-- mtb_morphology.Threshold_Image_Niblack.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        <-- mtb_neurites.Neurit_Detector_2D.activeContours(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, java.util.Vector, int, double)
        <-- mtb_neurites.Neurit_Detector_2D.cells
        <-- mtb_neurites.Neurit_Detector_2D.cores
        <-- mtb_neurites.Neurit_Detector_2D.drawSnakeRegion(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.Region2D)
        <-- mtb_neurites.Neurit_Detector_2D.getExtEnergy(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, int)
        <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
        <-- mtb_neurites.Neurit_Detector_2D.process()
        <-- mtb_neurites.Neurit_Detector_2D.protein
        <-- mtb_neurites.Neurit_Detector_2D.removeCellBody(de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        <-- mtb_regions.Label_Components_Sequential_3D.m_img
        <-- mtb_regions.Label_Components_Sequential_3D.parameterDialog()
        <-- mtb_regions.Label_Components_Sequential_3D.run(ij.process.ImageProcessor)
        <-- mtb_regions.Label_Components_Sequential_3D.setup(java.lang.String, ij.ImagePlus)
        <-- mtb_regions.Segment_No_Edges3D.img
        <-- mtb_regions.Segment_No_Edges3D.run(ij.process.ImageProcessor)
        <-- mtb_regions.Segment_No_Edges3D.setup(java.lang.String, ij.ImagePlus)
        MTBImage()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.m_actSliceIdx
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.m_img
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.m_imgStack
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.m_meta
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.m_sizeC
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.m_sizeStack
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.m_sizeT
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.m_sizeX
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.m_sizeY
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.m_sizeZ
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.m_type
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.MTBImageByte(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.MTBImageDouble(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.MTBImageFloat(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.MTBImageInt(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.MTBImageShort(int, int, int, int, int)
            --> de.unihalle.informatik.MiToBo.meta.MTBMetaData
            --> de.unihalle.informatik.MiToBo.meta.MTBMetaData.MTBMetaData()
            --> ij.ImagePlus *
            --> ij.ImageStack *
            --> java.lang.Object.Object() *
        MTBImage(ij.ImagePlus)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.m_actSliceIdx
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.m_img
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.m_imgStack
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.m_meta
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.m_sizeC
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.m_sizeStack
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.m_sizeT
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.m_sizeX
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.m_sizeY
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.m_sizeZ
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.m_type
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.MTBImageByte(ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.MTBImageFloat(ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.MTBImageShort(ij.ImagePlus)
            --> de.unihalle.informatik.MiToBo.meta.MTBMetaData
            --> de.unihalle.informatik.MiToBo.meta.MTBMetaData.MTBMetaData()
            --> ij.ImagePlus *
            --> ij.ImagePlus.getHeight() *
            --> ij.ImagePlus.getNChannels() *
            --> ij.ImagePlus.getNFrames() *
            --> ij.ImagePlus.getNSlices() *
            --> ij.ImagePlus.getStack() *
            --> ij.ImagePlus.getStackSize() *
            --> ij.ImagePlus.getWidth() *
            --> ij.ImageStack *
            --> java.lang.Object.Object() *
        MTB_BYTE
        MTB_DOUBLE
        MTB_FLOAT
        MTB_INT
        MTB_SHORT
        close()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.m_img
            --> ij.ImagePlus *
            --> ij.ImagePlus.close() *
            <-- mtb_morphology.Threshold_Image.run(ij.process.ImageProcessor)
        createMTBImage(ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.applyToImage()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.applyToImageBatch(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.datatypes.Snake.toMTBImage(java.lang.String, int, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.MTBImageByte(ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.duplicate()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.MTBImageFloat(ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.duplicate()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.MTBImageShort(ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.duplicate()
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.deleteBorder(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.open()
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.open(int[])
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.io.File, ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.lang.String, java.lang.String, ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.setImage(ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.meta.MTBOpBasePlugin.run(ij.process.ImageProcessor)
            <-- de.unihalle.informatik.MiToBo.morphology.ImgDilate.applyMask(ij.process.ImageProcessor, int)
            <-- de.unihalle.informatik.MiToBo.morphology.ImgErode.applyMask(ij.process.ImageProcessor, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.applyNiblackThresholdWholeImage(ij.process.ImageProcessor, double, double, ij.ImagePlus)
            --> ij.ImagePlus *
            --> ij.ImagePlus.getProperties() *
            --> ij.ImagePlus.getProperty(java.lang.String) *
            --> ij.ImagePlus.getType() *
            --> java.lang.IllegalArgumentException *
            --> java.lang.IllegalArgumentException.IllegalArgumentException(java.lang.String) *
            --> java.lang.Object *
            --> java.lang.String *
            --> java.lang.StringBuilder *
            --> java.lang.StringBuilder.StringBuilder() *
            --> java.lang.StringBuilder.StringBuilder(java.lang.String) *
            --> java.lang.StringBuilder.append(int) *
            --> java.lang.StringBuilder.append(java.lang.String) *
            --> java.lang.StringBuilder.toString() *
            --> java.util.Properties *
            --> java.util.Properties.containsKey(java.lang.Object) *
            <-- mtb_demo.Demo_MTBOpBase_Plugin.setup(java.lang.String, ij.ImagePlus)
            <-- mtb_fields.Create_GVF.run(ij.process.ImageProcessor)
            <-- mtb_filters.Rank_Operator.setup(java.lang.String, ij.ImagePlus)
            <-- mtb_granules.Cell_Segment_2D.run(ij.process.ImageProcessor)
            <-- mtb_io.Save_Image.save()
            <-- mtb_morphology.CalcOtsuThreshold_Image.run(ij.process.ImageProcessor)
            <-- mtb_morphology.HDomeTransform_3D.setup(java.lang.String, ij.ImagePlus)
            <-- mtb_morphology.Morph_3D.run(java.lang.String)
            <-- mtb_morphology.Threshold_Image.run(ij.process.ImageProcessor)
            <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
            <-- mtb_regions.Label_Components_Sequential_3D.setup(java.lang.String, ij.ImagePlus)
            <-- mtb_regions.Segment_No_Edges3D.setup(java.lang.String, ij.ImagePlus)
        createMTBImage(int, int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.apps.cells2D.CellSegmentAlgos.voronoiTesselation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.detectGranules_old(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.detectNuclei(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.detectPbodies(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.datatypes.LevelSetByte.toBinaryImage()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.MTBImageByte(int, int, int, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.MTBImageDouble(int, int, int, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.MTBImageFloat(int, int, int, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.MTBImageInt(int, int, int, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.MTBImageShort(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.enhance.HistogramEqualization.equalizeImageHisto(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.morphology.ImgDilate.applyMask(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            <-- de.unihalle.informatik.MiToBo.morphology.ImgErode.applyMask(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3D.regionSegmentation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, boolean, int, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.applyNiblackThreshold(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, double, double, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.applyNiblackThresholdMaskwise(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, double, double, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.applyNiblackThresholdWholeImage(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.applyNiblackThreshold_withLocalVarCheck(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, double, double, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            --> java.lang.IllegalArgumentException *
            --> java.lang.IllegalArgumentException.IllegalArgumentException(java.lang.String) *
            --> java.lang.String *
            --> java.lang.StringBuilder *
            --> java.lang.StringBuilder.StringBuilder() *
            --> java.lang.StringBuilder.StringBuilder(java.lang.String) *
            --> java.lang.StringBuilder.append(int) *
            --> java.lang.StringBuilder.append(java.lang.String) *
            --> java.lang.StringBuilder.toString() *
            <-- mtb_neurites.Neurit_Detector_2D.removeCellBody(de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            <-- mtb_regions.Label_Components_Sequential_3D.run(ij.process.ImageProcessor)
        duplicate()
            <-- de.unihalle.informatik.MiToBo.datatypes.Snake.toMTBImage(java.lang.String, int, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.enhance.GammaCorrection3D.correctGamma(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, int)
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.rankOp(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, int, boolean, boolean, boolean, boolean, boolean)
            <-- de.unihalle.informatik.MiToBo.morphology.HDomeTransform3D.transform(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double)
            <-- de.unihalle.informatik.MiToBo.morphology.Morphology3D.dilate(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.morphology.StructuringElement)
            <-- de.unihalle.informatik.MiToBo.morphology.Morphology3D.erode(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.morphology.StructuringElement)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThresh.applyThreshold(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double)
            <-- mtb_demo.Demo_MTBOpBase_Plugin.threshold(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double)
            <-- mtb_morphology.Threshold_Image.run(ij.process.ImageProcessor)
        getActualSlice()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.m_actSliceIdx
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.m_sizeC
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.m_sizeZ
        getActualSliceIndex()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.m_actSliceIdx
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThresh.applyThreshold(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThresh.applyThreshold(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThresh.applyThresholdToSlice(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double, int)
        getImagePlus()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.detectPbodies(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.applyToImage()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.applyToImageBatch(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
            <-- de.unihalle.informatik.MiToBo.datatypes.Snake.toMTBImage(java.lang.String, int, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.show()
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.deleteBorder(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.saveFile(boolean)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThresh.applyThreshold(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.applyNiblackThresholdMaskwise(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, double, double, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            --> ij.ImagePlus *
            <-- mtb_filters.Rank_Operator.run(ij.process.ImageProcessor)
            <-- mtb_morphology.HDomeTransform_3D.run(ij.process.ImageProcessor)
            <-- mtb_morphology.Morph_3D.run(java.lang.String)
            <-- mtb_morphology.Threshold_Image.run(ij.process.ImageProcessor)
            <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
            <-- mtb_neurites.Neurit_Detector_2D.process()
            <-- mtb_regions.Label_Components_Sequential_3D.run(ij.process.ImageProcessor)
            <-- mtb_regions.Segment_No_Edges3D.run(ij.process.ImageProcessor)
        getMetaData()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.detectGranules_old(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.detectNuclei(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.detectPbodies(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.applyToImage()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.m_meta
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.io.File, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.io.File, ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.lang.String, java.lang.String, ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.lang.String, java.lang.String, java.lang.String, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> de.unihalle.informatik.MiToBo.meta.MTBMetaData
            <-- de.unihalle.informatik.MiToBo.meta.MTBOpBasePlugin.run(ij.process.ImageProcessor)
            <-- mtb_filters.Rank_Operator.run(ij.process.ImageProcessor)
            <-- mtb_morphology.CalcOtsuThreshold_Image.run(ij.process.ImageProcessor)
            <-- mtb_morphology.HDomeTransform_3D.run(ij.process.ImageProcessor)
            <-- mtb_regions.Label_Components_Sequential_3D.run(ij.process.ImageProcessor)
        getMinMaxDouble()
            <-- mtb_morphology.Threshold_Image.run(ij.process.ImageProcessor)
        getMinMaxInt()
        getSizeC()
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.m_sizeC
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.rankOp(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, int, boolean, boolean, boolean, boolean, boolean)
            <-- de.unihalle.informatik.MiToBo.morphology.HDomeTransform3D.hybridGrayscaleReconstruct(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.morphology.HDomeTransform3D.transform(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double)
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.LevelSetSolver.LevelSetSolver(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3D.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            <-- mtb_demo.Demo_MTBOpBase_Plugin.threshold(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double)
            <-- mtb_filters.Rank_Operator.parameterDialog()
            <-- mtb_neurites.Neurit_Detector_2D.drawSnakeRegion(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.Region2D)
            <-- mtb_regions.Label_Components_Sequential_3D.run(ij.process.ImageProcessor)
            <-- mtb_regions.Label_Components_Sequential_3D.setup(java.lang.String, ij.ImagePlus)
            <-- mtb_regions.Segment_No_Edges3D.run(ij.process.ImageProcessor)
        getSizeStack()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.m_sizeStack
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.saveFile(boolean)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThresh.applyThreshold(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThresh.applyThreshold(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double)
            <-- mtb_morphology.Threshold_Image.run(ij.process.ImageProcessor)
        getSizeT()
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.m_sizeT
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.rankOp(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, int, boolean, boolean, boolean, boolean, boolean)
            <-- de.unihalle.informatik.MiToBo.morphology.HDomeTransform3D.hybridGrayscaleReconstruct(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.morphology.HDomeTransform3D.transform(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double)
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.LevelSetSolver.LevelSetSolver(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3D.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            <-- mtb_demo.Demo_MTBOpBase_Plugin.threshold(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double)
            <-- mtb_filters.Rank_Operator.parameterDialog()
            <-- mtb_neurites.Neurit_Detector_2D.drawSnakeRegion(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.Region2D)
            <-- mtb_regions.Label_Components_Sequential_3D.run(ij.process.ImageProcessor)
        getSizeX()
            <-- de.unihalle.informatik.MiToBo.apps.cells2D.CellSegmentAlgos.voronoiTesselation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.detectGranules_old(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.detectNuclei(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.detectPbodies(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.m_sizeX
            <-- de.unihalle.informatik.MiToBo.enhance.GammaCorrection3D.correctGamma(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, int)
            <-- de.unihalle.informatik.MiToBo.enhance.HistogramEqualization.equalizeImageHisto(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.rankOp(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, int, boolean, boolean, boolean, boolean, boolean)
            <-- de.unihalle.informatik.MiToBo.morphology.HDomeTransform3D.hybridGrayscaleReconstruct(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.morphology.HDomeTransform3D.transform(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double)
            <-- de.unihalle.informatik.MiToBo.morphology.ImgDilate.applyMask(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            <-- de.unihalle.informatik.MiToBo.morphology.ImgErode.applyMask(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            <-- de.unihalle.informatik.MiToBo.morphology.Morphology3D.dilate(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.morphology.StructuringElement)
            <-- de.unihalle.informatik.MiToBo.morphology.Morphology3D.erode(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.morphology.StructuringElement)
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.SnakeAlgos.calcSnake(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double[], double[], int, double)
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.LevelSetSolver.LevelSetSolver(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3D.regionSegmentation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, boolean, int, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThresh.applyThreshold(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThresh.applyThreshold(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThresh.applyThreshold(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThresh.applyThresholdToSlice(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.applyNiblackThreshold(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, double, double, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.applyNiblackThresholdMaskwise(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, double, double, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.applyNiblackThresholdWholeImage(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.applyNiblackThreshold_withLocalVarCheck(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, double, double, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            <-- mtb_demo.Demo_MTBOpBase_Plugin.threshold(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double)
            <-- mtb_fields.Create_GVF.GVF_field(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            <-- mtb_fields.Create_GVF.GradAbs(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- mtb_filters.Rank_Operator.parameterDialog()
            <-- mtb_neurites.Neurit_Detector_2D.drawSnakeRegion(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.Region2D)
            <-- mtb_regions.Label_Components_Sequential_3D.run(ij.process.ImageProcessor)
        getSizeY()
            <-- de.unihalle.informatik.MiToBo.apps.cells2D.CellSegmentAlgos.voronoiTesselation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.detectGranules_old(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.detectNuclei(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.detectPbodies(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.m_sizeY
            <-- de.unihalle.informatik.MiToBo.enhance.GammaCorrection3D.correctGamma(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, int)
            <-- de.unihalle.informatik.MiToBo.enhance.HistogramEqualization.equalizeImageHisto(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.rankOp(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, int, boolean, boolean, boolean, boolean, boolean)
            <-- de.unihalle.informatik.MiToBo.morphology.HDomeTransform3D.hybridGrayscaleReconstruct(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.morphology.HDomeTransform3D.transform(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double)
            <-- de.unihalle.informatik.MiToBo.morphology.ImgDilate.applyMask(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            <-- de.unihalle.informatik.MiToBo.morphology.ImgErode.applyMask(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            <-- de.unihalle.informatik.MiToBo.morphology.Morphology3D.dilate(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.morphology.StructuringElement)
            <-- de.unihalle.informatik.MiToBo.morphology.Morphology3D.erode(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.morphology.StructuringElement)
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.LevelSetSolver.LevelSetSolver(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3D.regionSegmentation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, boolean, int, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThresh.applyThreshold(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThresh.applyThreshold(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThresh.applyThreshold(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThresh.applyThresholdToSlice(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.applyNiblackThreshold(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, double, double, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.applyNiblackThresholdMaskwise(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, double, double, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.applyNiblackThresholdWholeImage(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.applyNiblackThreshold_withLocalVarCheck(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, double, double, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            <-- mtb_demo.Demo_MTBOpBase_Plugin.threshold(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double)
            <-- mtb_fields.Create_GVF.GVF_field(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            <-- mtb_fields.Create_GVF.GradAbs(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- mtb_filters.Rank_Operator.parameterDialog()
            <-- mtb_neurites.Neurit_Detector_2D.drawSnakeRegion(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.Region2D)
            <-- mtb_regions.Label_Components_Sequential_3D.run(ij.process.ImageProcessor)
        getSizeZ()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.m_sizeZ
            <-- de.unihalle.informatik.MiToBo.enhance.GammaCorrection3D.correctGamma(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, int)
            <-- de.unihalle.informatik.MiToBo.enhance.HistogramEqualization.equalizeImageHisto(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.rankOp(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, int, boolean, boolean, boolean, boolean, boolean)
            <-- de.unihalle.informatik.MiToBo.morphology.HDomeTransform3D.hybridGrayscaleReconstruct(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.morphology.HDomeTransform3D.transform(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double)
            <-- de.unihalle.informatik.MiToBo.morphology.Morphology3D.dilate(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.morphology.StructuringElement)
            <-- de.unihalle.informatik.MiToBo.morphology.Morphology3D.erode(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.morphology.StructuringElement)
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.LevelSetSolver.LevelSetSolver(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3D.regionSegmentation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, boolean, int, int)
            <-- mtb_demo.Demo_MTBOpBase_Plugin.threshold(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double)
            <-- mtb_filters.Rank_Operator.parameterDialog()
            <-- mtb_neurites.Neurit_Detector_2D.drawSnakeRegion(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.Region2D)
            <-- mtb_regions.Label_Components_Sequential_3D.run(ij.process.ImageProcessor)
            <-- mtb_regions.Label_Components_Sequential_3D.setup(java.lang.String, ij.ImagePlus)
        getType()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.m_type
            <-- de.unihalle.informatik.MiToBo.enhance.GammaCorrection3D.correctGamma(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, int)
            <-- mtb_neurites.Neurit_Detector_2D.drawSnakeRegion(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.Region2D)
        getTypeMax()
            <-- de.unihalle.informatik.MiToBo.datatypes.Snake.toMTBImage(java.lang.String, int, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.m_type
        getTypeMin()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.m_type
        getValueDouble(int, int)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.detectPbodies(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThresh.applyThreshold(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThresh.applyThreshold(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThresh.applyThresholdToSlice(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double, int)
            <-- mtb_fields.Create_GVF.GradAbs(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- mtb_neurites.Neurit_Detector_2D.drawSnakeRegion(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.Region2D)
        getValueDouble(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.rankedValueAt(int, int, int, int, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double[])
            <-- de.unihalle.informatik.MiToBo.morphology.HDomeTransform3D.hybridGrayscaleReconstruct(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.morphology.HDomeTransform3D.transform(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double)
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.initMaskThreshold()
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.initThreshold()
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.step()
            <-- mtb_demo.Demo_MTBOpBase_Plugin.threshold(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double)
        getValueInt(int, int)
            <-- de.unihalle.informatik.MiToBo.apps.cells2D.CellSegmentAlgos.voronoiTesselation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.detectGranules_old(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.detectNuclei(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.detectPbodies(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.enhance.HistogramEqualization.equalizeImageHisto(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.morphology.ImgDilate.applyMask(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            <-- de.unihalle.informatik.MiToBo.morphology.ImgErode.applyMask(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.applyNiblackThreshold(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, double, double, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.applyNiblackThresholdWholeImage(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.applyNiblackThreshold_withLocalVarCheck(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, double, double, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        getValueInt(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.enhance.GammaCorrection3D.correctGamma(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, int)
            <-- de.unihalle.informatik.MiToBo.morphology.Morphology3D.dilate(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.morphology.StructuringElement)
            <-- de.unihalle.informatik.MiToBo.morphology.Morphology3D.erode(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.morphology.StructuringElement)
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.initMaskThreshold()
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3D.getLabelSavely(int, int, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3D.regionSegmentation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, boolean, int, int)
        m_actSliceIdx
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.MTBImage()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.MTBImage(ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getActualSlice()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getActualSliceIndex()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.setActualSlice(int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.setActualSliceIndex(int)
        m_img
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.MTBImage()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.MTBImage(ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.close()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.show()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.updateAndRepaintWindow()
            --> ij.ImagePlus *
        m_imgStack
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.MTBImage()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.MTBImage(ij.ImagePlus)
            --> ij.ImageStack *
        m_meta
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.MTBImage()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.MTBImage(ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getMetaData()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.setMetaData(de.unihalle.informatik.MiToBo.meta.MTBMetaData)
            --> de.unihalle.informatik.MiToBo.meta.MTBMetaData
        m_sizeC
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.MTBImage()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.MTBImage(ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getActualSlice()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeC()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.setActualSlice(int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.show()
        m_sizeStack
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.MTBImage()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.MTBImage(ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeStack()
        m_sizeT
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.MTBImage()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.MTBImage(ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeT()
        m_sizeX
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.MTBImage()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.MTBImage(ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeX()
        m_sizeY
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.MTBImage()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.MTBImage(ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeY()
        m_sizeZ
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.MTBImage()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.MTBImage(ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getActualSlice()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeZ()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.setActualSlice(int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.show()
        m_type
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.MTBImage()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.MTBImage(ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getType()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getTypeMax()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getTypeMin()
        putValueDouble(int, int, double)
            <-- de.unihalle.informatik.MiToBo.datatypes.Snake.toMTBImage(java.lang.String, int, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThresh.applyThreshold(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThresh.applyThreshold(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThresh.applyThresholdToSlice(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double, int)
            <-- mtb_neurites.Neurit_Detector_2D.drawSnakeRegion(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.Region2D)
        putValueDouble(int, int, int, int, int, double)
            <-- de.unihalle.informatik.MiToBo.datatypes.LevelSetByte.toBinaryImage()
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.rankOp(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, int, boolean, boolean, boolean, boolean, boolean)
            <-- de.unihalle.informatik.MiToBo.morphology.HDomeTransform3D.hybridGrayscaleReconstruct(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.morphology.HDomeTransform3D.transform(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double)
            <-- mtb_demo.Demo_MTBOpBase_Plugin.threshold(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double)
        putValueInt(int, int, int)
            <-- de.unihalle.informatik.MiToBo.apps.cells2D.CellSegmentAlgos.voronoiTesselation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.detectGranules_old(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        putValueInt(int, int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.apps.cells2D.CellSegmentAlgos.voronoiTesselation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            <-- de.unihalle.informatik.MiToBo.enhance.GammaCorrection3D.correctGamma(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, int)
            <-- de.unihalle.informatik.MiToBo.enhance.HistogramEqualization.equalizeImageHisto(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.morphology.Morphology3D.dilate(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.morphology.StructuringElement)
            <-- de.unihalle.informatik.MiToBo.morphology.Morphology3D.erode(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.morphology.StructuringElement)
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3D.regionSegmentation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, boolean, int, int)
            <-- mtb_regions.Label_Components_Sequential_3D.run(ij.process.ImageProcessor)
        setActualSlice(int, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.m_actSliceIdx
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.m_sizeC
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.m_sizeZ
        setActualSliceIndex(int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.m_actSliceIdx
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThresh.applyThreshold(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThresh.applyThreshold(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThresh.applyThresholdToSlice(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double, int)
        setMetaData(de.unihalle.informatik.MiToBo.meta.MTBMetaData)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.m_meta
            --> de.unihalle.informatik.MiToBo.meta.MTBMetaData
            <-- de.unihalle.informatik.MiToBo.meta.MTBOpBasePlugin.run(ij.process.ImageProcessor)
            <-- mtb_demo.Demo_MTBOpBase_Plugin.run(ij.process.ImageProcessor)
            <-- mtb_filters.Rank_Operator.run(ij.process.ImageProcessor)
            <-- mtb_morphology.HDomeTransform_3D.run(ij.process.ImageProcessor)
            <-- mtb_regions.Label_Components_Sequential_3D.run(ij.process.ImageProcessor)
        show()
            <-- de.unihalle.informatik.MiToBo.apps.cells2D.CellSegmentAlgos.voronoiTesselation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getImagePlus()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.m_img
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.m_sizeC
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.m_sizeZ
            <-- de.unihalle.informatik.MiToBo.meta.MTBOpBasePlugin.run(ij.process.ImageProcessor)
            --> ij.ImagePlus *
            --> ij.ImagePlus.getCurrentSlice() *
            --> ij.ImagePlus.getWindow() *
            --> ij.ImagePlus.setProperty(java.lang.String, java.lang.Object) *
            --> ij.ImagePlus.show() *
            --> ij.gui.ImageWindow *
            --> ij.gui.StackWindow *
            --> ij.gui.StackWindow.setPosition(int, int, int) *
            --> ij.gui.StackWindow.updateSliceSelector() *
            --> java.lang.Object *
            --> java.lang.String *
            <-- mtb_demo.Demo_MTBOpBase_Plugin.run(ij.process.ImageProcessor)
            <-- mtb_filters.Rank_Operator.run(ij.process.ImageProcessor)
            <-- mtb_granules.Cell_Segment_2D.run(ij.process.ImageProcessor)
            <-- mtb_io.Open_Image.open()
            <-- mtb_morphology.HDomeTransform_3D.run(ij.process.ImageProcessor)
            <-- mtb_morphology.Threshold_Image.run(ij.process.ImageProcessor)
        updateAndRepaintWindow()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.m_img
            --> ij.ImagePlus *
            --> ij.ImagePlus.updateAndRepaintWindow() *
            <-- mtb_morphology.Threshold_Image.dialogItemChanged(ij.gui.GenericDialog, java.awt.AWTEvent)
            <-- mtb_morphology.Threshold_Image.run(ij.process.ImageProcessor)
    MTBImageByte
        <-- de.unihalle.informatik.MiToBo.apps.cells2D.CellSegmentAlgos.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        <-- de.unihalle.informatik.MiToBo.apps.cells2D.CellSegmentAlgos.voronoiTesselation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$GranuleDetectorParams.getResultImage()
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$GranuleDetectorParams.setResultImage(de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.detectGranules_old(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.detectNuclei(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.detectPbodies(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.kernelMask
        <-- de.unihalle.informatik.MiToBo.datatypes.Region2D.toMTBImageByte(java.lang.String, int, int)
        <-- de.unihalle.informatik.MiToBo.datatypes.Snake.toMTBImageByte(java.lang.String, int, int)
        --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
        <-- de.unihalle.informatik.MiToBo.morphology.ImgDilate$ImgDilateParams.getResultImage()
        <-- de.unihalle.informatik.MiToBo.morphology.ImgDilate.applyMask(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
        <-- de.unihalle.informatik.MiToBo.morphology.ImgDilate.applyMask(ij.process.ImageProcessor, int)
        <-- de.unihalle.informatik.MiToBo.morphology.ImgDilate.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        <-- de.unihalle.informatik.MiToBo.morphology.ImgErode$ImgErodeParams.getResultImage()
        <-- de.unihalle.informatik.MiToBo.morphology.ImgErode.applyMask(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
        <-- de.unihalle.informatik.MiToBo.morphology.ImgErode.applyMask(ij.process.ImageProcessor, int)
        <-- de.unihalle.informatik.MiToBo.morphology.ImgErode.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThresh.applyThreshold(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams.ImgThreshNiblack$NiblackParams(de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$Mode, double, double, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams.ImgThreshNiblack$NiblackParams(de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack, de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$Mode, double, double, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams.getMask()
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams.getResultImage()
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams.setResultImage(de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.applyNiblackThreshold(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, double, double, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.applyNiblackThresholdMaskwise(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, double, double, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.applyNiblackThresholdWholeImage(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.applyNiblackThresholdWholeImage(ij.process.ImageProcessor, double, double, ij.ImagePlus)
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.applyNiblackThreshold_withLocalVarCheck(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, double, double, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        <-- mtb_granules.Cell_Segment_2D.run(ij.process.ImageProcessor)
        <-- mtb_morphology.Dilate_Image.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        <-- mtb_morphology.Erode_Image.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        <-- mtb_morphology.Threshold_Image_Niblack.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        <-- mtb_neurites.Neurit_Detector_2D.noCellbody
        <-- mtb_neurites.Neurit_Detector_2D.opening
        <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
        <-- mtb_neurites.Neurit_Detector_2D.process()
        <-- mtb_neurites.Neurit_Detector_2D.removeCellBody(de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        MTBImageByte(ij.ImagePlus)
            --> B[] *
            --> B[][] *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.MTBImage(ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.createMTBImage(ij.ImagePlus)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.m_data
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.m_img *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.m_imgStack *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.m_sizeStack *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.m_type *
            --> ij.ImagePlus *
            --> ij.ImagePlus.setProperty(java.lang.String, java.lang.Object) *
            --> ij.ImageStack *
            --> ij.ImageStack.getProcessor(int) *
            --> ij.process.ImageProcessor *
            --> ij.process.ImageProcessor.getPixels() *
            --> java.lang.Object *
            --> java.lang.String *
        MTBImageByte(int, int, int, int, int)
            --> B[] *
            --> B[][] *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.MTBImage()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.createMTBImage(int, int, int, int, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.m_data
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.m_img *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.m_imgStack *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.m_sizeC *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.m_sizeStack *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.m_sizeT *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.m_sizeX *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.m_sizeY *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.m_sizeZ *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.m_type *
            --> ij.ImagePlus *
            --> ij.ImagePlus.getStack() *
            --> ij.ImagePlus.setDimensions(int, int, int) *
            --> ij.ImagePlus.setOpenAsHyperStack(boolean) *
            --> ij.ImagePlus.setProperty(java.lang.String, java.lang.Object) *
            --> ij.ImageStack *
            --> ij.ImageStack.getProcessor(int) *
            --> ij.gui.NewImage.createByteImage(java.lang.String, int, int, int, int) *
            --> ij.process.ImageProcessor *
            --> ij.process.ImageProcessor.getPixels() *
            --> java.lang.Object *
            --> java.lang.String *
        createMTBImage(ij.ImagePlus) *
            <-- de.unihalle.informatik.MiToBo.datatypes.Region2D.toMTBImageByte(java.lang.String, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.Snake.toMTBImageByte(java.lang.String, int, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThresh.applyThreshold(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            <-- mtb_neurites.Neurit_Detector_2D.removeCellBody(de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        createMTBImage(int, int, int, int, int, int) *
            <-- de.unihalle.informatik.MiToBo.datatypes.Snake.toMTBImageByte(java.lang.String, int, int)
            <-- mtb_neurites.Neurit_Detector_2D.drawSnakeRegion(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.Region2D)
        duplicate()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.createMTBImage(ij.ImagePlus)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.m_img *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.m_imgStack *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.m_sizeStack *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.m_sizeX *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.m_sizeY *
            --> ij.ImagePlus *
            --> ij.ImagePlus.createImagePlus() *
            --> ij.ImagePlus.getCurrentSlice() *
            --> ij.ImagePlus.getDisplayRangeMax() *
            --> ij.ImagePlus.getDisplayRangeMin() *
            --> ij.ImagePlus.getNChannels() *
            --> ij.ImagePlus.getNFrames() *
            --> ij.ImagePlus.getNSlices() *
            --> ij.ImagePlus.getOpenAsHyperStack() *
            --> ij.ImagePlus.getTitle() *
            --> ij.ImagePlus.isHyperStack() *
            --> ij.ImagePlus.setDimensions(int, int, int) *
            --> ij.ImagePlus.setDisplayRange(double, double) *
            --> ij.ImagePlus.setOpenAsHyperStack(boolean) *
            --> ij.ImagePlus.setPosition(int) *
            --> ij.ImagePlus.setStack(java.lang.String, ij.ImageStack) *
            --> ij.ImageStack *
            --> ij.ImageStack.ImageStack(int, int) *
            --> ij.ImageStack.addSlice(java.lang.String, ij.process.ImageProcessor) *
            --> ij.ImageStack.getProcessor(int) *
            --> ij.ImageStack.getSliceLabel(int) *
            --> ij.process.ImageProcessor *
            --> ij.process.ImageProcessor.duplicate() *
            --> java.lang.String *
        getImagePlus()
            <-- de.unihalle.informatik.MiToBo.apps.cells2D.CellSegmentAlgos.voronoiTesselation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.m_img *
            <-- de.unihalle.informatik.MiToBo.morphology.ImgDilate.applyMask(ij.process.ImageProcessor, int)
            <-- de.unihalle.informatik.MiToBo.morphology.ImgErode.applyMask(ij.process.ImageProcessor, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.applyNiblackThresholdWholeImage(ij.process.ImageProcessor, double, double, ij.ImagePlus)
            --> ij.ImagePlus *
            <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
            <-- mtb_neurites.Neurit_Detector_2D.process()
            <-- mtb_neurites.Neurit_Detector_2D.removeCellBody(de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        getMinMaxDouble()
            --> D[] *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.m_data
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.m_sizeStack *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.m_sizeX *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.m_sizeY *
        getMinMaxInt()
            --> I[] *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.m_data
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.m_sizeStack *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.m_sizeX *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.m_sizeY *
        getSizeX() *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        getSizeY() *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        getTypeMax() *
            <-- de.unihalle.informatik.MiToBo.datatypes.Snake.toMTBImageByte(java.lang.String, int, int)
        getValueDouble(int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.m_actSliceIdx *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.m_data
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.m_sizeX *
        getValueDouble(int, int, int, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.m_data
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.m_sizeC *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.m_sizeX *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.m_sizeZ *
        getValueInt(int, int)
            <-- de.unihalle.informatik.MiToBo.apps.cells2D.CellSegmentAlgos.voronoiTesselation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.detectGranules_old(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.m_actSliceIdx *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.m_data
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.m_sizeX *
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.applyNiblackThreshold(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, double, double, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.applyNiblackThresholdWholeImage(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.applyNiblackThreshold_withLocalVarCheck(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, double, double, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        getValueInt(int, int, int, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.m_data
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.m_sizeC *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.m_sizeX *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.m_sizeZ *
        m_actSliceIdx *
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.getValueDouble(int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.getValueInt(int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.putValueDouble(int, int, double)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.putValueInt(int, int, int)
        m_data
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.MTBImageByte(ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.MTBImageByte(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.getMinMaxDouble()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.getMinMaxInt()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.getValueDouble(int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.getValueDouble(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.getValueInt(int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.getValueInt(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.putValueDouble(int, int, double)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.putValueDouble(int, int, int, int, int, double)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.putValueInt(int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.putValueInt(int, int, int, int, int, int)
        m_img *
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.MTBImageByte(ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.MTBImageByte(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.duplicate()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.getImagePlus()
        m_imgStack *
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.MTBImageByte(ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.MTBImageByte(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.duplicate()
        m_sizeC *
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.MTBImageByte(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.getValueDouble(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.getValueInt(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.putValueDouble(int, int, int, int, int, double)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.putValueInt(int, int, int, int, int, int)
        m_sizeStack *
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.MTBImageByte(ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.MTBImageByte(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.duplicate()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.getMinMaxDouble()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.getMinMaxInt()
        m_sizeT *
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.MTBImageByte(int, int, int, int, int)
        m_sizeX *
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.MTBImageByte(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.duplicate()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.getMinMaxDouble()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.getMinMaxInt()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.getValueDouble(int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.getValueDouble(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.getValueInt(int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.getValueInt(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.putValueDouble(int, int, double)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.putValueDouble(int, int, int, int, int, double)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.putValueInt(int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.putValueInt(int, int, int, int, int, int)
        m_sizeY *
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.MTBImageByte(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.duplicate()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.getMinMaxDouble()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.getMinMaxInt()
        m_sizeZ *
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.MTBImageByte(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.getValueDouble(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.getValueInt(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.putValueDouble(int, int, int, int, int, double)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.putValueInt(int, int, int, int, int, int)
        m_type *
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.MTBImageByte(ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.MTBImageByte(int, int, int, int, int)
        putValueDouble(int, int, double)
            <-- de.unihalle.informatik.MiToBo.datatypes.Snake.toMTBImageByte(java.lang.String, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.m_actSliceIdx *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.m_data
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.m_sizeX *
        putValueDouble(int, int, int, int, int, double)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.m_data
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.m_sizeC *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.m_sizeX *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.m_sizeZ *
        putValueInt(int, int, int)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.detectGranules_old(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.detectNuclei(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.detectPbodies(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.m_actSliceIdx *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.m_data
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.m_sizeX *
            <-- de.unihalle.informatik.MiToBo.morphology.ImgDilate.applyMask(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            <-- de.unihalle.informatik.MiToBo.morphology.ImgErode.applyMask(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.applyNiblackThreshold(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, double, double, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.applyNiblackThresholdMaskwise(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, double, double, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.applyNiblackThresholdWholeImage(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.applyNiblackThreshold_withLocalVarCheck(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, double, double, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        putValueInt(int, int, int, int, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.m_data
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.m_sizeC *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.m_sizeX *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.m_sizeZ *
        setMetaData(de.unihalle.informatik.MiToBo.meta.MTBMetaData) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.detectNuclei(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.detectPbodies(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        show() *
            <-- mtb_granules.Cell_Segment_2D.run(ij.process.ImageProcessor)
            <-- mtb_neurites.Neurit_Detector_2D.removeCellBody(de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
    MTBImageDouble
        --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
        MTBImageDouble(int, int, int, int, int)
            --> D[][] *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.MTBImage()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.createMTBImage(int, int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.duplicate()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.m_data
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.m_sizeC *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.m_sizeStack *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.m_sizeT *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.m_sizeX *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.m_sizeY *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.m_sizeZ *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.m_type *
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.duplicate()
        duplicate()
            --> D[][] *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.MTBImageDouble(int, int, int, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.m_data
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.m_sizeC *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.m_sizeStack *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.m_sizeT *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.m_sizeX *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.m_sizeY *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.m_sizeZ *
            --> java.lang.Object *
            --> java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int) *
        getImagePlus()
            --> F[] *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.m_data
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.m_sizeC *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.m_sizeStack *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.m_sizeT *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.m_sizeX *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.m_sizeY *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.m_sizeZ *
            --> ij.ImagePlus *
            --> ij.ImagePlus.getStack() *
            --> ij.ImagePlus.setDimensions(int, int, int) *
            --> ij.ImagePlus.setOpenAsHyperStack(boolean) *
            --> ij.ImagePlus.setProperty(java.lang.String, java.lang.Object) *
            --> ij.ImageStack *
            --> ij.ImageStack.getProcessor(int) *
            --> ij.gui.NewImage.createFloatImage(java.lang.String, int, int, int, int) *
            --> ij.process.ImageProcessor *
            --> ij.process.ImageProcessor.getPixels() *
            --> java.lang.Object *
            --> java.lang.String *
        getMinMaxDouble()
            --> D[] *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.m_data
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.m_sizeStack *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.m_sizeX *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.m_sizeY *
        getMinMaxInt()
            --> I[] *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.m_data
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.m_sizeStack *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.m_sizeX *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.m_sizeY *
        getValueDouble(int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.m_actSliceIdx *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.m_data
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.m_sizeX *
        getValueDouble(int, int, int, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.m_data
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.m_sizeC *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.m_sizeX *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.m_sizeZ *
        getValueInt(int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.m_actSliceIdx *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.m_data
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.m_sizeX *
        getValueInt(int, int, int, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.m_data
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.m_sizeC *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.m_sizeX *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.m_sizeZ *
        m_actSliceIdx *
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.getValueDouble(int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.getValueInt(int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.putValueDouble(int, int, double)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.putValueInt(int, int, int)
        m_data
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.MTBImageDouble(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.duplicate()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.getImagePlus()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.getMinMaxDouble()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.getMinMaxInt()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.getValueDouble(int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.getValueDouble(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.getValueInt(int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.getValueInt(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.putValueDouble(int, int, double)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.putValueDouble(int, int, int, int, int, double)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.putValueInt(int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.putValueInt(int, int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.duplicate()
        m_sizeC *
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.MTBImageDouble(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.duplicate()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.getImagePlus()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.getValueDouble(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.getValueInt(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.putValueDouble(int, int, int, int, int, double)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.putValueInt(int, int, int, int, int, int)
        m_sizeStack *
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.MTBImageDouble(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.duplicate()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.getImagePlus()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.getMinMaxDouble()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.getMinMaxInt()
        m_sizeT *
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.MTBImageDouble(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.duplicate()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.getImagePlus()
        m_sizeX *
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.MTBImageDouble(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.duplicate()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.getImagePlus()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.getMinMaxDouble()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.getMinMaxInt()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.getValueDouble(int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.getValueDouble(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.getValueInt(int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.getValueInt(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.putValueDouble(int, int, double)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.putValueDouble(int, int, int, int, int, double)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.putValueInt(int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.putValueInt(int, int, int, int, int, int)
        m_sizeY *
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.MTBImageDouble(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.duplicate()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.getImagePlus()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.getMinMaxDouble()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.getMinMaxInt()
        m_sizeZ *
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.MTBImageDouble(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.duplicate()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.getImagePlus()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.getValueDouble(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.getValueInt(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.putValueDouble(int, int, int, int, int, double)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.putValueInt(int, int, int, int, int, int)
        m_type *
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.MTBImageDouble(int, int, int, int, int)
        putValueDouble(int, int, double)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.m_actSliceIdx *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.m_data
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.m_sizeX *
        putValueDouble(int, int, int, int, int, double)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.m_data
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.m_sizeC *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.m_sizeX *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.m_sizeZ *
        putValueInt(int, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.m_actSliceIdx *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.m_data
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.m_sizeX *
        putValueInt(int, int, int, int, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.m_data
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.m_sizeC *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.m_sizeX *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.m_sizeZ *
    MTBImageFloat
        --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
        MTBImageFloat(ij.ImagePlus)
            --> F[] *
            --> F[][] *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.MTBImage(ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.createMTBImage(ij.ImagePlus)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.m_data
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.m_img *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.m_imgStack *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.m_sizeStack *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.m_type *
            --> ij.ImagePlus *
            --> ij.ImagePlus.setProperty(java.lang.String, java.lang.Object) *
            --> ij.ImageStack *
            --> ij.ImageStack.getProcessor(int) *
            --> ij.process.ImageProcessor *
            --> ij.process.ImageProcessor.getPixels() *
            --> java.lang.Object *
            --> java.lang.String *
        MTBImageFloat(int, int, int, int, int)
            --> F[] *
            --> F[][] *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.MTBImage()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.createMTBImage(int, int, int, int, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.m_data
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.m_img *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.m_imgStack *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.m_sizeC *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.m_sizeStack *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.m_sizeT *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.m_sizeX *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.m_sizeY *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.m_sizeZ *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.m_type *
            --> ij.ImagePlus *
            --> ij.ImagePlus.getStack() *
            --> ij.ImagePlus.setDimensions(int, int, int) *
            --> ij.ImagePlus.setOpenAsHyperStack(boolean) *
            --> ij.ImagePlus.setProperty(java.lang.String, java.lang.Object) *
            --> ij.ImageStack *
            --> ij.ImageStack.getProcessor(int) *
            --> ij.gui.NewImage.createFloatImage(java.lang.String, int, int, int, int) *
            --> ij.process.ImageProcessor *
            --> ij.process.ImageProcessor.getPixels() *
            --> java.lang.Object *
            --> java.lang.String *
        duplicate()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.createMTBImage(ij.ImagePlus)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.m_img *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.m_imgStack *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.m_sizeStack *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.m_sizeX *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.m_sizeY *
            --> ij.ImagePlus *
            --> ij.ImagePlus.createImagePlus() *
            --> ij.ImagePlus.getCurrentSlice() *
            --> ij.ImagePlus.getDisplayRangeMax() *
            --> ij.ImagePlus.getDisplayRangeMin() *
            --> ij.ImagePlus.getNChannels() *
            --> ij.ImagePlus.getNFrames() *
            --> ij.ImagePlus.getNSlices() *
            --> ij.ImagePlus.getOpenAsHyperStack() *
            --> ij.ImagePlus.getTitle() *
            --> ij.ImagePlus.isHyperStack() *
            --> ij.ImagePlus.setDimensions(int, int, int) *
            --> ij.ImagePlus.setDisplayRange(double, double) *
            --> ij.ImagePlus.setOpenAsHyperStack(boolean) *
            --> ij.ImagePlus.setPosition(int) *
            --> ij.ImagePlus.setStack(java.lang.String, ij.ImageStack) *
            --> ij.ImageStack *
            --> ij.ImageStack.ImageStack(int, int) *
            --> ij.ImageStack.addSlice(java.lang.String, ij.process.ImageProcessor) *
            --> ij.ImageStack.getProcessor(int) *
            --> ij.ImageStack.getSliceLabel(int) *
            --> ij.process.ImageProcessor *
            --> ij.process.ImageProcessor.duplicate() *
            --> java.lang.String *
        getImagePlus()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.m_img *
            --> ij.ImagePlus *
        getMinMaxDouble()
            --> D[] *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.m_data
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.m_sizeStack *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.m_sizeX *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.m_sizeY *
        getMinMaxInt()
            --> I[] *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.m_data
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.m_sizeStack *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.m_sizeX *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.m_sizeY *
        getValueDouble(int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.m_actSliceIdx *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.m_data
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.m_sizeX *
        getValueDouble(int, int, int, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.m_data
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.m_sizeC *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.m_sizeX *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.m_sizeZ *
        getValueInt(int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.m_actSliceIdx *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.m_data
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.m_sizeX *
        getValueInt(int, int, int, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.m_data
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.m_sizeC *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.m_sizeX *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.m_sizeZ *
        m_actSliceIdx *
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.getValueDouble(int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.getValueInt(int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.putValueDouble(int, int, double)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.putValueInt(int, int, int)
        m_data
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.MTBImageFloat(ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.MTBImageFloat(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.getMinMaxDouble()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.getMinMaxInt()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.getValueDouble(int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.getValueDouble(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.getValueInt(int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.getValueInt(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.putValueDouble(int, int, double)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.putValueDouble(int, int, int, int, int, double)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.putValueInt(int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.putValueInt(int, int, int, int, int, int)
        m_img *
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.MTBImageFloat(ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.MTBImageFloat(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.duplicate()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.getImagePlus()
        m_imgStack *
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.MTBImageFloat(ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.MTBImageFloat(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.duplicate()
        m_sizeC *
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.MTBImageFloat(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.getValueDouble(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.getValueInt(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.putValueDouble(int, int, int, int, int, double)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.putValueInt(int, int, int, int, int, int)
        m_sizeStack *
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.MTBImageFloat(ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.MTBImageFloat(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.duplicate()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.getMinMaxDouble()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.getMinMaxInt()
        m_sizeT *
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.MTBImageFloat(int, int, int, int, int)
        m_sizeX *
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.MTBImageFloat(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.duplicate()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.getMinMaxDouble()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.getMinMaxInt()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.getValueDouble(int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.getValueDouble(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.getValueInt(int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.getValueInt(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.putValueDouble(int, int, double)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.putValueDouble(int, int, int, int, int, double)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.putValueInt(int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.putValueInt(int, int, int, int, int, int)
        m_sizeY *
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.MTBImageFloat(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.duplicate()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.getMinMaxDouble()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.getMinMaxInt()
        m_sizeZ *
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.MTBImageFloat(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.getValueDouble(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.getValueInt(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.putValueDouble(int, int, int, int, int, double)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.putValueInt(int, int, int, int, int, int)
        m_type *
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.MTBImageFloat(ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.MTBImageFloat(int, int, int, int, int)
        putValueDouble(int, int, double)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.m_actSliceIdx *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.m_data
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.m_sizeX *
        putValueDouble(int, int, int, int, int, double)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.m_data
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.m_sizeC *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.m_sizeX *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.m_sizeZ *
        putValueInt(int, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.m_actSliceIdx *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.m_data
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.m_sizeX *
        putValueInt(int, int, int, int, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.m_data
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.m_sizeC *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.m_sizeX *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.m_sizeZ *
    MTBImageInt
        --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
        <-- mtb_regions.Label_Components_Sequential_3D.run(ij.process.ImageProcessor)
        MTBImageInt(int, int, int, int, int)
            --> I[][] *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.MTBImage()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.createMTBImage(int, int, int, int, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.m_data
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.m_sizeC *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.m_sizeStack *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.m_sizeT *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.m_sizeX *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.m_sizeY *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.m_sizeZ *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.m_type *
        duplicate()
            --> I[][] *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.MTBImageDouble(int, int, int, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.m_data
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.m_data
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.m_sizeC *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.m_sizeStack *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.m_sizeT *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.m_sizeX *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.m_sizeY *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.m_sizeZ *
            --> java.lang.Object *
            --> java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int) *
        getImagePlus()
            --> F[] *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.m_data
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.m_sizeC *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.m_sizeStack *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.m_sizeT *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.m_sizeX *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.m_sizeY *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.m_sizeZ *
            --> ij.ImagePlus *
            --> ij.ImagePlus.getStack() *
            --> ij.ImagePlus.setDimensions(int, int, int) *
            --> ij.ImagePlus.setOpenAsHyperStack(boolean) *
            --> ij.ImagePlus.setProperty(java.lang.String, java.lang.Object) *
            --> ij.ImageStack *
            --> ij.ImageStack.getProcessor(int) *
            --> ij.gui.NewImage.createFloatImage(java.lang.String, int, int, int, int) *
            --> ij.process.ImageProcessor *
            --> ij.process.ImageProcessor.getPixels() *
            --> java.lang.Object *
            --> java.lang.String *
        getImagePlusRGB()
            --> I[] *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.m_data
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.m_sizeC *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.m_sizeStack *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.m_sizeT *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.m_sizeX *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.m_sizeY *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.m_sizeZ *
            --> ij.ImagePlus *
            --> ij.ImagePlus.getStack() *
            --> ij.ImagePlus.setDimensions(int, int, int) *
            --> ij.ImagePlus.setOpenAsHyperStack(boolean) *
            --> ij.ImagePlus.setProperty(java.lang.String, java.lang.Object) *
            --> ij.ImageStack *
            --> ij.ImageStack.getProcessor(int) *
            --> ij.gui.NewImage.createRGBImage(java.lang.String, int, int, int, int) *
            --> ij.process.ImageProcessor *
            --> ij.process.ImageProcessor.getPixels() *
            --> java.lang.Object *
            --> java.lang.String *
            <-- mtb_regions.Label_Components_Sequential_3D.run(ij.process.ImageProcessor)
        getMinMaxDouble()
            --> D[] *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.m_data
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.m_sizeStack *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.m_sizeX *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.m_sizeY *
        getMinMaxInt()
            --> I[] *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.m_data
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.m_sizeStack *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.m_sizeX *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.m_sizeY *
        getValueDouble(int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.m_actSliceIdx *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.m_data
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.m_sizeX *
        getValueDouble(int, int, int, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.m_data
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.m_sizeC *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.m_sizeX *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.m_sizeZ *
        getValueInt(int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.m_actSliceIdx *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.m_data
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.m_sizeX *
        getValueInt(int, int, int, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.m_data
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.m_sizeC *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.m_sizeX *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.m_sizeZ *
        m_actSliceIdx *
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.getValueDouble(int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.getValueInt(int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.putValueDouble(int, int, double)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.putValueInt(int, int, int)
        m_data
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.MTBImageInt(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.duplicate()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.getImagePlus()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.getImagePlusRGB()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.getMinMaxDouble()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.getMinMaxInt()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.getValueDouble(int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.getValueDouble(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.getValueInt(int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.getValueInt(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.putValueDouble(int, int, double)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.putValueDouble(int, int, int, int, int, double)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.putValueInt(int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.putValueInt(int, int, int, int, int, int)
        m_sizeC *
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.MTBImageInt(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.duplicate()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.getImagePlus()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.getImagePlusRGB()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.getValueDouble(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.getValueInt(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.putValueDouble(int, int, int, int, int, double)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.putValueInt(int, int, int, int, int, int)
        m_sizeStack *
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.MTBImageInt(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.duplicate()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.getImagePlus()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.getImagePlusRGB()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.getMinMaxDouble()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.getMinMaxInt()
        m_sizeT *
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.MTBImageInt(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.duplicate()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.getImagePlus()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.getImagePlusRGB()
        m_sizeX *
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.MTBImageInt(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.duplicate()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.getImagePlus()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.getImagePlusRGB()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.getMinMaxDouble()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.getMinMaxInt()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.getValueDouble(int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.getValueDouble(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.getValueInt(int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.getValueInt(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.putValueDouble(int, int, double)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.putValueDouble(int, int, int, int, int, double)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.putValueInt(int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.putValueInt(int, int, int, int, int, int)
        m_sizeY *
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.MTBImageInt(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.duplicate()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.getImagePlus()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.getImagePlusRGB()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.getMinMaxDouble()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.getMinMaxInt()
        m_sizeZ *
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.MTBImageInt(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.duplicate()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.getImagePlus()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.getImagePlusRGB()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.getValueDouble(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.getValueInt(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.putValueDouble(int, int, int, int, int, double)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.putValueInt(int, int, int, int, int, int)
        m_type *
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.MTBImageInt(int, int, int, int, int)
        putValueDouble(int, int, double)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.m_actSliceIdx *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.m_data
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.m_sizeX *
        putValueDouble(int, int, int, int, int, double)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.m_data
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.m_sizeC *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.m_sizeX *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.m_sizeZ *
        putValueInt(int, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.m_actSliceIdx *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.m_data
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.m_sizeX *
        putValueInt(int, int, int, int, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.m_data
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.m_sizeC *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.m_sizeX *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.m_sizeZ *
    MTBImageManipulator
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.MTBImageWindow(int, int, int, int, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageManipulator)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.getValueDouble(int, int, int, int, int)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.getValueInt(int, int, int, int, int)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.incrPositionC()
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.incrPositionC(int)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.incrPositionT()
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.incrPositionT(int)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.incrPositionX()
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.incrPositionX(int)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.incrPositionY()
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.incrPositionY(int)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.incrPositionZ()
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.incrPositionZ(int)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_impulator
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.putValueDouble(int, int, int, int, int, double)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.putValueInt(int, int, int, int, int, int)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.setPositionC(int)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.setPositionT(int)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.setPositionX(int)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.setPositionY(int)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.setPositionZ(int)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.setSource(de.unihalle.informatik.MiToBo.datatypes.images.MTBImageManipulator)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.setWindowPosition(int, int, int, int, int)
        --> java.lang.Object *
        getSizeC()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.MTBImageWindow(int, int, int, int, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageManipulator)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.incrPositionC()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.incrPositionC(int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.setPositionC(int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.setWindowPosition(int, int, int, int, int)
        getSizeT()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.MTBImageWindow(int, int, int, int, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageManipulator)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.incrPositionT()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.incrPositionT(int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.setPositionT(int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.setWindowPosition(int, int, int, int, int)
        getSizeX()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.MTBImageWindow(int, int, int, int, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageManipulator)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.incrPositionX()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.incrPositionX(int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.setPositionX(int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.setWindowPosition(int, int, int, int, int)
        getSizeY()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.MTBImageWindow(int, int, int, int, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageManipulator)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.incrPositionY()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.incrPositionY(int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.setPositionY(int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.setWindowPosition(int, int, int, int, int)
        getSizeZ()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.MTBImageWindow(int, int, int, int, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageManipulator)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.incrPositionZ()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.incrPositionZ(int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.setPositionZ(int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.setWindowPosition(int, int, int, int, int)
        getValueDouble(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.getValueDouble(int, int, int, int, int)
        getValueInt(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.getValueInt(int, int, int, int, int)
        putValueDouble(int, int, int, int, int, double)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.putValueDouble(int, int, int, int, int, double)
        putValueInt(int, int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.putValueInt(int, int, int, int, int, int)
    MTBImageShort
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
        MTBImageShort(ij.ImagePlus)
            --> S[] *
            --> S[][] *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.MTBImage(ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.createMTBImage(ij.ImagePlus)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.m_data
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.m_img *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.m_imgStack *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.m_sizeStack *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.m_type *
            --> ij.ImagePlus *
            --> ij.ImagePlus.setProperty(java.lang.String, java.lang.Object) *
            --> ij.ImageStack *
            --> ij.ImageStack.getProcessor(int) *
            --> ij.process.ImageProcessor *
            --> ij.process.ImageProcessor.getPixels() *
            --> java.lang.Object *
            --> java.lang.String *
        MTBImageShort(int, int, int, int, int)
            --> S[] *
            --> S[][] *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.MTBImage()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.createMTBImage(int, int, int, int, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.m_data
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.m_img *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.m_imgStack *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.m_sizeC *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.m_sizeStack *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.m_sizeT *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.m_sizeX *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.m_sizeY *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.m_sizeZ *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.m_type *
            --> ij.ImagePlus *
            --> ij.ImagePlus.getStack() *
            --> ij.ImagePlus.setDimensions(int, int, int) *
            --> ij.ImagePlus.setOpenAsHyperStack(boolean) *
            --> ij.ImagePlus.setProperty(java.lang.String, java.lang.Object) *
            --> ij.ImageStack *
            --> ij.ImageStack.getProcessor(int) *
            --> ij.gui.NewImage.createShortImage(java.lang.String, int, int, int, int) *
            --> ij.process.ImageProcessor *
            --> ij.process.ImageProcessor.getPixels() *
            --> java.lang.Object *
            --> java.lang.String *
        duplicate()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.createMTBImage(ij.ImagePlus)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.m_img *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.m_imgStack *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.m_sizeStack *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.m_sizeX *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.m_sizeY *
            --> ij.ImagePlus *
            --> ij.ImagePlus.createImagePlus() *
            --> ij.ImagePlus.getCurrentSlice() *
            --> ij.ImagePlus.getDisplayRangeMax() *
            --> ij.ImagePlus.getDisplayRangeMin() *
            --> ij.ImagePlus.getNChannels() *
            --> ij.ImagePlus.getNFrames() *
            --> ij.ImagePlus.getNSlices() *
            --> ij.ImagePlus.getOpenAsHyperStack() *
            --> ij.ImagePlus.getTitle() *
            --> ij.ImagePlus.isHyperStack() *
            --> ij.ImagePlus.setDimensions(int, int, int) *
            --> ij.ImagePlus.setDisplayRange(double, double) *
            --> ij.ImagePlus.setOpenAsHyperStack(boolean) *
            --> ij.ImagePlus.setPosition(int) *
            --> ij.ImagePlus.setStack(java.lang.String, ij.ImageStack) *
            --> ij.ImageStack *
            --> ij.ImageStack.ImageStack(int, int) *
            --> ij.ImageStack.addSlice(java.lang.String, ij.process.ImageProcessor) *
            --> ij.ImageStack.getProcessor(int) *
            --> ij.ImageStack.getSliceLabel(int) *
            --> ij.process.ImageProcessor *
            --> ij.process.ImageProcessor.duplicate() *
            --> java.lang.String *
        getImagePlus()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.m_img *
            --> ij.ImagePlus *
        getMinMaxDouble()
            --> D[] *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.m_data
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.m_sizeStack *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.m_sizeX *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.m_sizeY *
        getMinMaxInt()
            --> I[] *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.m_data
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.m_sizeStack *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.m_sizeX *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.m_sizeY *
        getValueDouble(int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.m_actSliceIdx *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.m_data
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.m_sizeX *
        getValueDouble(int, int, int, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.m_data
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.m_sizeC *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.m_sizeX *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.m_sizeZ *
        getValueInt(int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.m_actSliceIdx *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.m_data
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.m_sizeX *
        getValueInt(int, int, int, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.m_data
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.m_sizeC *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.m_sizeX *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.m_sizeZ *
        m_actSliceIdx *
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.getValueDouble(int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.getValueInt(int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.putValueDouble(int, int, double)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.putValueInt(int, int, int)
        m_data
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.MTBImageShort(ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.MTBImageShort(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.getMinMaxDouble()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.getMinMaxInt()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.getValueDouble(int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.getValueDouble(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.getValueInt(int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.getValueInt(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.putValueDouble(int, int, double)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.putValueDouble(int, int, int, int, int, double)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.putValueInt(int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.putValueInt(int, int, int, int, int, int)
        m_img *
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.MTBImageShort(ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.MTBImageShort(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.duplicate()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.getImagePlus()
        m_imgStack *
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.MTBImageShort(ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.MTBImageShort(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.duplicate()
        m_sizeC *
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.MTBImageShort(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.getValueDouble(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.getValueInt(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.putValueDouble(int, int, int, int, int, double)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.putValueInt(int, int, int, int, int, int)
        m_sizeStack *
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.MTBImageShort(ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.MTBImageShort(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.duplicate()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.getMinMaxDouble()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.getMinMaxInt()
        m_sizeT *
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.MTBImageShort(int, int, int, int, int)
        m_sizeX *
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.MTBImageShort(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.duplicate()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.getMinMaxDouble()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.getMinMaxInt()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.getValueDouble(int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.getValueDouble(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.getValueInt(int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.getValueInt(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.putValueDouble(int, int, double)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.putValueDouble(int, int, int, int, int, double)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.putValueInt(int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.putValueInt(int, int, int, int, int, int)
        m_sizeY *
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.MTBImageShort(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.duplicate()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.getMinMaxDouble()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.getMinMaxInt()
        m_sizeZ *
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.MTBImageShort(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.getValueDouble(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.getValueInt(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.putValueDouble(int, int, int, int, int, double)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.putValueInt(int, int, int, int, int, int)
        m_type *
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.MTBImageShort(ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.MTBImageShort(int, int, int, int, int)
        putValueDouble(int, int, double)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.m_actSliceIdx *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.m_data
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.m_sizeX *
        putValueDouble(int, int, int, int, int, double)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.m_data
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.m_sizeC *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.m_sizeX *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.m_sizeZ *
        putValueInt(int, int, int)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.m_actSliceIdx *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.m_data
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.m_sizeX *
        putValueInt(int, int, int, int, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.m_data
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.m_sizeC *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.m_sizeX *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.m_sizeZ *
    MTBImageWindow
        --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageManipulator
        --> java.lang.Object *
        MTBImageWindow(int, int, int, int, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageManipulator)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageManipulator
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageManipulator.getSizeC()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageManipulator.getSizeT()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageManipulator.getSizeX()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageManipulator.getSizeY()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageManipulator.getSizeZ()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_impulator
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_posC
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_posT
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_posX
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_posY
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_posZ
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_sizeC
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_sizeT
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_sizeX
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_sizeY
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_sizeZ
            --> java.lang.Object.Object() *
        getSizeC()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_sizeC
        getSizeT()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_sizeT
        getSizeX()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_sizeX
        getSizeY()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_sizeY
        getSizeZ()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_sizeZ
        getValueDouble(int, int, int, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageManipulator
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageManipulator.getValueDouble(int, int, int, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_impulator
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_posC
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_posT
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_posX
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_posY
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_posZ
        getValueInt(int, int, int, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageManipulator
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageManipulator.getValueInt(int, int, int, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_impulator
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_posC
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_posT
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_posX
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_posY
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_posZ
        getWindowPosition()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_posC
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_posT
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_posX
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_posY
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_posZ
        incrPositionC()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageManipulator
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageManipulator.getSizeC()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_impulator
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_posC
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_sizeC
            --> java.lang.IndexOutOfBoundsException *
            --> java.lang.IndexOutOfBoundsException.IndexOutOfBoundsException(java.lang.String) *
            --> java.lang.String *
        incrPositionC(int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageManipulator
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageManipulator.getSizeC()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_impulator
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_posC
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_sizeC
            --> java.lang.IndexOutOfBoundsException *
            --> java.lang.IndexOutOfBoundsException.IndexOutOfBoundsException(java.lang.String) *
            --> java.lang.String *
        incrPositionT()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageManipulator
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageManipulator.getSizeT()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_impulator
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_posT
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_sizeT
            --> java.lang.IndexOutOfBoundsException *
            --> java.lang.IndexOutOfBoundsException.IndexOutOfBoundsException(java.lang.String) *
            --> java.lang.String *
        incrPositionT(int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageManipulator
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageManipulator.getSizeT()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_impulator
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_posT
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_sizeT
            --> java.lang.IndexOutOfBoundsException *
            --> java.lang.IndexOutOfBoundsException.IndexOutOfBoundsException(java.lang.String) *
            --> java.lang.String *
        incrPositionX()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageManipulator
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageManipulator.getSizeX()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_impulator
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_posX
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_sizeX
            --> java.lang.IndexOutOfBoundsException *
            --> java.lang.IndexOutOfBoundsException.IndexOutOfBoundsException(java.lang.String) *
            --> java.lang.String *
        incrPositionX(int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageManipulator
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageManipulator.getSizeX()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_impulator
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_posX
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_sizeX
            --> java.lang.IndexOutOfBoundsException *
            --> java.lang.IndexOutOfBoundsException.IndexOutOfBoundsException(java.lang.String) *
            --> java.lang.String *
        incrPositionY()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageManipulator
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageManipulator.getSizeY()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_impulator
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_posY
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_sizeY
            --> java.lang.IndexOutOfBoundsException *
            --> java.lang.IndexOutOfBoundsException.IndexOutOfBoundsException(java.lang.String) *
            --> java.lang.String *
        incrPositionY(int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageManipulator
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageManipulator.getSizeY()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_impulator
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_posY
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_sizeY
            --> java.lang.IndexOutOfBoundsException *
            --> java.lang.IndexOutOfBoundsException.IndexOutOfBoundsException(java.lang.String) *
            --> java.lang.String *
        incrPositionZ()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageManipulator
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageManipulator.getSizeZ()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_impulator
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_posZ
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_sizeZ
            --> java.lang.IndexOutOfBoundsException *
            --> java.lang.IndexOutOfBoundsException.IndexOutOfBoundsException(java.lang.String) *
            --> java.lang.String *
        incrPositionZ(int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageManipulator
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageManipulator.getSizeZ()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_impulator
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_posZ
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_sizeZ
            --> java.lang.IndexOutOfBoundsException *
            --> java.lang.IndexOutOfBoundsException.IndexOutOfBoundsException(java.lang.String) *
            --> java.lang.String *
        m_impulator
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageManipulator
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.MTBImageWindow(int, int, int, int, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageManipulator)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.getValueDouble(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.getValueInt(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.incrPositionC()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.incrPositionC(int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.incrPositionT()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.incrPositionT(int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.incrPositionX()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.incrPositionX(int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.incrPositionY()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.incrPositionY(int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.incrPositionZ()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.incrPositionZ(int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.putValueDouble(int, int, int, int, int, double)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.putValueInt(int, int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.setPositionC(int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.setPositionT(int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.setPositionX(int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.setPositionY(int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.setPositionZ(int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.setSource(de.unihalle.informatik.MiToBo.datatypes.images.MTBImageManipulator)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.setWindowPosition(int, int, int, int, int)
        m_posC
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.MTBImageWindow(int, int, int, int, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageManipulator)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.getValueDouble(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.getValueInt(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.getWindowPosition()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.incrPositionC()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.incrPositionC(int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.putValueDouble(int, int, int, int, int, double)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.putValueInt(int, int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.setPositionC(int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.setWindowPosition(int, int, int, int, int)
        m_posT
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.MTBImageWindow(int, int, int, int, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageManipulator)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.getValueDouble(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.getValueInt(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.getWindowPosition()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.incrPositionT()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.incrPositionT(int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.putValueDouble(int, int, int, int, int, double)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.putValueInt(int, int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.setPositionT(int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.setWindowPosition(int, int, int, int, int)
        m_posX
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.MTBImageWindow(int, int, int, int, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageManipulator)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.getValueDouble(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.getValueInt(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.getWindowPosition()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.incrPositionX()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.incrPositionX(int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.putValueDouble(int, int, int, int, int, double)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.putValueInt(int, int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.setPositionX(int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.setWindowPosition(int, int, int, int, int)
        m_posY
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.MTBImageWindow(int, int, int, int, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageManipulator)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.getValueDouble(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.getValueInt(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.getWindowPosition()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.incrPositionY()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.incrPositionY(int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.putValueDouble(int, int, int, int, int, double)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.putValueInt(int, int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.setPositionY(int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.setWindowPosition(int, int, int, int, int)
        m_posZ
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.MTBImageWindow(int, int, int, int, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageManipulator)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.getValueDouble(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.getValueInt(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.getWindowPosition()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.incrPositionZ()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.incrPositionZ(int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.putValueDouble(int, int, int, int, int, double)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.putValueInt(int, int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.setPositionZ(int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.setWindowPosition(int, int, int, int, int)
        m_sizeC
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.MTBImageWindow(int, int, int, int, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageManipulator)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.getSizeC()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.incrPositionC()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.incrPositionC(int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.setPositionC(int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.setWindowPosition(int, int, int, int, int)
        m_sizeT
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.MTBImageWindow(int, int, int, int, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageManipulator)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.getSizeT()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.incrPositionT()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.incrPositionT(int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.setPositionT(int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.setWindowPosition(int, int, int, int, int)
        m_sizeX
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.MTBImageWindow(int, int, int, int, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageManipulator)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.getSizeX()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.incrPositionX()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.incrPositionX(int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.setPositionX(int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.setWindowPosition(int, int, int, int, int)
        m_sizeY
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.MTBImageWindow(int, int, int, int, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageManipulator)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.getSizeY()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.incrPositionY()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.incrPositionY(int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.setPositionY(int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.setWindowPosition(int, int, int, int, int)
        m_sizeZ
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.MTBImageWindow(int, int, int, int, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageManipulator)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.getSizeZ()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.incrPositionZ()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.incrPositionZ(int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.setPositionZ(int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.setWindowPosition(int, int, int, int, int)
        putValueDouble(int, int, int, int, int, double)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageManipulator
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageManipulator.putValueDouble(int, int, int, int, int, double)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_impulator
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_posC
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_posT
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_posX
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_posY
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_posZ
        putValueInt(int, int, int, int, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageManipulator
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageManipulator.putValueInt(int, int, int, int, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_impulator
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_posC
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_posT
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_posX
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_posY
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_posZ
        setPositionC(int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageManipulator
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageManipulator.getSizeC()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_impulator
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_posC
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_sizeC
            --> java.lang.IndexOutOfBoundsException *
            --> java.lang.IndexOutOfBoundsException.IndexOutOfBoundsException(java.lang.String) *
            --> java.lang.String *
        setPositionT(int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageManipulator
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageManipulator.getSizeT()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_impulator
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_posT
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_sizeT
            --> java.lang.IndexOutOfBoundsException *
            --> java.lang.IndexOutOfBoundsException.IndexOutOfBoundsException(java.lang.String) *
            --> java.lang.String *
        setPositionX(int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageManipulator
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageManipulator.getSizeX()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_impulator
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_posX
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_sizeX
            --> java.lang.IndexOutOfBoundsException *
            --> java.lang.IndexOutOfBoundsException.IndexOutOfBoundsException(java.lang.String) *
            --> java.lang.String *
        setPositionY(int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageManipulator
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageManipulator.getSizeY()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_impulator
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_posY
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_sizeY
            --> java.lang.IndexOutOfBoundsException *
            --> java.lang.IndexOutOfBoundsException.IndexOutOfBoundsException(java.lang.String) *
            --> java.lang.String *
        setPositionZ(int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageManipulator
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageManipulator.getSizeZ()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_impulator
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_posZ
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_sizeZ
            --> java.lang.IndexOutOfBoundsException *
            --> java.lang.IndexOutOfBoundsException.IndexOutOfBoundsException(java.lang.String) *
            --> java.lang.String *
        setSource(de.unihalle.informatik.MiToBo.datatypes.images.MTBImageManipulator)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageManipulator
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_impulator
        setWindowPosition(int, int, int, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageManipulator
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageManipulator.getSizeC()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageManipulator.getSizeT()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageManipulator.getSizeX()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageManipulator.getSizeY()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageManipulator.getSizeZ()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_impulator
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_posC
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_posT
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_posX
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_posY
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_posZ
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_sizeC
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_sizeT
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_sizeX
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_sizeY
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.m_sizeZ
            --> java.lang.IndexOutOfBoundsException *
            --> java.lang.IndexOutOfBoundsException.IndexOutOfBoundsException(java.lang.String) *
            --> java.lang.String *
de.unihalle.informatik.MiToBo.enhance
    GammaCorrection
        --> java.lang.Object *
        GammaCorrection()
            --> java.lang.Object.Object() *
            <-- mtb_enhance.Correct_Gamma.run(ij.process.ImageProcessor)
        correctGamma(ij.process.ImageProcessor, double, int)
            --> ij.ImagePlus *
            --> ij.ImagePlus.ImagePlus(java.lang.String, ij.process.ImageProcessor) *
            --> ij.ImagePlus.getProcessor() *
            --> ij.ImagePlus.getStatistics() *
            --> ij.process.ImageProcessor *
            --> ij.process.ImageProcessor.applyTable(int[]) *
            --> ij.process.ImageStatistics *
            --> ij.process.ImageStatistics.histMax *
            --> java.lang.Math.pow(double, double) *
            --> java.lang.Math.round(double) *
            --> java.lang.String *
            <-- mtb_enhance.Correct_Gamma.run(ij.process.ImageProcessor)
    GammaCorrection3D
        --> java.lang.Object *
        GammaCorrection3D()
            --> java.lang.Object.Object() *
        correctGamma(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.duplicate()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeX()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeY()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeZ()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getType()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getValueInt(int, int, int, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.putValueInt(int, int, int, int, int, int)
            --> java.lang.Math.pow(double, double) *
    HistogramEqualization
        <-- de.unihalle.informatik.MiToBo.apps.cells2D.CellSegmentAlgos.voronoiTesselation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        <-- de.unihalle.informatik.MiToBo.enhance.HistogramEqualization$HistoEquParams.HistogramEqualization$HistoEquParams(de.unihalle.informatik.MiToBo.enhance.HistogramEqualization, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.enhance.HistogramEqualization$HistoEquParams.HistogramEqualization$HistoEquParams(de.unihalle.informatik.MiToBo.enhance.HistogramEqualization, de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.enhance.HistogramEqualization$HistoEquParams.this$0
        --> de.unihalle.informatik.MiToBo.meta.MTBOpBase
        <-- mtb_enhance.Histogram_Equalize.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        HistogramEqualization()
            <-- de.unihalle.informatik.MiToBo.apps.cells2D.CellSegmentAlgos.voronoiTesselation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            --> de.unihalle.informatik.MiToBo.meta.MTBOpBase.MTBOpBase()
            <-- mtb_enhance.Histogram_Equalize.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        equalizeHisto(de.unihalle.informatik.MiToBo.datatypes.Histogram)
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(int[])
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.getData()
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.getSize()
            --> de.unihalle.informatik.MiToBo.enhance.HistogramEqualization.getTransferFunktion(de.unihalle.informatik.MiToBo.datatypes.Histogram)
        equalizeImageHisto(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.getMaxValueBin()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.createMTBImage(int, int, int, int, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeX()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeY()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeZ()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getValueInt(int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.putValueInt(int, int, int, int, int, int)
            --> de.unihalle.informatik.MiToBo.enhance.HistogramEqualization.getTransferFunktion(de.unihalle.informatik.MiToBo.datatypes.Histogram)
            <-- de.unihalle.informatik.MiToBo.enhance.HistogramEqualization.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        equalizeImageHisto(ij.process.ImageProcessor)
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(ij.process.ImageProcessor)
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.getMaxValueBin()
            --> de.unihalle.informatik.MiToBo.enhance.HistogramEqualization.getTransferFunktion(de.unihalle.informatik.MiToBo.datatypes.Histogram)
            --> ij.ImagePlus *
            --> ij.ImagePlus.getProcessor() *
            --> ij.gui.NewImage.createByteImage(java.lang.String, int, int, int, int) *
            --> ij.gui.NewImage.createShortImage(java.lang.String, int, int, int, int) *
            --> ij.process.ImageProcessor *
            --> ij.process.ImageProcessor.getHeight() *
            --> ij.process.ImageProcessor.getPixel(int, int) *
            --> ij.process.ImageProcessor.getWidth() *
            --> ij.process.ImageProcessor.putPixel(int, int, int) *
            --> java.lang.String *
        getMetaParams()
            --> java.util.LinkedList *
            --> java.util.LinkedList.LinkedList() *
        getTransferFunktion(de.unihalle.informatik.MiToBo.datatypes.Histogram)
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.getData()
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.getLargestNonEmptyBin()
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.getSize()
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.normalize()
            <-- de.unihalle.informatik.MiToBo.enhance.HistogramEqualization.equalizeHisto(de.unihalle.informatik.MiToBo.datatypes.Histogram)
            <-- de.unihalle.informatik.MiToBo.enhance.HistogramEqualization.equalizeImageHisto(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.enhance.HistogramEqualization.equalizeImageHisto(ij.process.ImageProcessor)
        operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.enhance.HistogramEqualization$HistoEquParams
            --> de.unihalle.informatik.MiToBo.enhance.HistogramEqualization$HistoEquParams.getInputImage()
            --> de.unihalle.informatik.MiToBo.enhance.HistogramEqualization$HistoEquParams.setResultImage(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> de.unihalle.informatik.MiToBo.enhance.HistogramEqualization.equalizeImageHisto(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams
        runOp(de.unihalle.informatik.MiToBo.meta.MTBOpParams) *
            <-- de.unihalle.informatik.MiToBo.apps.cells2D.CellSegmentAlgos.voronoiTesselation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            <-- mtb_enhance.Histogram_Equalize.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
    HistogramEqualization$HistoEquParams
        <-- de.unihalle.informatik.MiToBo.enhance.HistogramEqualization.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        --> de.unihalle.informatik.MiToBo.meta.MTBOpParams
        HistogramEqualization$HistoEquParams(de.unihalle.informatik.MiToBo.enhance.HistogramEqualization, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.apps.cells2D.CellSegmentAlgos.voronoiTesselation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.enhance.HistogramEqualization
            --> de.unihalle.informatik.MiToBo.enhance.HistogramEqualization$HistoEquParams.setParameter(java.lang.String, java.lang.Object) *
            --> de.unihalle.informatik.MiToBo.enhance.HistogramEqualization$HistoEquParams.this$0
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams.MTBOpParams()
            --> java.lang.Object *
            --> java.lang.String *
        HistogramEqualization$HistoEquParams(de.unihalle.informatik.MiToBo.enhance.HistogramEqualization, de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.enhance.HistogramEqualization
            --> de.unihalle.informatik.MiToBo.enhance.HistogramEqualization$HistoEquParams.setParameter(java.lang.String, java.lang.Object) *
            --> de.unihalle.informatik.MiToBo.enhance.HistogramEqualization$HistoEquParams.this$0
            --> de.unihalle.informatik.MiToBo.meta.MTBMetaData
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams.MTBOpParams(de.unihalle.informatik.MiToBo.meta.MTBMetaData)
            --> java.lang.Object *
            --> java.lang.String *
            <-- mtb_enhance.Histogram_Equalize.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        getInputImage()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.enhance.HistogramEqualization$HistoEquParams.getParameter(java.lang.String) *
            <-- de.unihalle.informatik.MiToBo.enhance.HistogramEqualization.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            --> java.lang.Object *
            --> java.lang.String *
        getParameter(java.lang.String) *
            <-- de.unihalle.informatik.MiToBo.enhance.HistogramEqualization$HistoEquParams.getInputImage()
            <-- de.unihalle.informatik.MiToBo.enhance.HistogramEqualization$HistoEquParams.getResultImage()
        getResultImage()
            <-- de.unihalle.informatik.MiToBo.apps.cells2D.CellSegmentAlgos.voronoiTesselation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.enhance.HistogramEqualization$HistoEquParams.getParameter(java.lang.String) *
            --> java.lang.Object *
            --> java.lang.String *
            <-- mtb_enhance.Histogram_Equalize.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        setParameter(java.lang.String, java.lang.Object) *
            <-- de.unihalle.informatik.MiToBo.enhance.HistogramEqualization$HistoEquParams.HistogramEqualization$HistoEquParams(de.unihalle.informatik.MiToBo.enhance.HistogramEqualization, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.enhance.HistogramEqualization$HistoEquParams.HistogramEqualization$HistoEquParams(de.unihalle.informatik.MiToBo.enhance.HistogramEqualization, de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.enhance.HistogramEqualization$HistoEquParams.setResultImage(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        setResultImage(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.enhance.HistogramEqualization$HistoEquParams.setParameter(java.lang.String, java.lang.Object) *
            <-- de.unihalle.informatik.MiToBo.enhance.HistogramEqualization.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            --> java.lang.Object *
            --> java.lang.String *
        this$0
            --> de.unihalle.informatik.MiToBo.enhance.HistogramEqualization
            <-- de.unihalle.informatik.MiToBo.enhance.HistogramEqualization$HistoEquParams.HistogramEqualization$HistoEquParams(de.unihalle.informatik.MiToBo.enhance.HistogramEqualization, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.enhance.HistogramEqualization$HistoEquParams.HistogramEqualization$HistoEquParams(de.unihalle.informatik.MiToBo.enhance.HistogramEqualization, de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
de.unihalle.informatik.MiToBo.fields.gradient
    ImgGradient
        --> java.lang.Object *
        ImgGradient()
            --> java.lang.Object.Object() *
de.unihalle.informatik.MiToBo.fields.gvf
    ImgGVF
        --> java.lang.Object *
        ImgGVF()
            --> java.lang.Object.Object() *
de.unihalle.informatik.MiToBo.filters.linear
    SymDerivationX
        --> java.lang.Object *
        SymDerivationX()
            --> java.lang.Object.Object() *
    SymDerivationY
        --> java.lang.Object *
        SymDerivationY()
            --> java.lang.Object.Object() *
de.unihalle.informatik.MiToBo.filters.nonlinear
    RankOperator
        --> de.unihalle.informatik.MiToBo.meta.MTBOpBase
        --> loci.formats.StatusReporter *
        RankOperator()
            --> de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.m_statusListeners
            --> de.unihalle.informatik.MiToBo.meta.MTBOpBase.MTBOpBase()
            --> java.util.Vector *
            --> java.util.Vector.Vector(int) *
            <-- mtb_filters.Rank_Operator.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        addStatusListener(loci.formats.StatusListener)
            --> de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.m_statusListeners
            --> java.lang.Object *
            --> java.util.Vector *
            --> java.util.Vector.add(java.lang.Object) *
            --> loci.formats.StatusListener *
            <-- mtb_filters.Rank_Operator.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        fireStatusEvent(int, int, java.lang.String)
            --> de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.m_statusListeners
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.rankOp(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, int, boolean, boolean, boolean, boolean, boolean)
            --> java.lang.Object *
            --> java.lang.String *
            --> java.util.Vector *
            --> java.util.Vector.get(int) *
            --> java.util.Vector.size() *
            --> loci.formats.StatusEvent *
            --> loci.formats.StatusEvent.StatusEvent(int, int, java.lang.String) *
            --> loci.formats.StatusListener *
            --> loci.formats.StatusListener.statusUpdated(loci.formats.StatusEvent) *
        getMetaParams()
            --> java.lang.Object *
            --> java.util.LinkedList *
            --> java.util.LinkedList.LinkedList() *
            --> java.util.LinkedList.add(java.lang.Object) *
        getStatusListeners()
            --> de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.m_statusListeners
            --> java.lang.Object *
            --> java.util.Vector *
            --> java.util.Vector.size() *
            --> java.util.Vector.toArray() *
            --> loci.formats.StatusListener *
            --> loci.formats.StatusListener[] *
        m_idx
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.rankOp(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, int, boolean, boolean, boolean, boolean, boolean)
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.rankedValueAt(int, int, int, int, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double[])
        m_rC
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.rankOp(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, int, boolean, boolean, boolean, boolean, boolean)
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.rankedValueAt(int, int, int, int, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double[])
        m_rT
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.rankOp(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, int, boolean, boolean, boolean, boolean, boolean)
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.rankedValueAt(int, int, int, int, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double[])
        m_rX
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.rankOp(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, int, boolean, boolean, boolean, boolean, boolean)
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.rankedValueAt(int, int, int, int, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double[])
        m_rY
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.rankOp(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, int, boolean, boolean, boolean, boolean, boolean)
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.rankedValueAt(int, int, int, int, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double[])
        m_rZ
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.rankOp(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, int, boolean, boolean, boolean, boolean, boolean)
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.rankedValueAt(int, int, int, int, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double[])
        m_sizeC
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.rankOp(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, int, boolean, boolean, boolean, boolean, boolean)
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.rankedValueAt(int, int, int, int, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double[])
        m_sizeT
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.rankOp(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, int, boolean, boolean, boolean, boolean, boolean)
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.rankedValueAt(int, int, int, int, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double[])
        m_sizeX
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.rankOp(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, int, boolean, boolean, boolean, boolean, boolean)
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.rankedValueAt(int, int, int, int, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double[])
        m_sizeY
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.rankOp(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, int, boolean, boolean, boolean, boolean, boolean)
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.rankedValueAt(int, int, int, int, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double[])
        m_sizeZ
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.rankOp(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, int, boolean, boolean, boolean, boolean, boolean)
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.rankedValueAt(int, int, int, int, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double[])
        m_statusListeners
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.RankOperator()
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.addStatusListener(loci.formats.StatusListener)
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.fireStatusEvent(int, int, java.lang.String)
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.getStatusListeners()
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.removeStatusListener(loci.formats.StatusListener)
            --> java.util.Vector *
        operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.rankOp(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, int, boolean, boolean, boolean, boolean, boolean)
            --> de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams
            --> de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.getInputImage()
            --> de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.getMaskRadius()
            --> de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.getMode()
            --> de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.getUseDimCFlag()
            --> de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.getUseDimTFlag()
            --> de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.getUseDimXFlag()
            --> de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.getUseDimYFlag()
            --> de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.getUseDimZFlag()
            --> de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.setResultImage(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams
        rankOp(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, int, boolean, boolean, boolean, boolean, boolean)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.duplicate()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeC()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeT()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeX()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeY()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeZ()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.putValueDouble(int, int, int, int, int, double)
            --> de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.fireStatusEvent(int, int, java.lang.String)
            --> de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.m_idx
            --> de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.m_rC
            --> de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.m_rT
            --> de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.m_rX
            --> de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.m_rY
            --> de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.m_rZ
            --> de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.m_sizeC
            --> de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.m_sizeT
            --> de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.m_sizeX
            --> de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.m_sizeY
            --> de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.m_sizeZ
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            --> de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.rankedValueAt(int, int, int, int, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double[])
            --> java.lang.String *
        rankedValueAt(int, int, int, int, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double[])
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getValueDouble(int, int, int, int, int)
            --> de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.m_idx
            --> de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.m_rC
            --> de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.m_rT
            --> de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.m_rX
            --> de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.m_rY
            --> de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.m_rZ
            --> de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.m_sizeC
            --> de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.m_sizeT
            --> de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.m_sizeX
            --> de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.m_sizeY
            --> de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.m_sizeZ
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.rankOp(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, int, boolean, boolean, boolean, boolean, boolean)
            --> java.util.Arrays.sort(double[]) *
        removeStatusListener(loci.formats.StatusListener)
            --> de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.m_statusListeners
            --> java.lang.Object *
            --> java.util.Vector *
            --> java.util.Vector.remove(java.lang.Object) *
            --> loci.formats.StatusListener *
        runOp(de.unihalle.informatik.MiToBo.meta.MTBOpParams) *
            <-- mtb_filters.Rank_Operator.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
    RankOperatorParams
        <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        --> de.unihalle.informatik.MiToBo.meta.MTBOpParams
        <-- mtb_filters.Rank_Operator.parameterDialog()
        <-- mtb_filters.Rank_Operator.run(ij.process.ImageProcessor)
        RankOperatorParams(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.setParameter(java.lang.String, java.lang.Object) *
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams.MTBOpParams()
            --> java.lang.Boolean *
            --> java.lang.Boolean.valueOf(boolean) *
            --> java.lang.Integer *
            --> java.lang.Integer.valueOf(int) *
            --> java.lang.Object *
            --> java.lang.String *
        RankOperatorParams(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, int, boolean, boolean, boolean, boolean, boolean)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.setParameter(java.lang.String, java.lang.Object) *
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams.MTBOpParams()
            --> java.lang.Boolean *
            --> java.lang.Boolean.valueOf(boolean) *
            --> java.lang.Integer *
            --> java.lang.Integer.valueOf(int) *
            --> java.lang.Object *
            --> java.lang.String *
            <-- mtb_filters.Rank_Operator.parameterDialog()
        RankOperatorParams(de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.setParameter(java.lang.String, java.lang.Object) *
            --> de.unihalle.informatik.MiToBo.meta.MTBMetaData
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams.MTBOpParams(de.unihalle.informatik.MiToBo.meta.MTBMetaData)
            --> java.lang.Boolean *
            --> java.lang.Boolean.valueOf(boolean) *
            --> java.lang.Integer *
            --> java.lang.Integer.valueOf(int) *
            --> java.lang.Object *
            --> java.lang.String *
        RankOperatorParams(de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, int, boolean, boolean, boolean, boolean, boolean)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.setParameter(java.lang.String, java.lang.Object) *
            --> de.unihalle.informatik.MiToBo.meta.MTBMetaData
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams.MTBOpParams(de.unihalle.informatik.MiToBo.meta.MTBMetaData)
            --> java.lang.Boolean *
            --> java.lang.Boolean.valueOf(boolean) *
            --> java.lang.Integer *
            --> java.lang.Integer.valueOf(int) *
            --> java.lang.Object *
            --> java.lang.String *
        getInputImage()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            --> de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.getParameter(java.lang.String) *
            --> java.lang.Object *
            --> java.lang.String *
            <-- mtb_filters.Rank_Operator.run(ij.process.ImageProcessor)
        getMaskRadius()
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            --> de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.getParameter(java.lang.String) *
            --> java.lang.Integer *
            --> java.lang.Integer.intValue() *
            --> java.lang.Object *
            --> java.lang.String *
        getMetaParams()
            --> java.lang.Object *
            --> java.util.LinkedList *
            --> java.util.LinkedList.LinkedList() *
            --> java.util.LinkedList.add(java.lang.Object) *
        getMode()
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            --> de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.getParameter(java.lang.String) *
            --> java.lang.Integer *
            --> java.lang.Integer.intValue() *
            --> java.lang.Object *
            --> java.lang.String *
            <-- mtb_filters.Rank_Operator.run(ij.process.ImageProcessor)
        getParameter(java.lang.String) *
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.getInputImage()
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.getMaskRadius()
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.getMode()
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.getResultImage()
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.getUseDimCFlag()
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.getUseDimTFlag()
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.getUseDimXFlag()
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.getUseDimYFlag()
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.getUseDimZFlag()
        getResultImage()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.getParameter(java.lang.String) *
            --> java.lang.Object *
            --> java.lang.String *
            <-- mtb_filters.Rank_Operator.run(ij.process.ImageProcessor)
        getUseDimCFlag()
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            --> de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.getParameter(java.lang.String) *
            --> java.lang.Boolean *
            --> java.lang.Boolean.booleanValue() *
            --> java.lang.Object *
            --> java.lang.String *
        getUseDimTFlag()
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            --> de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.getParameter(java.lang.String) *
            --> java.lang.Boolean *
            --> java.lang.Boolean.booleanValue() *
            --> java.lang.Object *
            --> java.lang.String *
        getUseDimXFlag()
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            --> de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.getParameter(java.lang.String) *
            --> java.lang.Boolean *
            --> java.lang.Boolean.booleanValue() *
            --> java.lang.Object *
            --> java.lang.String *
        getUseDimYFlag()
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            --> de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.getParameter(java.lang.String) *
            --> java.lang.Boolean *
            --> java.lang.Boolean.booleanValue() *
            --> java.lang.Object *
            --> java.lang.String *
        getUseDimZFlag()
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            --> de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.getParameter(java.lang.String) *
            --> java.lang.Boolean *
            --> java.lang.Boolean.booleanValue() *
            --> java.lang.Object *
            --> java.lang.String *
        setMetaDataObject(de.unihalle.informatik.MiToBo.meta.MTBMetaData) *
            <-- mtb_filters.Rank_Operator.run(ij.process.ImageProcessor)
        setParameter(java.lang.String, java.lang.Object) *
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.RankOperatorParams(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, int)
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.RankOperatorParams(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, int, boolean, boolean, boolean, boolean, boolean)
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.RankOperatorParams(de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, int)
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.RankOperatorParams(de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, int, boolean, boolean, boolean, boolean, boolean)
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.setResultImage(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        setResultImage(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            --> de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.setParameter(java.lang.String, java.lang.Object) *
            --> java.lang.Object *
            --> java.lang.String *
de.unihalle.informatik.MiToBo.io.dirs
    DirectoryTree
        --> de.unihalle.informatik.MiToBo.datatypes.Tree
        DirectoryTree(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.applyToImageBatch(java.lang.String)
            --> de.unihalle.informatik.MiToBo.datatypes.Tree.Tree(de.unihalle.informatik.MiToBo.datatypes.TreeNodeData)
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNodeData
            --> de.unihalle.informatik.MiToBo.io.dirs.DirectoryTree.initFromDirectory()
            --> de.unihalle.informatik.MiToBo.io.dirs.DirectoryTree.mainpath
            --> de.unihalle.informatik.MiToBo.io.dirs.DirectoryTreeNodeData.DirectoryTreeNodeData(java.lang.String)
            --> java.lang.String *
        getFileList()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.applyToImageBatch(java.lang.String)
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNode
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNode.getChilds()
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNode.getData()
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNodeData
            --> de.unihalle.informatik.MiToBo.io.dirs.DirectoryTree.mainpath
            --> de.unihalle.informatik.MiToBo.io.dirs.DirectoryTree.root *
            --> de.unihalle.informatik.MiToBo.io.dirs.DirectoryTreeNodeData
            --> de.unihalle.informatik.MiToBo.io.dirs.DirectoryTreeNodeData.getFileList()
            --> de.unihalle.informatik.MiToBo.io.dirs.DirectoryTreeNodeData.getSubtreeFileList()
            --> java.lang.Object *
            --> java.lang.String *
            --> java.lang.String.valueOf(java.lang.Object) *
            --> java.lang.StringBuilder *
            --> java.lang.StringBuilder.StringBuilder(java.lang.String) *
            --> java.lang.StringBuilder.append(java.lang.String) *
            --> java.lang.StringBuilder.toString() *
            --> java.util.Vector *
            --> java.util.Vector.Vector() *
            --> java.util.Vector.add(java.lang.Object) *
            --> java.util.Vector.get(int) *
            --> java.util.Vector.size() *
        initFromDirectory()
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNode
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNode.addChild(de.unihalle.informatik.MiToBo.datatypes.TreeNode)
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNode.getData()
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNodeData
            <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTree.DirectoryTree(java.lang.String)
            --> de.unihalle.informatik.MiToBo.io.dirs.DirectoryTree.mainpath
            --> de.unihalle.informatik.MiToBo.io.dirs.DirectoryTree.root *
            --> de.unihalle.informatik.MiToBo.io.dirs.DirectoryTree.traverseSubdir(java.lang.String, java.lang.String)
            --> de.unihalle.informatik.MiToBo.io.dirs.DirectoryTreeNodeData
            --> de.unihalle.informatik.MiToBo.io.dirs.DirectoryTreeNodeData.addFile(java.lang.String)
            --> java.io.File.File(java.lang.String) *
            --> java.io.File.isDirectory() *
            --> java.io.File.list() *
            --> java.io.PrintStream *
            --> java.io.PrintStream.println(java.lang.String) *
            --> java.lang.Object *
            --> java.lang.String *
            --> java.lang.String.endsWith(java.lang.String) *
            --> java.lang.String.valueOf(java.lang.Object) *
            --> java.lang.StringBuilder *
            --> java.lang.StringBuilder.StringBuilder(java.lang.String) *
            --> java.lang.StringBuilder.append(java.lang.String) *
            --> java.lang.StringBuilder.toString() *
            --> java.lang.System.out *
        mainpath
            <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTree.DirectoryTree(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTree.getFileList()
            <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTree.initFromDirectory()
            --> java.lang.String *
        root *
            <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTree.getFileList()
            <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTree.initFromDirectory()
        traverseSubdir(java.lang.String, java.lang.String)
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNode
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNode.TreeNode(de.unihalle.informatik.MiToBo.datatypes.TreeNodeData)
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNode.addChild(de.unihalle.informatik.MiToBo.datatypes.TreeNode)
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNodeData
            <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTree.initFromDirectory()
            --> de.unihalle.informatik.MiToBo.io.dirs.DirectoryTreeNodeData.DirectoryTreeNodeData(java.lang.String)
            --> de.unihalle.informatik.MiToBo.io.dirs.DirectoryTreeNodeData.addFile(java.lang.String)
            --> java.io.File.File(java.lang.String) *
            --> java.io.File.isDirectory() *
            --> java.io.File.list() *
            --> java.lang.Object *
            --> java.lang.String *
            --> java.lang.String.endsWith(java.lang.String) *
            --> java.lang.String.valueOf(java.lang.Object) *
            --> java.lang.StringBuilder *
            --> java.lang.StringBuilder.StringBuilder(java.lang.String) *
            --> java.lang.StringBuilder.append(java.lang.String) *
            --> java.lang.StringBuilder.toString() *
    DirectoryTreeNodeData
        --> de.unihalle.informatik.MiToBo.datatypes.TreeNodeData
        <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTree.getFileList()
        <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTree.initFromDirectory()
        DirectoryTreeNodeData(java.lang.String)
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNodeData.TreeNodeData()
            <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTree.DirectoryTree(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTree.traverseSubdir(java.lang.String, java.lang.String)
            --> de.unihalle.informatik.MiToBo.io.dirs.DirectoryTreeNodeData.files
            --> de.unihalle.informatik.MiToBo.io.dirs.DirectoryTreeNodeData.path
            --> java.lang.String *
            --> java.util.Vector *
            --> java.util.Vector.Vector() *
        addFile(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTree.initFromDirectory()
            <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTree.traverseSubdir(java.lang.String, java.lang.String)
            --> de.unihalle.informatik.MiToBo.io.dirs.DirectoryTreeNodeData.files
            --> java.lang.Object *
            --> java.lang.String *
            --> java.util.Vector *
            --> java.util.Vector.add(java.lang.Object) *
        files
            <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTreeNodeData.DirectoryTreeNodeData(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTreeNodeData.addFile(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTreeNodeData.getFileList()
            <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTreeNodeData.getSubtreeFileList()
            <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTreeNodeData.printData()
            --> java.util.Vector *
        getFileList()
            <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTree.getFileList()
            --> de.unihalle.informatik.MiToBo.io.dirs.DirectoryTreeNodeData.files
            --> java.util.Vector *
        getPath()
            --> de.unihalle.informatik.MiToBo.io.dirs.DirectoryTreeNodeData.path
            --> java.lang.String *
        getSubtreeFileList()
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNode
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNode.getChilds()
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNode.getData()
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNodeData
            <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTree.getFileList()
            --> de.unihalle.informatik.MiToBo.io.dirs.DirectoryTreeNodeData.files
            --> de.unihalle.informatik.MiToBo.io.dirs.DirectoryTreeNodeData.node *
            --> de.unihalle.informatik.MiToBo.io.dirs.DirectoryTreeNodeData.path
            --> java.lang.Object *
            --> java.lang.String *
            --> java.lang.String.valueOf(java.lang.Object) *
            --> java.lang.StringBuilder *
            --> java.lang.StringBuilder.StringBuilder(java.lang.String) *
            --> java.lang.StringBuilder.append(java.lang.String) *
            --> java.lang.StringBuilder.toString() *
            --> java.util.Vector *
            --> java.util.Vector.Vector() *
            --> java.util.Vector.add(java.lang.Object) *
            --> java.util.Vector.get(int) *
            --> java.util.Vector.size() *
        node *
            <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTreeNodeData.getSubtreeFileList()
            <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTreeNodeData.setNode(de.unihalle.informatik.MiToBo.datatypes.TreeNode)
        path
            <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTreeNodeData.DirectoryTreeNodeData(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTreeNodeData.getPath()
            <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTreeNodeData.getSubtreeFileList()
            <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTreeNodeData.printData()
            <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTreeNodeData.setPath(java.lang.String)
            --> java.lang.String *
        printData()
            --> de.unihalle.informatik.MiToBo.io.dirs.DirectoryTreeNodeData.files
            --> de.unihalle.informatik.MiToBo.io.dirs.DirectoryTreeNodeData.path
            --> java.io.PrintStream *
            --> java.io.PrintStream.println(java.lang.String) *
            --> java.lang.Object *
            --> java.lang.String *
            --> java.lang.StringBuilder *
            --> java.lang.StringBuilder.StringBuilder(java.lang.String) *
            --> java.lang.StringBuilder.append(java.lang.String) *
            --> java.lang.StringBuilder.toString() *
            --> java.lang.System.out *
            --> java.util.Vector *
            --> java.util.Vector.get(int) *
            --> java.util.Vector.size() *
        setNode(de.unihalle.informatik.MiToBo.datatypes.TreeNode)
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNode
            --> de.unihalle.informatik.MiToBo.io.dirs.DirectoryTreeNodeData.node *
        setPath(java.lang.String)
            --> de.unihalle.informatik.MiToBo.io.dirs.DirectoryTreeNodeData.path
            --> java.lang.String *
de.unihalle.informatik.MiToBo.io.files
    ImageFilter
        --> javax.swing.filechooser.FileFilter *
        ImageFilter()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
            --> de.unihalle.informatik.MiToBo.io.files.ImageFilter.ext
            --> de.unihalle.informatik.MiToBo.io.files.ImageFilter.gif
            --> de.unihalle.informatik.MiToBo.io.files.ImageFilter.jpeg
            --> de.unihalle.informatik.MiToBo.io.files.ImageFilter.jpg
            --> de.unihalle.informatik.MiToBo.io.files.ImageFilter.name
            --> de.unihalle.informatik.MiToBo.io.files.ImageFilter.png
            --> de.unihalle.informatik.MiToBo.io.files.ImageFilter.tif
            --> de.unihalle.informatik.MiToBo.io.files.ImageFilter.tiff
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.examine()
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.saveFile(boolean)
            --> java.lang.String *
            --> javax.swing.filechooser.FileFilter.FileFilter() *
            <-- mtb_io.Open_Image.open()
            <-- mtb_io.Save_Image.save()
            <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
        accept(java.io.File)
            --> de.unihalle.informatik.MiToBo.io.files.ImageFilter.getExtension(java.io.File)
            --> de.unihalle.informatik.MiToBo.io.files.ImageFilter.gif
            --> de.unihalle.informatik.MiToBo.io.files.ImageFilter.jpeg
            --> de.unihalle.informatik.MiToBo.io.files.ImageFilter.jpg
            --> de.unihalle.informatik.MiToBo.io.files.ImageFilter.png
            --> de.unihalle.informatik.MiToBo.io.files.ImageFilter.tif
            --> de.unihalle.informatik.MiToBo.io.files.ImageFilter.tiff
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.examine()
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.saveFile(boolean)
            --> java.io.File *
            --> java.io.File.isDirectory() *
            --> java.lang.Object *
            --> java.lang.String *
            --> java.lang.String.equals(java.lang.Object) *
            <-- mtb_io.Save_Image.save()
        acceptStacks(java.io.File)
            --> de.unihalle.informatik.MiToBo.io.files.ImageFilter.getExtension(java.io.File)
            --> de.unihalle.informatik.MiToBo.io.files.ImageFilter.gif
            --> de.unihalle.informatik.MiToBo.io.files.ImageFilter.jpeg
            --> de.unihalle.informatik.MiToBo.io.files.ImageFilter.jpg
            --> de.unihalle.informatik.MiToBo.io.files.ImageFilter.png
            --> de.unihalle.informatik.MiToBo.io.files.ImageFilter.tif
            --> de.unihalle.informatik.MiToBo.io.files.ImageFilter.tiff
            --> java.io.File *
            --> java.io.File.isDirectory() *
            --> java.lang.Object *
            --> java.lang.String *
            --> java.lang.String.equals(java.lang.Object) *
        ext
            <-- de.unihalle.informatik.MiToBo.io.files.ImageFilter.ImageFilter()
            <-- de.unihalle.informatik.MiToBo.io.files.ImageFilter.getExtension(java.io.File)
            --> java.lang.String *
        getDescription()
            --> java.lang.String *
        getExtension(java.io.File)
            <-- de.unihalle.informatik.MiToBo.io.files.ImageFilter.accept(java.io.File)
            <-- de.unihalle.informatik.MiToBo.io.files.ImageFilter.acceptStacks(java.io.File)
            --> de.unihalle.informatik.MiToBo.io.files.ImageFilter.ext
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.saveFile(boolean)
            --> java.io.File *
            --> java.io.File.getName() *
            --> java.lang.String *
            --> java.lang.String.lastIndexOf(int) *
            --> java.lang.String.length() *
            --> java.lang.String.substring(int) *
            --> java.lang.String.toLowerCase() *
        getName(java.io.File)
            --> de.unihalle.informatik.MiToBo.io.files.ImageFilter.name
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.saveFile(boolean)
            --> java.io.File *
            --> java.io.File.getName() *
            --> java.lang.String *
            --> java.lang.String.lastIndexOf(int) *
            --> java.lang.String.length() *
            --> java.lang.String.substring(int, int) *
            <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
        gif
            <-- de.unihalle.informatik.MiToBo.io.files.ImageFilter.ImageFilter()
            <-- de.unihalle.informatik.MiToBo.io.files.ImageFilter.accept(java.io.File)
            <-- de.unihalle.informatik.MiToBo.io.files.ImageFilter.acceptStacks(java.io.File)
            --> java.lang.String *
        jpeg
            <-- de.unihalle.informatik.MiToBo.io.files.ImageFilter.ImageFilter()
            <-- de.unihalle.informatik.MiToBo.io.files.ImageFilter.accept(java.io.File)
            <-- de.unihalle.informatik.MiToBo.io.files.ImageFilter.acceptStacks(java.io.File)
            --> java.lang.String *
        jpg
            <-- de.unihalle.informatik.MiToBo.io.files.ImageFilter.ImageFilter()
            <-- de.unihalle.informatik.MiToBo.io.files.ImageFilter.accept(java.io.File)
            <-- de.unihalle.informatik.MiToBo.io.files.ImageFilter.acceptStacks(java.io.File)
            --> java.lang.String *
        name
            <-- de.unihalle.informatik.MiToBo.io.files.ImageFilter.ImageFilter()
            <-- de.unihalle.informatik.MiToBo.io.files.ImageFilter.getName(java.io.File)
            --> java.lang.String *
        png
            <-- de.unihalle.informatik.MiToBo.io.files.ImageFilter.ImageFilter()
            <-- de.unihalle.informatik.MiToBo.io.files.ImageFilter.accept(java.io.File)
            <-- de.unihalle.informatik.MiToBo.io.files.ImageFilter.acceptStacks(java.io.File)
            --> java.lang.String *
        tif
            <-- de.unihalle.informatik.MiToBo.io.files.ImageFilter.ImageFilter()
            <-- de.unihalle.informatik.MiToBo.io.files.ImageFilter.accept(java.io.File)
            <-- de.unihalle.informatik.MiToBo.io.files.ImageFilter.acceptStacks(java.io.File)
            --> java.lang.String *
        tiff
            <-- de.unihalle.informatik.MiToBo.io.files.ImageFilter.ImageFilter()
            <-- de.unihalle.informatik.MiToBo.io.files.ImageFilter.accept(java.io.File)
            <-- de.unihalle.informatik.MiToBo.io.files.ImageFilter.acceptStacks(java.io.File)
            --> java.lang.String *
    ImgOpen
        --> java.lang.Object *
        ImgOpen()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.applyToImage()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.applyToImageBatch(java.lang.String)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.io.files.ImgOpen.channels
            --> de.unihalle.informatik.MiToBo.io.files.ImgOpen.iReader
            --> de.unihalle.informatik.MiToBo.io.files.ImgOpen.inputFile
            --> de.unihalle.informatik.MiToBo.io.files.ImgOpen.inputImage
            --> java.io.File *
            --> java.lang.Object.Object() *
            --> loci.plugins.util.ImagePlusReader *
        ImgOpen(java.io.File)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.io.files.ImgOpen.channels
            --> de.unihalle.informatik.MiToBo.io.files.ImgOpen.iReader
            --> de.unihalle.informatik.MiToBo.io.files.ImgOpen.inputFile
            --> de.unihalle.informatik.MiToBo.io.files.ImgOpen.inputImage
            --> java.io.File *
            --> java.lang.Object.Object() *
            --> loci.plugins.util.ImagePlusReader *
            <-- mtb_io.Open_Image.open()
            <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
        ImgOpen(java.lang.String, java.lang.String)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.applyToImageBatch(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.io.files.ImgOpen.channels
            --> de.unihalle.informatik.MiToBo.io.files.ImgOpen.iReader
            --> de.unihalle.informatik.MiToBo.io.files.ImgOpen.inputFile
            --> de.unihalle.informatik.MiToBo.io.files.ImgOpen.inputImage
            --> java.io.File *
            --> java.io.File.File(java.lang.String) *
            --> java.io.File.separator *
            --> java.lang.Object *
            --> java.lang.Object.Object() *
            --> java.lang.String *
            --> java.lang.String.valueOf(java.lang.Object) *
            --> java.lang.StringBuilder *
            --> java.lang.StringBuilder.StringBuilder(java.lang.String) *
            --> java.lang.StringBuilder.append(java.lang.String) *
            --> java.lang.StringBuilder.toString() *
            --> loci.plugins.util.ImagePlusReader *
        OPEN_ALL
        OPEN_SOME
        channels
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.ImgOpen()
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.ImgOpen(java.io.File)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.ImgOpen(java.lang.String, java.lang.String)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.examine()
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.numberOfChannels()
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.open()
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.open(int[])
        deleteBorder(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.applyToImage()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.applyToImageBatch(java.lang.String)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.createMTBImage(ij.ImagePlus)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getImagePlus()
            --> ij.ImagePlus *
            --> ij.ImagePlus.ImagePlus() *
            --> ij.ImagePlus.ImagePlus(java.lang.String, ij.ImageStack) *
            --> ij.ImagePlus.getHeight() *
            --> ij.ImagePlus.getProcessor() *
            --> ij.ImagePlus.getStack() *
            --> ij.ImagePlus.getStackSize() *
            --> ij.ImagePlus.getTitle() *
            --> ij.ImagePlus.getType() *
            --> ij.ImagePlus.getWidth() *
            --> ij.ImageStack *
            --> ij.ImageStack.ImageStack(int, int) *
            --> ij.ImageStack.addSlice(java.lang.String, ij.process.ImageProcessor) *
            --> ij.ImageStack.getProcessor(int) *
            --> ij.gui.NewImage.createByteImage(java.lang.String, int, int, int, int) *
            --> ij.gui.NewImage.createFloatImage(java.lang.String, int, int, int, int) *
            --> ij.gui.NewImage.createRGBImage(java.lang.String, int, int, int, int) *
            --> ij.gui.NewImage.createShortImage(java.lang.String, int, int, int, int) *
            --> ij.process.ImageProcessor *
            --> ij.process.ImageProcessor.getPixel(int, int) *
            --> ij.process.ImageProcessor.putPixelValue(int, int, double) *
            --> java.io.File.File(java.lang.String) *
            --> java.io.File.getName() *
            --> java.io.PrintStream *
            --> java.io.PrintStream.println(java.lang.String) *
            --> java.lang.Math.floor(double) *
            --> java.lang.String *
            --> java.lang.StringBuilder *
            --> java.lang.StringBuilder.StringBuilder(java.lang.String) *
            --> java.lang.StringBuilder.append(int) *
            --> java.lang.StringBuilder.append(java.lang.String) *
            --> java.lang.StringBuilder.toString() *
            --> java.lang.System.out *
            <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
        examine()
            --> de.unihalle.informatik.MiToBo.io.files.ImageFilter.ImageFilter()
            --> de.unihalle.informatik.MiToBo.io.files.ImageFilter.accept(java.io.File)
            --> de.unihalle.informatik.MiToBo.io.files.ImgOpen.channels
            --> de.unihalle.informatik.MiToBo.io.files.ImgOpen.height
            --> de.unihalle.informatik.MiToBo.io.files.ImgOpen.iReader
            --> de.unihalle.informatik.MiToBo.io.files.ImgOpen.inputFile
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.open()
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.open(int[])
            --> de.unihalle.informatik.MiToBo.io.files.ImgOpen.width
            --> ij.IJ.showStatus(java.lang.String) *
            --> java.io.File *
            --> java.io.File.getName() *
            --> java.io.File.toString() *
            --> java.io.IOException *
            --> java.io.IOException.getMessage() *
            --> java.io.PrintStream *
            --> java.io.PrintStream.println(java.lang.String) *
            --> java.lang.String *
            --> java.lang.StringBuilder *
            --> java.lang.StringBuilder.StringBuilder(java.lang.String) *
            --> java.lang.StringBuilder.append(java.lang.String) *
            --> java.lang.StringBuilder.toString() *
            --> java.lang.System.out *
            --> loci.formats.ChannelSeparator.ChannelSeparator(loci.formats.IFormatReader) *
            --> loci.formats.FormatException *
            --> loci.formats.FormatException.getMessage() *
            --> loci.formats.IFormatReader *
            --> loci.formats.ImageReader *
            --> loci.plugins.util.ImagePlusReader *
            --> loci.plugins.util.ImagePlusReader.ImagePlusReader(loci.formats.IFormatReader) *
            --> loci.plugins.util.ImagePlusReader.getImageCount() *
            --> loci.plugins.util.ImagePlusReader.getSizeX() *
            --> loci.plugins.util.ImagePlusReader.getSizeY() *
            --> loci.plugins.util.ImagePlusReader.makeImageReader() *
            --> loci.plugins.util.ImagePlusReader.setId(java.lang.String) *
        height
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.examine()
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.open()
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.open(int[])
        iReader
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.ImgOpen()
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.ImgOpen(java.io.File)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.ImgOpen(java.lang.String, java.lang.String)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.examine()
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.open()
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.open(int[])
            --> loci.plugins.util.ImagePlusReader *
        inputFile
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.ImgOpen()
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.ImgOpen(java.io.File)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.ImgOpen(java.lang.String, java.lang.String)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.examine()
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.open()
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.open(int[])
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.setFile(java.io.File)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.setFile(java.lang.String, java.lang.String)
            --> java.io.File *
        inputImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.ImgOpen()
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.ImgOpen(java.io.File)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.ImgOpen(java.lang.String, java.lang.String)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.open()
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.open(int[])
        numberOfChannels()
            --> de.unihalle.informatik.MiToBo.io.files.ImgOpen.channels
        open()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.applyToImageBatch(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.createMTBImage(ij.ImagePlus)
            --> de.unihalle.informatik.MiToBo.io.files.ImgOpen.channels
            --> de.unihalle.informatik.MiToBo.io.files.ImgOpen.examine()
            --> de.unihalle.informatik.MiToBo.io.files.ImgOpen.height
            --> de.unihalle.informatik.MiToBo.io.files.ImgOpen.iReader
            --> de.unihalle.informatik.MiToBo.io.files.ImgOpen.inputFile
            --> de.unihalle.informatik.MiToBo.io.files.ImgOpen.inputImage
            --> de.unihalle.informatik.MiToBo.io.files.ImgOpen.width
            --> ij.ImagePlus *
            --> ij.ImagePlus.ImagePlus(java.lang.String, ij.ImageStack) *
            --> ij.ImagePlus.ImagePlus(java.lang.String, ij.process.ImageProcessor) *
            --> ij.ImagePlus.getProcessor() *
            --> ij.ImageStack *
            --> ij.ImageStack.ImageStack() *
            --> ij.ImageStack.ImageStack(int, int) *
            --> ij.ImageStack.addSlice(java.lang.String, ij.process.ImageProcessor) *
            --> ij.process.ImageProcessor *
            --> java.io.File *
            --> java.io.File.getName() *
            --> java.io.File.toString() *
            --> java.io.IOException *
            --> java.io.IOException.getMessage() *
            --> java.io.PrintStream *
            --> java.io.PrintStream.println(java.lang.String) *
            --> java.lang.String *
            --> java.lang.StringBuilder *
            --> java.lang.StringBuilder.StringBuilder(java.lang.String) *
            --> java.lang.StringBuilder.append(int) *
            --> java.lang.StringBuilder.append(java.lang.String) *
            --> java.lang.StringBuilder.toString() *
            --> java.lang.System.out *
            --> loci.formats.FormatException *
            --> loci.formats.FormatException.getMessage() *
            --> loci.plugins.util.ImagePlusReader *
            --> loci.plugins.util.ImagePlusReader.openProcessors(int) *
            <-- mtb_io.Open_Image.open()
            <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
        open(int[])
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.createMTBImage(ij.ImagePlus)
            --> de.unihalle.informatik.MiToBo.io.files.ImgOpen.channels
            --> de.unihalle.informatik.MiToBo.io.files.ImgOpen.examine()
            --> de.unihalle.informatik.MiToBo.io.files.ImgOpen.height
            --> de.unihalle.informatik.MiToBo.io.files.ImgOpen.iReader
            --> de.unihalle.informatik.MiToBo.io.files.ImgOpen.inputFile
            --> de.unihalle.informatik.MiToBo.io.files.ImgOpen.inputImage
            --> de.unihalle.informatik.MiToBo.io.files.ImgOpen.width
            --> ij.ImagePlus *
            --> ij.ImagePlus.ImagePlus(java.lang.String, ij.ImageStack) *
            --> ij.ImagePlus.ImagePlus(java.lang.String, ij.process.ImageProcessor) *
            --> ij.ImagePlus.getProcessor() *
            --> ij.ImageStack *
            --> ij.ImageStack.ImageStack() *
            --> ij.ImageStack.ImageStack(int, int) *
            --> ij.ImageStack.addSlice(java.lang.String, ij.process.ImageProcessor) *
            --> ij.process.ImageProcessor *
            --> java.io.File *
            --> java.io.File.getName() *
            --> java.io.File.toString() *
            --> java.io.IOException *
            --> java.io.IOException.getMessage() *
            --> java.io.PrintStream *
            --> java.io.PrintStream.println(java.lang.String) *
            --> java.lang.Object *
            --> java.lang.String *
            --> java.lang.String.length() *
            --> java.lang.String.substring(int, int) *
            --> java.lang.String.valueOf(java.lang.Object) *
            --> java.lang.StringBuilder *
            --> java.lang.StringBuilder.StringBuilder(java.lang.String) *
            --> java.lang.StringBuilder.append(int) *
            --> java.lang.StringBuilder.append(java.lang.String) *
            --> java.lang.StringBuilder.toString() *
            --> java.lang.System.out *
            --> loci.formats.FormatException *
            --> loci.formats.FormatException.getMessage() *
            --> loci.plugins.util.ImagePlusReader *
            --> loci.plugins.util.ImagePlusReader.openProcessors(int) *
        setFile(java.io.File)
            --> de.unihalle.informatik.MiToBo.io.files.ImgOpen.inputFile
            --> java.io.File *
        setFile(java.lang.String, java.lang.String)
            --> de.unihalle.informatik.MiToBo.io.files.ImgOpen.inputFile
            --> java.io.File *
            --> java.io.File.File(java.lang.String) *
            --> java.io.File.separator *
            --> java.lang.Object *
            --> java.lang.String *
            --> java.lang.String.valueOf(java.lang.Object) *
            --> java.lang.StringBuilder *
            --> java.lang.StringBuilder.StringBuilder(java.lang.String) *
            --> java.lang.StringBuilder.append(java.lang.String) *
            --> java.lang.StringBuilder.toString() *
        width
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.examine()
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.open()
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.open(int[])
    ImgSave
        --> java.lang.Object *
        ImgSave()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.io.files.ImgSave.gif
            --> de.unihalle.informatik.MiToBo.io.files.ImgSave.image
            --> de.unihalle.informatik.MiToBo.io.files.ImgSave.jpeg
            --> de.unihalle.informatik.MiToBo.io.files.ImgSave.jpg
            --> de.unihalle.informatik.MiToBo.io.files.ImgSave.meta
            --> de.unihalle.informatik.MiToBo.io.files.ImgSave.png
            --> de.unihalle.informatik.MiToBo.io.files.ImgSave.tif
            --> de.unihalle.informatik.MiToBo.io.files.ImgSave.tiff
            --> de.unihalle.informatik.MiToBo.meta.MTBMetaData
            --> java.lang.Object.Object() *
            --> java.lang.String *
        ImgSave(java.io.File, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.datatypes.Region2D.toMTBImageByte(java.lang.String, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.Snake.toMTBImage(java.lang.String, int, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.datatypes.Snake.toMTBImageByte(java.lang.String, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getMetaData()
            --> de.unihalle.informatik.MiToBo.io.files.ImgSave.file
            --> de.unihalle.informatik.MiToBo.io.files.ImgSave.gif
            --> de.unihalle.informatik.MiToBo.io.files.ImgSave.image
            --> de.unihalle.informatik.MiToBo.io.files.ImgSave.jpeg
            --> de.unihalle.informatik.MiToBo.io.files.ImgSave.jpg
            --> de.unihalle.informatik.MiToBo.io.files.ImgSave.meta
            --> de.unihalle.informatik.MiToBo.io.files.ImgSave.png
            --> de.unihalle.informatik.MiToBo.io.files.ImgSave.tif
            --> de.unihalle.informatik.MiToBo.io.files.ImgSave.tiff
            --> de.unihalle.informatik.MiToBo.meta.MTBMetaData
            --> java.io.File *
            --> java.lang.Object.Object() *
            --> java.lang.String *
            <-- mtb_io.Save_Image.save()
            <-- mtb_neurites.Neurit_Detector_2D.process()
        ImgSave(java.io.File, ij.ImagePlus)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.createMTBImage(ij.ImagePlus)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getMetaData()
            --> de.unihalle.informatik.MiToBo.io.files.ImgSave.file
            --> de.unihalle.informatik.MiToBo.io.files.ImgSave.gif
            --> de.unihalle.informatik.MiToBo.io.files.ImgSave.image
            --> de.unihalle.informatik.MiToBo.io.files.ImgSave.jpeg
            --> de.unihalle.informatik.MiToBo.io.files.ImgSave.jpg
            --> de.unihalle.informatik.MiToBo.io.files.ImgSave.meta
            --> de.unihalle.informatik.MiToBo.io.files.ImgSave.png
            --> de.unihalle.informatik.MiToBo.io.files.ImgSave.tif
            --> de.unihalle.informatik.MiToBo.io.files.ImgSave.tiff
            --> de.unihalle.informatik.MiToBo.meta.MTBMetaData
            --> ij.ImagePlus *
            --> java.io.File *
            --> java.lang.Object.Object() *
            --> java.lang.String *
        ImgSave(java.lang.String, java.lang.String, ij.ImagePlus)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.createMTBImage(ij.ImagePlus)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getMetaData()
            --> de.unihalle.informatik.MiToBo.io.files.ImgSave.file
            --> de.unihalle.informatik.MiToBo.io.files.ImgSave.gif
            --> de.unihalle.informatik.MiToBo.io.files.ImgSave.image
            --> de.unihalle.informatik.MiToBo.io.files.ImgSave.jpeg
            --> de.unihalle.informatik.MiToBo.io.files.ImgSave.jpg
            --> de.unihalle.informatik.MiToBo.io.files.ImgSave.meta
            --> de.unihalle.informatik.MiToBo.io.files.ImgSave.png
            --> de.unihalle.informatik.MiToBo.io.files.ImgSave.tif
            --> de.unihalle.informatik.MiToBo.io.files.ImgSave.tiff
            --> de.unihalle.informatik.MiToBo.meta.MTBMetaData
            --> ij.ImagePlus *
            --> java.io.File *
            --> java.io.File.File(java.lang.String) *
            --> java.io.File.separator *
            --> java.lang.Object *
            --> java.lang.Object.Object() *
            --> java.lang.String *
            --> java.lang.String.valueOf(java.lang.Object) *
            --> java.lang.StringBuilder *
            --> java.lang.StringBuilder.StringBuilder(java.lang.String) *
            --> java.lang.StringBuilder.append(java.lang.String) *
            --> java.lang.StringBuilder.toString() *
        ImgSave(java.lang.String, java.lang.String, java.lang.String, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getMetaData()
            --> de.unihalle.informatik.MiToBo.io.files.ImgSave.file
            --> de.unihalle.informatik.MiToBo.io.files.ImgSave.gif
            --> de.unihalle.informatik.MiToBo.io.files.ImgSave.image
            --> de.unihalle.informatik.MiToBo.io.files.ImgSave.jpeg
            --> de.unihalle.informatik.MiToBo.io.files.ImgSave.jpg
            --> de.unihalle.informatik.MiToBo.io.files.ImgSave.meta
            --> de.unihalle.informatik.MiToBo.io.files.ImgSave.png
            --> de.unihalle.informatik.MiToBo.io.files.ImgSave.tif
            --> de.unihalle.informatik.MiToBo.io.files.ImgSave.tiff
            --> de.unihalle.informatik.MiToBo.meta.MTBMetaData
            --> java.io.File *
            --> java.io.File.File(java.lang.String) *
            --> java.io.File.separator *
            --> java.lang.Object *
            --> java.lang.Object.Object() *
            --> java.lang.String *
            --> java.lang.String.valueOf(java.lang.Object) *
            --> java.lang.StringBuilder *
            --> java.lang.StringBuilder.StringBuilder(java.lang.String) *
            --> java.lang.StringBuilder.append(java.lang.String) *
            --> java.lang.StringBuilder.toString() *
        file
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.io.File, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.io.File, ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.lang.String, java.lang.String, ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.lang.String, java.lang.String, java.lang.String, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.getPath()
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.saveFile(boolean)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.setFile(java.lang.String, java.lang.String)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.setPath(java.io.File)
            --> java.io.File *
        getImage()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.io.files.ImgSave.image
        getMeta()
            --> de.unihalle.informatik.MiToBo.io.files.ImgSave.meta
            --> de.unihalle.informatik.MiToBo.meta.MTBMetaData
        getPath()
            --> de.unihalle.informatik.MiToBo.io.files.ImgSave.file
            --> java.io.File *
        gif
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave()
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.io.File, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.io.File, ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.lang.String, java.lang.String, ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.lang.String, java.lang.String, java.lang.String, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.saveFile(boolean)
            --> java.lang.String *
        image
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave()
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.io.File, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.io.File, ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.lang.String, java.lang.String, ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.lang.String, java.lang.String, java.lang.String, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.getImage()
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.saveFile(boolean)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.setImage(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.setImage(ij.ImagePlus)
        jpeg
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave()
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.io.File, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.io.File, ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.lang.String, java.lang.String, ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.lang.String, java.lang.String, java.lang.String, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.saveFile(boolean)
            --> java.lang.String *
        jpg
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave()
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.io.File, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.io.File, ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.lang.String, java.lang.String, ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.lang.String, java.lang.String, java.lang.String, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.saveFile(boolean)
            --> java.lang.String *
        meta
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave()
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.io.File, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.io.File, ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.lang.String, java.lang.String, ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.lang.String, java.lang.String, java.lang.String, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.getMeta()
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.saveFile(boolean)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.setMeta(de.unihalle.informatik.MiToBo.meta.MTBMetaData)
            --> de.unihalle.informatik.MiToBo.meta.MTBMetaData
        png
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave()
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.io.File, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.io.File, ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.lang.String, java.lang.String, ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.lang.String, java.lang.String, java.lang.String, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.saveFile(boolean)
            --> java.lang.String *
        saveFile(boolean)
            <-- de.unihalle.informatik.MiToBo.datatypes.Region2D.toMTBImageByte(java.lang.String, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.Snake.toMTBImage(java.lang.String, int, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.datatypes.Snake.toMTBImageByte(java.lang.String, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getImagePlus()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeStack()
            --> de.unihalle.informatik.MiToBo.io.files.ImageFilter.ImageFilter()
            --> de.unihalle.informatik.MiToBo.io.files.ImageFilter.accept(java.io.File)
            --> de.unihalle.informatik.MiToBo.io.files.ImageFilter.getExtension(java.io.File)
            --> de.unihalle.informatik.MiToBo.io.files.ImageFilter.getName(java.io.File)
            --> de.unihalle.informatik.MiToBo.io.files.ImgSave.file
            --> de.unihalle.informatik.MiToBo.io.files.ImgSave.gif
            --> de.unihalle.informatik.MiToBo.io.files.ImgSave.image
            --> de.unihalle.informatik.MiToBo.io.files.ImgSave.jpeg
            --> de.unihalle.informatik.MiToBo.io.files.ImgSave.jpg
            --> de.unihalle.informatik.MiToBo.io.files.ImgSave.meta
            --> de.unihalle.informatik.MiToBo.io.files.ImgSave.png
            --> de.unihalle.informatik.MiToBo.io.files.ImgSave.tif
            --> de.unihalle.informatik.MiToBo.io.files.ImgSave.tiff
            --> de.unihalle.informatik.MiToBo.meta.MTBMetaData
            --> de.unihalle.informatik.MiToBo.meta.MTBMetaData.writeToFile(java.lang.String)
            --> ij.ImagePlus *
            --> ij.io.FileSaver.FileSaver(ij.ImagePlus) *
            --> ij.io.FileSaver.saveAsGif(java.lang.String) *
            --> ij.io.FileSaver.saveAsJpeg(java.lang.String) *
            --> ij.io.FileSaver.saveAsPng(java.lang.String) *
            --> ij.io.FileSaver.saveAsTiff(java.lang.String) *
            --> ij.io.FileSaver.saveAsTiffStack(java.lang.String) *
            --> java.io.File *
            --> java.io.File.File(java.lang.String) *
            --> java.io.File.exists() *
            --> java.io.File.getParent() *
            --> java.io.File.separator *
            --> java.io.File.toString() *
            --> java.io.PrintStream *
            --> java.io.PrintStream.println(java.lang.String) *
            --> java.lang.Object *
            --> java.lang.String *
            --> java.lang.String.equals(java.lang.Object) *
            --> java.lang.String.valueOf(java.lang.Object) *
            --> java.lang.StringBuilder *
            --> java.lang.StringBuilder.StringBuilder(java.lang.String) *
            --> java.lang.StringBuilder.append(int) *
            --> java.lang.StringBuilder.append(java.lang.Object) *
            --> java.lang.StringBuilder.append(java.lang.String) *
            --> java.lang.StringBuilder.toString() *
            --> java.lang.System.out *
            <-- mtb_io.Save_Image.save()
            <-- mtb_neurites.Neurit_Detector_2D.process()
        setFile(java.lang.String, java.lang.String)
            --> de.unihalle.informatik.MiToBo.io.files.ImgSave.file
            --> java.io.File *
            --> java.io.File.File(java.lang.String) *
            --> java.io.File.separator *
            --> java.lang.Object *
            --> java.lang.String *
            --> java.lang.String.valueOf(java.lang.Object) *
            --> java.lang.StringBuilder *
            --> java.lang.StringBuilder.StringBuilder(java.lang.String) *
            --> java.lang.StringBuilder.append(java.lang.String) *
            --> java.lang.StringBuilder.toString() *
        setImage(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.io.files.ImgSave.image
        setImage(ij.ImagePlus)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.createMTBImage(ij.ImagePlus)
            --> de.unihalle.informatik.MiToBo.io.files.ImgSave.image
            --> ij.ImagePlus *
        setMeta(de.unihalle.informatik.MiToBo.meta.MTBMetaData)
            --> de.unihalle.informatik.MiToBo.io.files.ImgSave.meta
            --> de.unihalle.informatik.MiToBo.meta.MTBMetaData
        setPath(java.io.File)
            --> de.unihalle.informatik.MiToBo.io.files.ImgSave.file
            --> java.io.File *
        tif
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave()
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.io.File, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.io.File, ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.lang.String, java.lang.String, ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.lang.String, java.lang.String, java.lang.String, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.saveFile(boolean)
            --> java.lang.String *
        tiff
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave()
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.io.File, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.io.File, ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.lang.String, java.lang.String, ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.lang.String, java.lang.String, java.lang.String, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.saveFile(boolean)
            --> java.lang.String *
de.unihalle.informatik.MiToBo.meta
    CvsInfo
        --> java.lang.Object *
        CvsInfo()
            --> java.lang.Object.Object() *
        getCvsTag()
            --> de.unihalle.informatik.MiToBo.meta.CvsInfo.getCvsTag(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.meta.MTBOpParams.logToMetaDataObj_start(de.unihalle.informatik.MiToBo.meta.MTBOpBase)
            --> java.lang.String *
        getCvsTag(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.meta.CvsInfo.getCvsTag()
            --> java.io.BufferedReader.BufferedReader(java.io.Reader) *
            --> java.io.BufferedReader.readLine() *
            --> java.io.InputStream *
            --> java.io.InputStreamReader.InputStreamReader(java.io.InputStream) *
            --> java.io.PrintStream *
            --> java.io.PrintStream.println(java.lang.String) *
            --> java.io.Reader *
            --> java.lang.Class.getResourceAsStream(java.lang.String) *
            --> java.lang.Exception *
            --> java.lang.String *
            --> java.lang.StringBuilder *
            --> java.lang.StringBuilder.StringBuilder(java.lang.String) *
            --> java.lang.StringBuilder.append(java.lang.String) *
            --> java.lang.StringBuilder.toString() *
            --> java.lang.System.err *
    MTBMetaData
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$GranuleDetectorParams.GranuleDetectorAlgos$GranuleDetectorParams(de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos, de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$Subroutine)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.detectGranules_old(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.detectNuclei(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.detectPbodies(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.applyToImage()
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.MTBImage()
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.MTBImage(ij.ImagePlus)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getMetaData()
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.m_meta
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.setMetaData(de.unihalle.informatik.MiToBo.meta.MTBMetaData)
        <-- de.unihalle.informatik.MiToBo.enhance.HistogramEqualization$HistoEquParams.HistogramEqualization$HistoEquParams(de.unihalle.informatik.MiToBo.enhance.HistogramEqualization, de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.RankOperatorParams(de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, int)
        <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.RankOperatorParams(de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, int, boolean, boolean, boolean, boolean, boolean)
        <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave()
        <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.io.File, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.io.File, ij.ImagePlus)
        <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.lang.String, java.lang.String, ij.ImagePlus)
        <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.lang.String, java.lang.String, java.lang.String, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.getMeta()
        <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.meta
        <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.saveFile(boolean)
        <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.setMeta(de.unihalle.informatik.MiToBo.meta.MTBMetaData)
        <-- de.unihalle.informatik.MiToBo.meta.MTBOpBase.metaRef
        <-- de.unihalle.informatik.MiToBo.meta.MTBOpBase.runOp(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        <-- de.unihalle.informatik.MiToBo.meta.MTBOpBasePlugin.run(ij.process.ImageProcessor)
        <-- de.unihalle.informatik.MiToBo.meta.MTBOpParams.MTBOpParams()
        <-- de.unihalle.informatik.MiToBo.meta.MTBOpParams.MTBOpParams(de.unihalle.informatik.MiToBo.meta.MTBMetaData)
        <-- de.unihalle.informatik.MiToBo.meta.MTBOpParams.getMetaDataObject()
        <-- de.unihalle.informatik.MiToBo.meta.MTBOpParams.logToMetaDataObj_start(de.unihalle.informatik.MiToBo.meta.MTBOpBase)
        <-- de.unihalle.informatik.MiToBo.meta.MTBOpParams.logToMetaDataObj_stop()
        <-- de.unihalle.informatik.MiToBo.meta.MTBOpParams.metaObj
        <-- de.unihalle.informatik.MiToBo.meta.MTBOpParams.setMetaDataObject(de.unihalle.informatik.MiToBo.meta.MTBMetaData)
        <-- de.unihalle.informatik.MiToBo.morphology.HDomeTransform3DParams.HDomeTransform3DParams(de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double)
        <-- de.unihalle.informatik.MiToBo.morphology.ImgDilate$ImgDilateParams.ImgDilate$ImgDilateParams(de.unihalle.informatik.MiToBo.morphology.ImgDilate, de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
        <-- de.unihalle.informatik.MiToBo.morphology.ImgErode$ImgErodeParams.ImgErode$ImgErodeParams(de.unihalle.informatik.MiToBo.morphology.ImgErode, de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
        <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3DParams.LabelComponentsSequential3DParams(de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, boolean)
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu$OtsuParams.CalcGlobalThreshOtsu$OtsuParams(de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu, de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams.ImgThreshNiblack$NiblackParams(de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack, de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$Mode, double, double, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        --> java.lang.Cloneable *
        --> java.lang.Object *
        <-- mtb_demo.Demo_MTBOpBase_Plugin.run(ij.process.ImageProcessor)
        <-- mtb_enhance.Histogram_Equalize.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        <-- mtb_filters.Rank_Operator.run(ij.process.ImageProcessor)
        <-- mtb_morphology.CalcOtsuThreshold_Image.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        <-- mtb_morphology.CalcOtsuThreshold_Image.run(ij.process.ImageProcessor)
        <-- mtb_morphology.Dilate_Image.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        <-- mtb_morphology.Erode_Image.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        <-- mtb_morphology.HDomeTransform_3D.run(ij.process.ImageProcessor)
        <-- mtb_morphology.Threshold_Image_Niblack.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        <-- mtb_regions.Label_Components_Sequential_3D.run(ij.process.ImageProcessor)
        MTBMetaData()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.MTBImage()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.MTBImage(ij.ImagePlus)
            --> de.unihalle.informatik.MiToBo.meta.MTBMetaData.activePlugElement
            --> de.unihalle.informatik.MiToBo.meta.MTBMetaData.xmlDoc
            --> de.unihalle.informatik.MiToBo.meta.MTBMetaData.xmlElem
            <-- de.unihalle.informatik.MiToBo.meta.MTBOpParams.MTBOpParams()
            --> java.io.PrintStream *
            --> java.io.PrintStream.println(java.lang.String) *
            --> java.lang.Object.Object() *
            --> java.lang.String *
            --> java.lang.System.err *
            --> javax.xml.parsers.DocumentBuilder *
            --> javax.xml.parsers.DocumentBuilder.getDOMImplementation() *
            --> javax.xml.parsers.DocumentBuilderFactory *
            --> javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder() *
            --> javax.xml.parsers.DocumentBuilderFactory.newInstance() *
            --> javax.xml.parsers.ParserConfigurationException *
            <-- mtb_demo.Demo_MTBOpBase_Plugin.run(ij.process.ImageProcessor)
            --> org.w3c.dom.DOMImplementation *
            --> org.w3c.dom.DOMImplementation.createDocument(java.lang.String, java.lang.String, org.w3c.dom.DocumentType) *
            --> org.w3c.dom.DOMImplementation.createDocumentType(java.lang.String, java.lang.String, java.lang.String) *
            --> org.w3c.dom.Document *
            --> org.w3c.dom.Document.getDocumentElement() *
            --> org.w3c.dom.DocumentType *
            --> org.w3c.dom.Element *
        MTBMetaData(de.unihalle.informatik.MiToBo.meta.MTBMetaData)
            --> de.unihalle.informatik.MiToBo.meta.MTBMetaData.activePlugElement
            <-- de.unihalle.informatik.MiToBo.meta.MTBMetaData.clone()
            --> de.unihalle.informatik.MiToBo.meta.MTBMetaData.xmlDoc
            --> de.unihalle.informatik.MiToBo.meta.MTBMetaData.xmlElem
            --> java.lang.Object.Object() *
            --> org.w3c.dom.Document *
            --> org.w3c.dom.Document.cloneNode(boolean) *
            --> org.w3c.dom.Document.getDocumentElement() *
            --> org.w3c.dom.Element *
            --> org.w3c.dom.Node *
        activePlugElement
            <-- de.unihalle.informatik.MiToBo.meta.MTBMetaData.MTBMetaData()
            <-- de.unihalle.informatik.MiToBo.meta.MTBMetaData.MTBMetaData(de.unihalle.informatik.MiToBo.meta.MTBMetaData)
            <-- de.unihalle.informatik.MiToBo.meta.MTBMetaData.addNewTag(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.meta.MTBMetaData.closeTag()
            <-- de.unihalle.informatik.MiToBo.meta.MTBMetaData.setAttributeValue(java.lang.String, java.lang.String)
            <-- de.unihalle.informatik.MiToBo.meta.MTBMetaData.setTagText(java.lang.String)
            --> org.w3c.dom.Element *
        addNewTag(java.lang.String)
            --> de.unihalle.informatik.MiToBo.meta.MTBMetaData.activePlugElement
            --> de.unihalle.informatik.MiToBo.meta.MTBMetaData.xmlDoc
            <-- de.unihalle.informatik.MiToBo.meta.MTBOpParams.logToMetaDataObj_start(de.unihalle.informatik.MiToBo.meta.MTBOpBase)
            --> java.lang.String *
            --> org.w3c.dom.Document *
            --> org.w3c.dom.Document.createElement(java.lang.String) *
            --> org.w3c.dom.Element *
            --> org.w3c.dom.Element.appendChild(org.w3c.dom.Node) *
            --> org.w3c.dom.Node *
        clone()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.detectGranules_old(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.detectNuclei(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.detectPbodies(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> de.unihalle.informatik.MiToBo.meta.MTBMetaData.MTBMetaData(de.unihalle.informatik.MiToBo.meta.MTBMetaData)
            <-- de.unihalle.informatik.MiToBo.meta.MTBOpBasePlugin.run(ij.process.ImageProcessor)
            --> java.lang.Object *
            <-- mtb_filters.Rank_Operator.run(ij.process.ImageProcessor)
            <-- mtb_morphology.CalcOtsuThreshold_Image.run(ij.process.ImageProcessor)
            <-- mtb_morphology.HDomeTransform_3D.run(ij.process.ImageProcessor)
            <-- mtb_regions.Label_Components_Sequential_3D.run(ij.process.ImageProcessor)
        closeTag()
            --> de.unihalle.informatik.MiToBo.meta.MTBMetaData.activePlugElement
            <-- de.unihalle.informatik.MiToBo.meta.MTBOpParams.logToMetaDataObj_start(de.unihalle.informatik.MiToBo.meta.MTBOpBase)
            <-- de.unihalle.informatik.MiToBo.meta.MTBOpParams.logToMetaDataObj_stop()
            --> org.w3c.dom.Element *
            --> org.w3c.dom.Element.getParentNode() *
            --> org.w3c.dom.Node *
        readFromFile(java.lang.String)
            --> de.unihalle.informatik.MiToBo.meta.MTBMetaData.xmlDoc
            --> de.unihalle.informatik.MiToBo.meta.xml.MTBxmlIO.readFromFile(java.lang.String)
            --> java.lang.String *
            --> org.w3c.dom.Document *
        setAttributeValue(java.lang.String, java.lang.String)
            --> de.unihalle.informatik.MiToBo.meta.MTBMetaData.activePlugElement
            <-- de.unihalle.informatik.MiToBo.meta.MTBOpParams.logToMetaDataObj_start(de.unihalle.informatik.MiToBo.meta.MTBOpBase)
            --> java.lang.String *
            --> org.w3c.dom.Element *
            --> org.w3c.dom.Element.setAttribute(java.lang.String, java.lang.String) *
        setTagText(java.lang.String)
            --> de.unihalle.informatik.MiToBo.meta.MTBMetaData.activePlugElement
            --> java.lang.String *
            --> org.w3c.dom.Element *
            --> org.w3c.dom.Element.setTextContent(java.lang.String) *
        writeToFile(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.saveFile(boolean)
            --> de.unihalle.informatik.MiToBo.meta.MTBMetaData.xmlDoc
            --> de.unihalle.informatik.MiToBo.meta.xml.MTBxmlIO.saveToFile(org.w3c.dom.Document, java.lang.String)
            --> java.lang.String *
            <-- mtb_morphology.Dilate_Image.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            --> org.w3c.dom.Document *
        xmlDoc
            <-- de.unihalle.informatik.MiToBo.meta.MTBMetaData.MTBMetaData()
            <-- de.unihalle.informatik.MiToBo.meta.MTBMetaData.MTBMetaData(de.unihalle.informatik.MiToBo.meta.MTBMetaData)
            <-- de.unihalle.informatik.MiToBo.meta.MTBMetaData.addNewTag(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.meta.MTBMetaData.readFromFile(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.meta.MTBMetaData.writeToFile(java.lang.String)
            --> org.w3c.dom.Document *
        xmlElem
            <-- de.unihalle.informatik.MiToBo.meta.MTBMetaData.MTBMetaData()
            <-- de.unihalle.informatik.MiToBo.meta.MTBMetaData.MTBMetaData(de.unihalle.informatik.MiToBo.meta.MTBMetaData)
            --> org.w3c.dom.Element *
    MTBOpBase
        <-- de.unihalle.informatik.MiToBo.apps.cells2D.CellSegmentAlgos
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos
        <-- de.unihalle.informatik.MiToBo.enhance.HistogramEqualization
        <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator
        <-- de.unihalle.informatik.MiToBo.meta.MTBOpBasePlugin
        <-- de.unihalle.informatik.MiToBo.meta.MTBOpParams.logToMetaDataObj_start(de.unihalle.informatik.MiToBo.meta.MTBOpBase)
        <-- de.unihalle.informatik.MiToBo.morphology.HDomeTransform3D
        <-- de.unihalle.informatik.MiToBo.morphology.ImgDilate
        <-- de.unihalle.informatik.MiToBo.morphology.ImgErode
        <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3D
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack
        --> java.lang.Object *
        <-- mtb_demo.Demo_MTBOpBase_Plugin
        <-- mtb_filters.Rank_Operator
        <-- mtb_granules.Granule_Detector_2D
        <-- mtb_morphology.CalcOtsuThreshold_Image
        <-- mtb_morphology.HDomeTransform_3D
        <-- mtb_regions.Label_Components_Sequential_3D
        MTBOpBase()
            <-- de.unihalle.informatik.MiToBo.apps.cells2D.CellSegmentAlgos.CellSegmentAlgos()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.GranuleDetectorAlgos()
            <-- de.unihalle.informatik.MiToBo.enhance.HistogramEqualization.HistogramEqualization()
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.RankOperator()
            <-- de.unihalle.informatik.MiToBo.meta.MTBOpBasePlugin.MTBOpBasePlugin()
            <-- de.unihalle.informatik.MiToBo.morphology.HDomeTransform3D.HDomeTransform3D()
            <-- de.unihalle.informatik.MiToBo.morphology.ImgDilate.ImgDilate()
            <-- de.unihalle.informatik.MiToBo.morphology.ImgErode.ImgErode()
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3D.LabelComponentsSequential3D()
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu.CalcGlobalThreshOtsu()
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.ImgThreshNiblack()
            --> java.lang.Object.Object() *
            <-- mtb_demo.Demo_MTBOpBase_Plugin.Demo_MTBOpBase_Plugin()
            <-- mtb_filters.Rank_Operator.Rank_Operator()
            <-- mtb_granules.Granule_Detector_2D.Granule_Detector_2D()
            <-- mtb_morphology.CalcOtsuThreshold_Image.CalcOtsuThreshold_Image()
            <-- mtb_morphology.HDomeTransform_3D.HDomeTransform_3D()
            <-- mtb_regions.Label_Components_Sequential_3D.Label_Components_Sequential_3D()
        getMetaParams()
            <-- de.unihalle.informatik.MiToBo.meta.MTBOpParams.logToMetaDataObj_start(de.unihalle.informatik.MiToBo.meta.MTBOpBase)
            --> java.util.LinkedList *
        metaRef
            --> de.unihalle.informatik.MiToBo.meta.MTBMetaData
            <-- de.unihalle.informatik.MiToBo.meta.MTBOpBase.runOp(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            <-- de.unihalle.informatik.MiToBo.meta.MTBOpBase.runOp(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams
        runOp(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            --> de.unihalle.informatik.MiToBo.meta.MTBMetaData
            --> de.unihalle.informatik.MiToBo.meta.MTBOpBase.metaRef
            --> de.unihalle.informatik.MiToBo.meta.MTBOpBase.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams.getMetaDataObject()
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams.logToMetaDataObj_start(de.unihalle.informatik.MiToBo.meta.MTBOpBase)
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams.logToMetaDataObj_stop()
    MTBOpBasePlugin
        --> de.unihalle.informatik.MiToBo.meta.MTBOpBase
        --> ij.plugin.filter.PlugInFilter *
        <-- mtb_enhance.Histogram_Equalize
        <-- mtb_morphology.Dilate_Image
        <-- mtb_morphology.Erode_Image
        <-- mtb_morphology.Threshold_Image_Niblack
        MTBOpBasePlugin()
            --> de.unihalle.informatik.MiToBo.meta.MTBOpBase.MTBOpBase()
            <-- mtb_enhance.Histogram_Equalize.Histogram_Equalize()
            <-- mtb_morphology.Dilate_Image.Dilate_Image()
            <-- mtb_morphology.Erode_Image.Erode_Image()
            <-- mtb_morphology.Threshold_Image_Niblack.Threshold_Image_Niblack()
        getMetaParams()
            --> java.util.LinkedList *
            --> java.util.LinkedList.LinkedList() *
        inputImage
            <-- de.unihalle.informatik.MiToBo.meta.MTBOpBasePlugin.run(ij.process.ImageProcessor)
            <-- de.unihalle.informatik.MiToBo.meta.MTBOpBasePlugin.setup(java.lang.String, ij.ImagePlus)
            --> ij.ImagePlus *
        inputProc
            <-- de.unihalle.informatik.MiToBo.meta.MTBOpBasePlugin.run(ij.process.ImageProcessor)
            <-- de.unihalle.informatik.MiToBo.meta.MTBOpBasePlugin.setup(java.lang.String, ij.ImagePlus)
            --> ij.process.ImageProcessor *
        mtbInput
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            <-- de.unihalle.informatik.MiToBo.meta.MTBOpBasePlugin.run(ij.process.ImageProcessor)
        run(ij.process.ImageProcessor)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.createMTBImage(ij.ImagePlus)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getMetaData()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.setMetaData(de.unihalle.informatik.MiToBo.meta.MTBMetaData)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.show()
            --> de.unihalle.informatik.MiToBo.meta.MTBMetaData
            --> de.unihalle.informatik.MiToBo.meta.MTBMetaData.clone()
            --> de.unihalle.informatik.MiToBo.meta.MTBOpBasePlugin.inputImage
            --> de.unihalle.informatik.MiToBo.meta.MTBOpBasePlugin.inputProc
            --> de.unihalle.informatik.MiToBo.meta.MTBOpBasePlugin.mtbInput
            --> de.unihalle.informatik.MiToBo.meta.MTBOpBasePlugin.runOp(de.unihalle.informatik.MiToBo.meta.MTBOpParams) *
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams.MTBOpParams()
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams.getMetaDataObject()
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams.getParameter(java.lang.String)
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams.setMetaDataObject(de.unihalle.informatik.MiToBo.meta.MTBMetaData)
            --> ij.ImagePlus *
            --> ij.process.ImageProcessor *
            --> java.io.PrintStream *
            --> java.io.PrintStream.println(java.lang.String) *
            --> java.lang.Object *
            --> java.lang.String *
            --> java.lang.System.out *
        runOp(de.unihalle.informatik.MiToBo.meta.MTBOpParams) *
            <-- de.unihalle.informatik.MiToBo.meta.MTBOpBasePlugin.run(ij.process.ImageProcessor)
        setup(java.lang.String, ij.ImagePlus)
            --> de.unihalle.informatik.MiToBo.meta.MTBOpBasePlugin.inputImage
            --> de.unihalle.informatik.MiToBo.meta.MTBOpBasePlugin.inputProc
            --> ij.ImagePlus *
            --> ij.ImagePlus.getProcessor() *
            --> ij.process.ImageProcessor *
            --> java.lang.String *
            <-- mtb_enhance.Histogram_Equalize.setup(java.lang.String, ij.ImagePlus)
            <-- mtb_morphology.Dilate_Image.setup(java.lang.String, ij.ImagePlus)
            <-- mtb_morphology.Erode_Image.setup(java.lang.String, ij.ImagePlus)
            <-- mtb_morphology.Threshold_Image_Niblack.setup(java.lang.String, ij.ImagePlus)
    MTBOpParams
        <-- de.unihalle.informatik.MiToBo.apps.cells2D.CellSegmentAlgos.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        <-- de.unihalle.informatik.MiToBo.apps.cells2D.CellSegmentAlgos.voronoiTesselation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$GranuleDetectorParams
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.detectGranules_old(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.detectNuclei(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.enhance.HistogramEqualization$HistoEquParams
        <-- de.unihalle.informatik.MiToBo.enhance.HistogramEqualization.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams
        <-- de.unihalle.informatik.MiToBo.meta.MTBOpBase.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        <-- de.unihalle.informatik.MiToBo.meta.MTBOpBase.runOp(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        <-- de.unihalle.informatik.MiToBo.meta.MTBOpBasePlugin.run(ij.process.ImageProcessor)
        <-- de.unihalle.informatik.MiToBo.morphology.HDomeTransform3D.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        <-- de.unihalle.informatik.MiToBo.morphology.HDomeTransform3DParams
        <-- de.unihalle.informatik.MiToBo.morphology.ImgDilate$ImgDilateParams
        <-- de.unihalle.informatik.MiToBo.morphology.ImgDilate.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        <-- de.unihalle.informatik.MiToBo.morphology.ImgErode$ImgErodeParams
        <-- de.unihalle.informatik.MiToBo.morphology.ImgErode.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3D.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3DParams
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu$OtsuParams
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        --> java.lang.Object *
        <-- mtb_demo.Demo_MTBOpBase_Plugin.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        <-- mtb_demo.Demo_MTBOpBase_Plugin.parameterDialog()
        <-- mtb_demo.Demo_MTBOpBase_Plugin.run(ij.process.ImageProcessor)
        <-- mtb_enhance.Histogram_Equalize.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        <-- mtb_filters.Rank_Operator.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        <-- mtb_filters.Rank_Operator.run(ij.process.ImageProcessor)
        <-- mtb_granules.Cell_Segment_2D.run(ij.process.ImageProcessor)
        <-- mtb_granules.Granule_Detector_2D.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        <-- mtb_granules.Granule_Detector_2D.run(java.lang.String)
        <-- mtb_morphology.CalcOtsuThreshold_Image.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        <-- mtb_morphology.CalcOtsuThreshold_Image.run(ij.process.ImageProcessor)
        <-- mtb_morphology.Dilate_Image.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        <-- mtb_morphology.Erode_Image.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        <-- mtb_morphology.HDomeTransform_3D.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        <-- mtb_morphology.HDomeTransform_3D.run(ij.process.ImageProcessor)
        <-- mtb_morphology.Threshold_Image_Niblack.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
        <-- mtb_neurites.Neurit_Detector_2D.removeCellBody(de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        <-- mtb_regions.Label_Components_Sequential_3D.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        <-- mtb_regions.Label_Components_Sequential_3D.run(ij.process.ImageProcessor)
        MTBOpParams()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$GranuleDetectorParams.GranuleDetectorAlgos$GranuleDetectorParams(de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$Subroutine)
            <-- de.unihalle.informatik.MiToBo.enhance.HistogramEqualization$HistoEquParams.HistogramEqualization$HistoEquParams(de.unihalle.informatik.MiToBo.enhance.HistogramEqualization, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.RankOperatorParams(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, int)
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.RankOperatorParams(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, int, boolean, boolean, boolean, boolean, boolean)
            --> de.unihalle.informatik.MiToBo.meta.MTBMetaData
            --> de.unihalle.informatik.MiToBo.meta.MTBMetaData.MTBMetaData()
            <-- de.unihalle.informatik.MiToBo.meta.MTBOpBasePlugin.run(ij.process.ImageProcessor)
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams.metaObj
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams.paramTable
            <-- de.unihalle.informatik.MiToBo.morphology.HDomeTransform3DParams.HDomeTransform3DParams(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double)
            <-- de.unihalle.informatik.MiToBo.morphology.ImgDilate$ImgDilateParams.ImgDilate$ImgDilateParams(de.unihalle.informatik.MiToBo.morphology.ImgDilate, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            <-- de.unihalle.informatik.MiToBo.morphology.ImgErode$ImgErodeParams.ImgErode$ImgErodeParams(de.unihalle.informatik.MiToBo.morphology.ImgErode, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3DParams.LabelComponentsSequential3DParams(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, boolean)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu$OtsuParams.CalcGlobalThreshOtsu$OtsuParams(de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams.ImgThreshNiblack$NiblackParams(de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$Mode, double, double, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            --> java.lang.Object.Object() *
            --> java.util.Hashtable *
            --> java.util.Hashtable.Hashtable() *
            <-- mtb_demo.Demo_MTBOpBase_Plugin.parameterDialog()
            <-- mtb_granules.Granule_Detector_2D.run(java.lang.String)
            <-- mtb_morphology.CalcOtsuThreshold_Image.run(ij.process.ImageProcessor)
        MTBOpParams(de.unihalle.informatik.MiToBo.meta.MTBMetaData)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$GranuleDetectorParams.GranuleDetectorAlgos$GranuleDetectorParams(de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos, de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$Subroutine)
            <-- de.unihalle.informatik.MiToBo.enhance.HistogramEqualization$HistoEquParams.HistogramEqualization$HistoEquParams(de.unihalle.informatik.MiToBo.enhance.HistogramEqualization, de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.RankOperatorParams(de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, int)
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.RankOperatorParams(de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, int, boolean, boolean, boolean, boolean, boolean)
            --> de.unihalle.informatik.MiToBo.meta.MTBMetaData
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams.metaObj
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams.paramTable
            <-- de.unihalle.informatik.MiToBo.morphology.HDomeTransform3DParams.HDomeTransform3DParams(de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double)
            <-- de.unihalle.informatik.MiToBo.morphology.ImgDilate$ImgDilateParams.ImgDilate$ImgDilateParams(de.unihalle.informatik.MiToBo.morphology.ImgDilate, de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            <-- de.unihalle.informatik.MiToBo.morphology.ImgErode$ImgErodeParams.ImgErode$ImgErodeParams(de.unihalle.informatik.MiToBo.morphology.ImgErode, de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3DParams.LabelComponentsSequential3DParams(de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, boolean)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu$OtsuParams.CalcGlobalThreshOtsu$OtsuParams(de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu, de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams.ImgThreshNiblack$NiblackParams(de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack, de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$Mode, double, double, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            --> java.lang.Object.Object() *
            --> java.util.Hashtable *
            --> java.util.Hashtable.Hashtable() *
        getMetaDataObject()
            --> de.unihalle.informatik.MiToBo.meta.MTBMetaData
            <-- de.unihalle.informatik.MiToBo.meta.MTBOpBase.runOp(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            <-- de.unihalle.informatik.MiToBo.meta.MTBOpBasePlugin.run(ij.process.ImageProcessor)
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams.metaObj
            <-- mtb_enhance.Histogram_Equalize.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            <-- mtb_morphology.CalcOtsuThreshold_Image.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            <-- mtb_morphology.Dilate_Image.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            <-- mtb_morphology.Erode_Image.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            <-- mtb_morphology.Threshold_Image_Niblack.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        getParameter(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.meta.MTBOpBasePlugin.run(ij.process.ImageProcessor)
            <-- de.unihalle.informatik.MiToBo.meta.MTBOpParams.logToMetaDataObj_start(de.unihalle.informatik.MiToBo.meta.MTBOpBase)
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams.paramTable
            --> java.lang.Object *
            --> java.lang.String *
            --> java.util.Hashtable *
            --> java.util.Hashtable.get(java.lang.Object) *
            <-- mtb_demo.Demo_MTBOpBase_Plugin.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            <-- mtb_demo.Demo_MTBOpBase_Plugin.parameterDialog()
            <-- mtb_demo.Demo_MTBOpBase_Plugin.run(ij.process.ImageProcessor)
        logToMetaDataObj_start(de.unihalle.informatik.MiToBo.meta.MTBOpBase)
            --> de.unihalle.informatik.MiToBo.meta.CvsInfo.getCvsTag()
            --> de.unihalle.informatik.MiToBo.meta.MTBMetaData
            --> de.unihalle.informatik.MiToBo.meta.MTBMetaData.addNewTag(java.lang.String)
            --> de.unihalle.informatik.MiToBo.meta.MTBMetaData.closeTag()
            --> de.unihalle.informatik.MiToBo.meta.MTBMetaData.setAttributeValue(java.lang.String, java.lang.String)
            --> de.unihalle.informatik.MiToBo.meta.MTBOpBase
            --> de.unihalle.informatik.MiToBo.meta.MTBOpBase.getMetaParams()
            <-- de.unihalle.informatik.MiToBo.meta.MTBOpBase.runOp(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams.getParameter(java.lang.String)
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams.metaObj
            --> java.lang.Class *
            --> java.lang.Class.getName() *
            --> java.lang.Object *
            --> java.lang.Object.getClass() *
            --> java.lang.Object.toString() *
            --> java.lang.String *
            --> java.util.LinkedList *
            --> java.util.LinkedList.get(int) *
            --> java.util.LinkedList.size() *
            --> org.w3c.dom.Element *
        logToMetaDataObj_stop()
            --> de.unihalle.informatik.MiToBo.meta.MTBMetaData
            --> de.unihalle.informatik.MiToBo.meta.MTBMetaData.closeTag()
            <-- de.unihalle.informatik.MiToBo.meta.MTBOpBase.runOp(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams.metaObj
        metaObj
            --> de.unihalle.informatik.MiToBo.meta.MTBMetaData
            <-- de.unihalle.informatik.MiToBo.meta.MTBOpParams.MTBOpParams()
            <-- de.unihalle.informatik.MiToBo.meta.MTBOpParams.MTBOpParams(de.unihalle.informatik.MiToBo.meta.MTBMetaData)
            <-- de.unihalle.informatik.MiToBo.meta.MTBOpParams.getMetaDataObject()
            <-- de.unihalle.informatik.MiToBo.meta.MTBOpParams.logToMetaDataObj_start(de.unihalle.informatik.MiToBo.meta.MTBOpBase)
            <-- de.unihalle.informatik.MiToBo.meta.MTBOpParams.logToMetaDataObj_stop()
            <-- de.unihalle.informatik.MiToBo.meta.MTBOpParams.setMetaDataObject(de.unihalle.informatik.MiToBo.meta.MTBMetaData)
        paramTable
            <-- de.unihalle.informatik.MiToBo.meta.MTBOpParams.MTBOpParams()
            <-- de.unihalle.informatik.MiToBo.meta.MTBOpParams.MTBOpParams(de.unihalle.informatik.MiToBo.meta.MTBMetaData)
            <-- de.unihalle.informatik.MiToBo.meta.MTBOpParams.getParameter(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.meta.MTBOpParams.setParameter(java.lang.String, java.lang.Object)
            --> java.util.Hashtable *
        setMetaDataObject(de.unihalle.informatik.MiToBo.meta.MTBMetaData)
            --> de.unihalle.informatik.MiToBo.meta.MTBMetaData
            <-- de.unihalle.informatik.MiToBo.meta.MTBOpBasePlugin.run(ij.process.ImageProcessor)
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams.metaObj
            <-- mtb_demo.Demo_MTBOpBase_Plugin.run(ij.process.ImageProcessor)
            <-- mtb_morphology.CalcOtsuThreshold_Image.run(ij.process.ImageProcessor)
        setParameter(java.lang.String, java.lang.Object)
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams.paramTable
            --> java.lang.Object *
            --> java.lang.String *
            --> java.util.Hashtable *
            --> java.util.Hashtable.put(java.lang.Object, java.lang.Object) *
            <-- mtb_demo.Demo_MTBOpBase_Plugin.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            <-- mtb_demo.Demo_MTBOpBase_Plugin.parameterDialog()
            <-- mtb_demo.Demo_MTBOpBase_Plugin.run(ij.process.ImageProcessor)
            <-- mtb_enhance.Histogram_Equalize.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            <-- mtb_morphology.Dilate_Image.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            <-- mtb_morphology.Erode_Image.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            <-- mtb_morphology.Threshold_Image_Niblack.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
de.unihalle.informatik.MiToBo.meta.xml
    MTBxmlIO
        --> java.lang.Object *
        MTBxmlIO()
            --> java.lang.Object.Object() *
        readFromFile(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.meta.MTBMetaData.readFromFile(java.lang.String)
            --> java.io.File *
            --> java.io.File.File(java.lang.String) *
            --> java.lang.Exception *
            --> java.lang.String *
            --> javax.xml.parsers.DocumentBuilder *
            --> javax.xml.parsers.DocumentBuilder.parse(java.io.File) *
            --> javax.xml.parsers.DocumentBuilderFactory *
            --> javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder() *
            --> javax.xml.parsers.DocumentBuilderFactory.newInstance() *
            --> org.w3c.dom.Document *
        saveToFile(org.w3c.dom.Document, java.lang.String)
            <-- de.unihalle.informatik.MiToBo.meta.MTBMetaData.writeToFile(java.lang.String)
            --> java.io.File *
            --> java.io.File.File(java.lang.String) *
            --> java.io.FileOutputStream.FileOutputStream(java.io.File) *
            --> java.io.IOException *
            --> java.io.IOException.printStackTrace() *
            --> java.io.OutputStream *
            --> java.io.PrintStream *
            --> java.io.PrintStream.println(java.lang.String) *
            --> java.lang.String *
            --> java.lang.StringBuilder *
            --> java.lang.StringBuilder.StringBuilder(java.lang.String) *
            --> java.lang.StringBuilder.append(java.lang.String) *
            --> java.lang.StringBuilder.toString() *
            --> java.lang.System.out *
            --> java.lang.Throwable *
            --> java.lang.Throwable.printStackTrace() *
            --> javax.xml.transform.Result *
            --> javax.xml.transform.Source *
            --> javax.xml.transform.Transformer *
            --> javax.xml.transform.Transformer.transform(javax.xml.transform.Source, javax.xml.transform.Result) *
            --> javax.xml.transform.TransformerConfigurationException *
            --> javax.xml.transform.TransformerConfigurationException.getException() *
            --> javax.xml.transform.TransformerConfigurationException.getMessage() *
            --> javax.xml.transform.TransformerException *
            --> javax.xml.transform.TransformerException.getException() *
            --> javax.xml.transform.TransformerException.getMessage() *
            --> javax.xml.transform.TransformerFactory *
            --> javax.xml.transform.TransformerFactory.newInstance() *
            --> javax.xml.transform.TransformerFactory.newTransformer() *
            --> javax.xml.transform.dom.DOMSource.DOMSource(org.w3c.dom.Node) *
            --> javax.xml.transform.stream.StreamResult.StreamResult(java.io.OutputStream) *
            --> org.w3c.dom.Document *
            --> org.w3c.dom.Node *
de.unihalle.informatik.MiToBo.morphology
    ComponentPostprocess
        --> java.lang.Object *
        ComponentPostprocess()
            --> java.lang.Object.Object() *
            <-- mtb_morphology.Link_Components.run(ij.process.ImageProcessor)
            <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
        EraseSmallComponents(ij.process.ImageProcessor, int)
            --> de.unihalle.informatik.MiToBo.datatypes.Region2D
            --> de.unihalle.informatik.MiToBo.datatypes.Region2D.getArea()
            --> de.unihalle.informatik.MiToBo.datatypes.Region2D.getPoints()
            --> de.unihalle.informatik.MiToBo.morphology.ComponentPostprocess.height
            --> de.unihalle.informatik.MiToBo.morphology.ComponentPostprocess.width
            --> de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential.LabelComponentsSequential()
            --> de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential.regionSegmentation(ij.process.ImageProcessor, boolean)
            --> ij.ImagePlus *
            --> ij.ImagePlus.getProcessor() *
            --> ij.gui.NewImage.createByteImage(java.lang.String, int, int, int, int) *
            --> ij.process.ImageProcessor *
            --> ij.process.ImageProcessor.copyBits(ij.process.ImageProcessor, int, int, int) *
            --> ij.process.ImageProcessor.getHeight() *
            --> ij.process.ImageProcessor.getWidth() *
            --> ij.process.ImageProcessor.putPixel(int, int, int) *
            --> java.awt.geom.Point2D$Double *
            --> java.awt.geom.Point2D$Double.x *
            --> java.awt.geom.Point2D$Double.y *
            --> java.lang.Object *
            --> java.lang.String *
            --> java.util.Vector *
            --> java.util.Vector.elementAt(int) *
            --> java.util.Vector.size() *
            <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
        LinkAdjacentComponents(ij.process.ImageProcessor, double)
            --> I[][] *
            --> de.unihalle.informatik.MiToBo.datatypes.Region2D
            --> de.unihalle.informatik.MiToBo.datatypes.Region2D.getPoints()
            --> de.unihalle.informatik.MiToBo.morphology.ComponentPostprocess.endPointHash
            --> de.unihalle.informatik.MiToBo.morphology.ComponentPostprocess.height
            --> de.unihalle.informatik.MiToBo.morphology.ComponentPostprocess.width
            --> de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential.LabelComponentsSequential()
            --> de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential.regionSegmentation(ij.process.ImageProcessor, boolean)
            --> ij.ImagePlus *
            --> ij.ImagePlus.getProcessor() *
            --> ij.gui.NewImage.createByteImage(java.lang.String, int, int, int, int) *
            --> ij.process.BinaryProcessor.BinaryProcessor(ij.process.ByteProcessor) *
            --> ij.process.BinaryProcessor.getPixel(int, int) *
            --> ij.process.BinaryProcessor.skeletonize() *
            --> ij.process.ByteProcessor *
            --> ij.process.ByteProcessor.ByteProcessor(int, int) *
            --> ij.process.ByteProcessor.putPixel(int, int, int) *
            --> ij.process.ImageProcessor *
            --> ij.process.ImageProcessor.copyBits(ij.process.ImageProcessor, int, int, int) *
            --> ij.process.ImageProcessor.drawLine(int, int, int, int) *
            --> ij.process.ImageProcessor.getHeight() *
            --> ij.process.ImageProcessor.getPixel(int, int) *
            --> ij.process.ImageProcessor.getWidth() *
            --> ij.process.ImageProcessor.setColor(int) *
            --> java.awt.geom.Point2D$Double *
            --> java.awt.geom.Point2D$Double.Point2D$Double(double, double) *
            --> java.awt.geom.Point2D$Double.x *
            --> java.awt.geom.Point2D$Double.y *
            --> java.lang.Object *
            --> java.lang.String *
            --> java.util.Vector *
            --> java.util.Vector.Vector() *
            --> java.util.Vector.add(java.lang.Object) *
            --> java.util.Vector.elementAt(int) *
            --> java.util.Vector.size() *
            <-- mtb_morphology.Link_Components.run(ij.process.ImageProcessor)
            <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
        endPointHash
            <-- de.unihalle.informatik.MiToBo.morphology.ComponentPostprocess.LinkAdjacentComponents(ij.process.ImageProcessor, double)
            --> java.util.Vector *
        height
            <-- de.unihalle.informatik.MiToBo.morphology.ComponentPostprocess.EraseSmallComponents(ij.process.ImageProcessor, int)
            <-- de.unihalle.informatik.MiToBo.morphology.ComponentPostprocess.LinkAdjacentComponents(ij.process.ImageProcessor, double)
        width
            <-- de.unihalle.informatik.MiToBo.morphology.ComponentPostprocess.EraseSmallComponents(ij.process.ImageProcessor, int)
            <-- de.unihalle.informatik.MiToBo.morphology.ComponentPostprocess.LinkAdjacentComponents(ij.process.ImageProcessor, double)
    HDomeTransform3D
        --> de.unihalle.informatik.MiToBo.meta.MTBOpBase
        HDomeTransform3D()
            --> de.unihalle.informatik.MiToBo.meta.MTBOpBase.MTBOpBase()
            <-- mtb_morphology.HDomeTransform_3D.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        getMetaParams()
            --> java.lang.Object *
            --> java.util.LinkedList *
            --> java.util.LinkedList.LinkedList() *
            --> java.util.LinkedList.add(java.lang.Object) *
        hybridGrayscaleReconstruct(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> de.unihalle.informatik.MiToBo.datatypes.Point3D
            --> de.unihalle.informatik.MiToBo.datatypes.Point3D.Point3D(double, double, double)
            --> de.unihalle.informatik.MiToBo.datatypes.Point3D.getX()
            --> de.unihalle.informatik.MiToBo.datatypes.Point3D.getY()
            --> de.unihalle.informatik.MiToBo.datatypes.Point3D.getZ()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeC()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeT()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeX()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeY()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeZ()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getValueDouble(int, int, int, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.putValueDouble(int, int, int, int, int, double)
            <-- de.unihalle.informatik.MiToBo.morphology.HDomeTransform3D.transform(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double)
            --> java.lang.Object *
            --> java.util.concurrent.ConcurrentLinkedQueue.ConcurrentLinkedQueue() *
            --> java.util.concurrent.ConcurrentLinkedQueue.add(java.lang.Object) *
            --> java.util.concurrent.ConcurrentLinkedQueue.isEmpty() *
            --> java.util.concurrent.ConcurrentLinkedQueue.poll() *
        operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams
            --> de.unihalle.informatik.MiToBo.morphology.HDomeTransform3D.transform(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double)
            --> de.unihalle.informatik.MiToBo.morphology.HDomeTransform3DParams
            --> de.unihalle.informatik.MiToBo.morphology.HDomeTransform3DParams.getH()
            --> de.unihalle.informatik.MiToBo.morphology.HDomeTransform3DParams.getInputImage()
            --> de.unihalle.informatik.MiToBo.morphology.HDomeTransform3DParams.setResultImage(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        runOp(de.unihalle.informatik.MiToBo.meta.MTBOpParams) *
            <-- mtb_morphology.HDomeTransform_3D.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        transform(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.duplicate()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeC()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeT()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeX()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeY()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeZ()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getValueDouble(int, int, int, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.putValueDouble(int, int, int, int, int, double)
            --> de.unihalle.informatik.MiToBo.morphology.HDomeTransform3D.hybridGrayscaleReconstruct(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.morphology.HDomeTransform3D.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
    HDomeTransform3DParams
        --> de.unihalle.informatik.MiToBo.meta.MTBOpParams
        <-- de.unihalle.informatik.MiToBo.morphology.HDomeTransform3D.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        <-- mtb_morphology.HDomeTransform_3D.parameterDialog()
        <-- mtb_morphology.HDomeTransform_3D.run(ij.process.ImageProcessor)
        HDomeTransform3DParams(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams.MTBOpParams()
            --> de.unihalle.informatik.MiToBo.morphology.HDomeTransform3DParams.setParameter(java.lang.String, java.lang.Object) *
            --> java.lang.Double *
            --> java.lang.Double.valueOf(double) *
            --> java.lang.Object *
            --> java.lang.String *
            <-- mtb_morphology.HDomeTransform_3D.parameterDialog()
        HDomeTransform3DParams(de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.meta.MTBMetaData
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams.MTBOpParams(de.unihalle.informatik.MiToBo.meta.MTBMetaData)
            --> de.unihalle.informatik.MiToBo.morphology.HDomeTransform3DParams.setParameter(java.lang.String, java.lang.Object) *
            --> java.lang.Double *
            --> java.lang.Double.valueOf(double) *
            --> java.lang.Object *
            --> java.lang.String *
        getH()
            <-- de.unihalle.informatik.MiToBo.morphology.HDomeTransform3D.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            --> de.unihalle.informatik.MiToBo.morphology.HDomeTransform3DParams.getParameter(java.lang.String) *
            --> java.lang.Double *
            --> java.lang.Double.doubleValue() *
            --> java.lang.Object *
            --> java.lang.String *
            <-- mtb_morphology.HDomeTransform_3D.run(ij.process.ImageProcessor)
        getInputImage()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            <-- de.unihalle.informatik.MiToBo.morphology.HDomeTransform3D.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            --> de.unihalle.informatik.MiToBo.morphology.HDomeTransform3DParams.getParameter(java.lang.String) *
            --> java.lang.Object *
            --> java.lang.String *
            <-- mtb_morphology.HDomeTransform_3D.run(ij.process.ImageProcessor)
        getMetaParams()
            --> java.lang.Object *
            --> java.util.LinkedList *
            --> java.util.LinkedList.LinkedList() *
            --> java.util.LinkedList.add(java.lang.Object) *
        getParameter(java.lang.String) *
            <-- de.unihalle.informatik.MiToBo.morphology.HDomeTransform3DParams.getH()
            <-- de.unihalle.informatik.MiToBo.morphology.HDomeTransform3DParams.getInputImage()
            <-- de.unihalle.informatik.MiToBo.morphology.HDomeTransform3DParams.getResultImage()
        getResultImage()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.morphology.HDomeTransform3DParams.getParameter(java.lang.String) *
            --> java.lang.Object *
            --> java.lang.String *
            <-- mtb_morphology.HDomeTransform_3D.run(ij.process.ImageProcessor)
        setMetaDataObject(de.unihalle.informatik.MiToBo.meta.MTBMetaData) *
            <-- mtb_morphology.HDomeTransform_3D.run(ij.process.ImageProcessor)
        setParameter(java.lang.String, java.lang.Object) *
            <-- de.unihalle.informatik.MiToBo.morphology.HDomeTransform3DParams.HDomeTransform3DParams(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double)
            <-- de.unihalle.informatik.MiToBo.morphology.HDomeTransform3DParams.HDomeTransform3DParams(de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double)
            <-- de.unihalle.informatik.MiToBo.morphology.HDomeTransform3DParams.setResultImage(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        setResultImage(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            <-- de.unihalle.informatik.MiToBo.morphology.HDomeTransform3D.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            --> de.unihalle.informatik.MiToBo.morphology.HDomeTransform3DParams.setParameter(java.lang.String, java.lang.Object) *
            --> java.lang.Object *
            --> java.lang.String *
    ImgDilate
        <-- de.unihalle.informatik.MiToBo.apps.cells2D.CellSegmentAlgos.voronoiTesselation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.detectGranules_old(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        --> de.unihalle.informatik.MiToBo.meta.MTBOpBase
        <-- de.unihalle.informatik.MiToBo.morphology.ImgDilate$ImgDilateParams.ImgDilate$ImgDilateParams(de.unihalle.informatik.MiToBo.morphology.ImgDilate, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
        <-- de.unihalle.informatik.MiToBo.morphology.ImgDilate$ImgDilateParams.ImgDilate$ImgDilateParams(de.unihalle.informatik.MiToBo.morphology.ImgDilate, de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
        <-- de.unihalle.informatik.MiToBo.morphology.ImgDilate$ImgDilateParams.this$0
        <-- mtb_morphology.Dilate_Image.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        <-- mtb_neurites.Neurit_Detector_2D.removeCellBody(de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        ImgDilate()
            <-- de.unihalle.informatik.MiToBo.apps.cells2D.CellSegmentAlgos.voronoiTesselation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.detectGranules_old(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> de.unihalle.informatik.MiToBo.meta.MTBOpBase.MTBOpBase()
            <-- mtb_morphology.Dilate_Image.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            <-- mtb_neurites.Neurit_Detector_2D.removeCellBody(de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        applyMask(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.createMTBImage(int, int, int, int, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeX()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeY()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getValueInt(int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.putValueInt(int, int, int)
            <-- de.unihalle.informatik.MiToBo.morphology.ImgDilate.applyMask(ij.process.ImageProcessor, int)
            <-- de.unihalle.informatik.MiToBo.morphology.ImgDilate.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        applyMask(ij.process.ImageProcessor, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.createMTBImage(ij.ImagePlus)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.getImagePlus()
            --> de.unihalle.informatik.MiToBo.morphology.ImgDilate.applyMask(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            --> ij.ImagePlus *
            --> ij.ImagePlus.getProcessor() *
            --> ij.gui.NewImage.createByteImage(java.lang.String, int, int, int, int) *
            --> ij.process.ImageProcessor *
            --> ij.process.ImageProcessor.copyBits(ij.process.ImageProcessor, int, int, int) *
            --> ij.process.ImageProcessor.getHeight() *
            --> ij.process.ImageProcessor.getWidth() *
            --> java.lang.String *
        getMetaParams()
            --> java.lang.Object *
            --> java.util.LinkedList *
            --> java.util.LinkedList.LinkedList() *
            --> java.util.LinkedList.add(java.lang.Object) *
        masksize
            <-- de.unihalle.informatik.MiToBo.morphology.ImgDilate.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        mtbImg
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            <-- de.unihalle.informatik.MiToBo.morphology.ImgDilate.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams
            --> de.unihalle.informatik.MiToBo.morphology.ImgDilate$ImgDilateParams
            --> de.unihalle.informatik.MiToBo.morphology.ImgDilate$ImgDilateParams.getInputImage()
            --> de.unihalle.informatik.MiToBo.morphology.ImgDilate$ImgDilateParams.getMasksize()
            --> de.unihalle.informatik.MiToBo.morphology.ImgDilate$ImgDilateParams.setResultImage(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> de.unihalle.informatik.MiToBo.morphology.ImgDilate.applyMask(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            --> de.unihalle.informatik.MiToBo.morphology.ImgDilate.masksize
            --> de.unihalle.informatik.MiToBo.morphology.ImgDilate.mtbImg
        runOp(de.unihalle.informatik.MiToBo.meta.MTBOpParams) *
            <-- de.unihalle.informatik.MiToBo.apps.cells2D.CellSegmentAlgos.voronoiTesselation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.detectGranules_old(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- mtb_morphology.Dilate_Image.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            <-- mtb_neurites.Neurit_Detector_2D.removeCellBody(de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
    ImgDilate$ImgDilateParams
        --> de.unihalle.informatik.MiToBo.meta.MTBOpParams
        <-- de.unihalle.informatik.MiToBo.morphology.ImgDilate.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        ImgDilate$ImgDilateParams(de.unihalle.informatik.MiToBo.morphology.ImgDilate, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            <-- de.unihalle.informatik.MiToBo.apps.cells2D.CellSegmentAlgos.voronoiTesselation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.detectGranules_old(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams.MTBOpParams()
            --> de.unihalle.informatik.MiToBo.morphology.ImgDilate
            --> de.unihalle.informatik.MiToBo.morphology.ImgDilate$ImgDilateParams.setParameter(java.lang.String, java.lang.Object) *
            --> de.unihalle.informatik.MiToBo.morphology.ImgDilate$ImgDilateParams.this$0
            --> java.lang.Integer.Integer(int) *
            --> java.lang.Object *
            --> java.lang.String *
            <-- mtb_neurites.Neurit_Detector_2D.removeCellBody(de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        ImgDilate$ImgDilateParams(de.unihalle.informatik.MiToBo.morphology.ImgDilate, de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.meta.MTBMetaData
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams.MTBOpParams(de.unihalle.informatik.MiToBo.meta.MTBMetaData)
            --> de.unihalle.informatik.MiToBo.morphology.ImgDilate
            --> de.unihalle.informatik.MiToBo.morphology.ImgDilate$ImgDilateParams.setParameter(java.lang.String, java.lang.Object) *
            --> de.unihalle.informatik.MiToBo.morphology.ImgDilate$ImgDilateParams.this$0
            --> java.lang.Integer.Integer(int) *
            --> java.lang.Object *
            --> java.lang.String *
            <-- mtb_morphology.Dilate_Image.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        getInputImage()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.morphology.ImgDilate$ImgDilateParams.getParameter(java.lang.String) *
            <-- de.unihalle.informatik.MiToBo.morphology.ImgDilate.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            --> java.lang.Object *
            --> java.lang.String *
        getMasksize()
            --> de.unihalle.informatik.MiToBo.morphology.ImgDilate$ImgDilateParams.getParameter(java.lang.String) *
            <-- de.unihalle.informatik.MiToBo.morphology.ImgDilate.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            --> java.lang.Integer *
            --> java.lang.Integer.intValue() *
            --> java.lang.Object *
            --> java.lang.String *
        getParameter(java.lang.String) *
            <-- de.unihalle.informatik.MiToBo.morphology.ImgDilate$ImgDilateParams.getInputImage()
            <-- de.unihalle.informatik.MiToBo.morphology.ImgDilate$ImgDilateParams.getMasksize()
            <-- de.unihalle.informatik.MiToBo.morphology.ImgDilate$ImgDilateParams.getResultImage()
        getResultImage()
            <-- de.unihalle.informatik.MiToBo.apps.cells2D.CellSegmentAlgos.voronoiTesselation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.detectGranules_old(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte
            --> de.unihalle.informatik.MiToBo.morphology.ImgDilate$ImgDilateParams.getParameter(java.lang.String) *
            --> java.lang.Object *
            --> java.lang.String *
            <-- mtb_morphology.Dilate_Image.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            <-- mtb_neurites.Neurit_Detector_2D.removeCellBody(de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        setParameter(java.lang.String, java.lang.Object) *
            <-- de.unihalle.informatik.MiToBo.morphology.ImgDilate$ImgDilateParams.ImgDilate$ImgDilateParams(de.unihalle.informatik.MiToBo.morphology.ImgDilate, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            <-- de.unihalle.informatik.MiToBo.morphology.ImgDilate$ImgDilateParams.ImgDilate$ImgDilateParams(de.unihalle.informatik.MiToBo.morphology.ImgDilate, de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            <-- de.unihalle.informatik.MiToBo.morphology.ImgDilate$ImgDilateParams.setResultImage(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        setResultImage(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.morphology.ImgDilate$ImgDilateParams.setParameter(java.lang.String, java.lang.Object) *
            <-- de.unihalle.informatik.MiToBo.morphology.ImgDilate.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            --> java.lang.Object *
            --> java.lang.String *
        this$0
            --> de.unihalle.informatik.MiToBo.morphology.ImgDilate
            <-- de.unihalle.informatik.MiToBo.morphology.ImgDilate$ImgDilateParams.ImgDilate$ImgDilateParams(de.unihalle.informatik.MiToBo.morphology.ImgDilate, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            <-- de.unihalle.informatik.MiToBo.morphology.ImgDilate$ImgDilateParams.ImgDilate$ImgDilateParams(de.unihalle.informatik.MiToBo.morphology.ImgDilate, de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
    ImgErode
        <-- de.unihalle.informatik.MiToBo.apps.cells2D.CellSegmentAlgos.voronoiTesselation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.detectGranules_old(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        --> de.unihalle.informatik.MiToBo.meta.MTBOpBase
        <-- de.unihalle.informatik.MiToBo.morphology.ImgErode$ImgErodeParams.ImgErode$ImgErodeParams(de.unihalle.informatik.MiToBo.morphology.ImgErode, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
        <-- de.unihalle.informatik.MiToBo.morphology.ImgErode$ImgErodeParams.ImgErode$ImgErodeParams(de.unihalle.informatik.MiToBo.morphology.ImgErode, de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
        <-- de.unihalle.informatik.MiToBo.morphology.ImgErode$ImgErodeParams.this$0
        <-- mtb_morphology.Erode_Image.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        <-- mtb_neurites.Neurit_Detector_2D.removeCellBody(de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        ImgErode()
            <-- de.unihalle.informatik.MiToBo.apps.cells2D.CellSegmentAlgos.voronoiTesselation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.detectGranules_old(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> de.unihalle.informatik.MiToBo.meta.MTBOpBase.MTBOpBase()
            <-- mtb_morphology.Erode_Image.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            <-- mtb_neurites.Neurit_Detector_2D.removeCellBody(de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        applyMask(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.createMTBImage(int, int, int, int, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeX()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeY()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getValueInt(int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.putValueInt(int, int, int)
            <-- de.unihalle.informatik.MiToBo.morphology.ImgErode.applyMask(ij.process.ImageProcessor, int)
            <-- de.unihalle.informatik.MiToBo.morphology.ImgErode.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        applyMask(ij.process.ImageProcessor, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.createMTBImage(ij.ImagePlus)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.getImagePlus()
            --> de.unihalle.informatik.MiToBo.morphology.ImgErode.applyMask(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            --> ij.ImagePlus *
            --> ij.ImagePlus.getProcessor() *
            --> ij.gui.NewImage.createByteImage(java.lang.String, int, int, int, int) *
            --> ij.process.ImageProcessor *
            --> ij.process.ImageProcessor.copyBits(ij.process.ImageProcessor, int, int, int) *
            --> ij.process.ImageProcessor.getHeight() *
            --> ij.process.ImageProcessor.getWidth() *
            --> java.lang.String *
        getMetaParams()
            --> java.lang.Object *
            --> java.util.LinkedList *
            --> java.util.LinkedList.LinkedList() *
            --> java.util.LinkedList.add(java.lang.Object) *
        masksize
            <-- de.unihalle.informatik.MiToBo.morphology.ImgErode.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        mtbImg
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            <-- de.unihalle.informatik.MiToBo.morphology.ImgErode.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams
            --> de.unihalle.informatik.MiToBo.morphology.ImgErode$ImgErodeParams
            --> de.unihalle.informatik.MiToBo.morphology.ImgErode$ImgErodeParams.getInputImage()
            --> de.unihalle.informatik.MiToBo.morphology.ImgErode$ImgErodeParams.getMasksize()
            --> de.unihalle.informatik.MiToBo.morphology.ImgErode$ImgErodeParams.setResultImage(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> de.unihalle.informatik.MiToBo.morphology.ImgErode.applyMask(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            --> de.unihalle.informatik.MiToBo.morphology.ImgErode.masksize
            --> de.unihalle.informatik.MiToBo.morphology.ImgErode.mtbImg
        runOp(de.unihalle.informatik.MiToBo.meta.MTBOpParams) *
            <-- de.unihalle.informatik.MiToBo.apps.cells2D.CellSegmentAlgos.voronoiTesselation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.detectGranules_old(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- mtb_morphology.Erode_Image.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            <-- mtb_neurites.Neurit_Detector_2D.removeCellBody(de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
    ImgErode$ImgErodeParams
        --> de.unihalle.informatik.MiToBo.meta.MTBOpParams
        <-- de.unihalle.informatik.MiToBo.morphology.ImgErode.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        ImgErode$ImgErodeParams(de.unihalle.informatik.MiToBo.morphology.ImgErode, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            <-- de.unihalle.informatik.MiToBo.apps.cells2D.CellSegmentAlgos.voronoiTesselation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.detectGranules_old(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams.MTBOpParams()
            --> de.unihalle.informatik.MiToBo.morphology.ImgErode
            --> de.unihalle.informatik.MiToBo.morphology.ImgErode$ImgErodeParams.setParameter(java.lang.String, java.lang.Object) *
            --> de.unihalle.informatik.MiToBo.morphology.ImgErode$ImgErodeParams.this$0
            --> java.lang.Integer *
            --> java.lang.Integer.valueOf(int) *
            --> java.lang.Object *
            --> java.lang.String *
            <-- mtb_neurites.Neurit_Detector_2D.removeCellBody(de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        ImgErode$ImgErodeParams(de.unihalle.informatik.MiToBo.morphology.ImgErode, de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.meta.MTBMetaData
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams.MTBOpParams(de.unihalle.informatik.MiToBo.meta.MTBMetaData)
            --> de.unihalle.informatik.MiToBo.morphology.ImgErode
            --> de.unihalle.informatik.MiToBo.morphology.ImgErode$ImgErodeParams.setParameter(java.lang.String, java.lang.Object) *
            --> de.unihalle.informatik.MiToBo.morphology.ImgErode$ImgErodeParams.this$0
            --> java.lang.Integer *
            --> java.lang.Integer.valueOf(int) *
            --> java.lang.Object *
            --> java.lang.String *
            <-- mtb_morphology.Erode_Image.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        getInputImage()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.morphology.ImgErode$ImgErodeParams.getParameter(java.lang.String) *
            <-- de.unihalle.informatik.MiToBo.morphology.ImgErode.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            --> java.lang.Object *
            --> java.lang.String *
        getMasksize()
            --> de.unihalle.informatik.MiToBo.morphology.ImgErode$ImgErodeParams.getParameter(java.lang.String) *
            <-- de.unihalle.informatik.MiToBo.morphology.ImgErode.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            --> java.lang.Integer *
            --> java.lang.Integer.intValue() *
            --> java.lang.Object *
            --> java.lang.String *
        getParameter(java.lang.String) *
            <-- de.unihalle.informatik.MiToBo.morphology.ImgErode$ImgErodeParams.getInputImage()
            <-- de.unihalle.informatik.MiToBo.morphology.ImgErode$ImgErodeParams.getMasksize()
            <-- de.unihalle.informatik.MiToBo.morphology.ImgErode$ImgErodeParams.getResultImage()
        getResultImage()
            <-- de.unihalle.informatik.MiToBo.apps.cells2D.CellSegmentAlgos.voronoiTesselation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.detectGranules_old(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte
            --> de.unihalle.informatik.MiToBo.morphology.ImgErode$ImgErodeParams.getParameter(java.lang.String) *
            --> java.lang.Object *
            --> java.lang.String *
            <-- mtb_morphology.Erode_Image.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            <-- mtb_neurites.Neurit_Detector_2D.removeCellBody(de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        setParameter(java.lang.String, java.lang.Object) *
            <-- de.unihalle.informatik.MiToBo.morphology.ImgErode$ImgErodeParams.ImgErode$ImgErodeParams(de.unihalle.informatik.MiToBo.morphology.ImgErode, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            <-- de.unihalle.informatik.MiToBo.morphology.ImgErode$ImgErodeParams.ImgErode$ImgErodeParams(de.unihalle.informatik.MiToBo.morphology.ImgErode, de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            <-- de.unihalle.informatik.MiToBo.morphology.ImgErode$ImgErodeParams.setResultImage(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        setResultImage(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.morphology.ImgErode$ImgErodeParams.setParameter(java.lang.String, java.lang.Object) *
            <-- de.unihalle.informatik.MiToBo.morphology.ImgErode.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            --> java.lang.Object *
            --> java.lang.String *
        this$0
            --> de.unihalle.informatik.MiToBo.morphology.ImgErode
            <-- de.unihalle.informatik.MiToBo.morphology.ImgErode$ImgErodeParams.ImgErode$ImgErodeParams(de.unihalle.informatik.MiToBo.morphology.ImgErode, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            <-- de.unihalle.informatik.MiToBo.morphology.ImgErode$ImgErodeParams.ImgErode$ImgErodeParams(de.unihalle.informatik.MiToBo.morphology.ImgErode, de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
    Morphology3D
        --> java.lang.Object *
        Morphology3D()
            --> java.lang.Object.Object() *
        close(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.morphology.StructuringElement, de.unihalle.informatik.MiToBo.morphology.StructuringElement)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.morphology.Morphology3D.dilate(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.morphology.StructuringElement)
            --> de.unihalle.informatik.MiToBo.morphology.Morphology3D.erode(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.morphology.StructuringElement)
            --> de.unihalle.informatik.MiToBo.morphology.StructuringElement
            <-- mtb_morphology.Morph_3D.run(java.lang.String)
        dilate(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.morphology.StructuringElement)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.duplicate()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeX()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeY()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeZ()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getValueInt(int, int, int, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.putValueInt(int, int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.morphology.Morphology3D.close(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.morphology.StructuringElement, de.unihalle.informatik.MiToBo.morphology.StructuringElement)
            <-- de.unihalle.informatik.MiToBo.morphology.Morphology3D.open(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.morphology.StructuringElement, de.unihalle.informatik.MiToBo.morphology.StructuringElement)
            --> de.unihalle.informatik.MiToBo.morphology.StructuringElement
            --> de.unihalle.informatik.MiToBo.morphology.StructuringElement.getCenterX()
            --> de.unihalle.informatik.MiToBo.morphology.StructuringElement.getCenterY()
            --> de.unihalle.informatik.MiToBo.morphology.StructuringElement.getCenterZ()
            --> de.unihalle.informatik.MiToBo.morphology.StructuringElement.getSizeX()
            --> de.unihalle.informatik.MiToBo.morphology.StructuringElement.getSizeY()
            --> de.unihalle.informatik.MiToBo.morphology.StructuringElement.getSizeZ()
            --> de.unihalle.informatik.MiToBo.morphology.StructuringElement.getValue(int, int, int)
            --> java.io.PrintStream *
            --> java.io.PrintStream.println(java.lang.String) *
            --> java.lang.String *
            --> java.lang.StringBuilder *
            --> java.lang.StringBuilder.StringBuilder(java.lang.String) *
            --> java.lang.StringBuilder.append(int) *
            --> java.lang.StringBuilder.toString() *
            --> java.lang.System.out *
            <-- mtb_morphology.Morph_3D.run(java.lang.String)
        erode(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.morphology.StructuringElement)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.duplicate()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeX()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeY()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeZ()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getValueInt(int, int, int, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.putValueInt(int, int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.morphology.Morphology3D.close(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.morphology.StructuringElement, de.unihalle.informatik.MiToBo.morphology.StructuringElement)
            <-- de.unihalle.informatik.MiToBo.morphology.Morphology3D.open(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.morphology.StructuringElement, de.unihalle.informatik.MiToBo.morphology.StructuringElement)
            --> de.unihalle.informatik.MiToBo.morphology.StructuringElement
            --> de.unihalle.informatik.MiToBo.morphology.StructuringElement.getCenterX()
            --> de.unihalle.informatik.MiToBo.morphology.StructuringElement.getCenterY()
            --> de.unihalle.informatik.MiToBo.morphology.StructuringElement.getCenterZ()
            --> de.unihalle.informatik.MiToBo.morphology.StructuringElement.getSizeX()
            --> de.unihalle.informatik.MiToBo.morphology.StructuringElement.getSizeY()
            --> de.unihalle.informatik.MiToBo.morphology.StructuringElement.getSizeZ()
            --> de.unihalle.informatik.MiToBo.morphology.StructuringElement.getValue(int, int, int)
            --> java.io.PrintStream *
            --> java.io.PrintStream.println(java.lang.String) *
            --> java.lang.String *
            --> java.lang.StringBuilder *
            --> java.lang.StringBuilder.StringBuilder(java.lang.String) *
            --> java.lang.StringBuilder.append(int) *
            --> java.lang.StringBuilder.toString() *
            --> java.lang.System.out *
            <-- mtb_morphology.Morph_3D.run(java.lang.String)
        open(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.morphology.StructuringElement, de.unihalle.informatik.MiToBo.morphology.StructuringElement)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.morphology.Morphology3D.dilate(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.morphology.StructuringElement)
            --> de.unihalle.informatik.MiToBo.morphology.Morphology3D.erode(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.morphology.StructuringElement)
            --> de.unihalle.informatik.MiToBo.morphology.StructuringElement
            <-- mtb_morphology.Morph_3D.run(java.lang.String)
    SkeletonTree
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.NeuriteProfile(de.unihalle.informatik.MiToBo.datatypes.Region2D)
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.getSkeletonTree()
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.saveProfileData(java.lang.String)
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.saveProfileList(java.util.LinkedList, java.lang.String)
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.setSkeletonTree(de.unihalle.informatik.MiToBo.morphology.SkeletonTree)
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.skelTree
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcLongestPathProfiles(ij.ImagePlus, ij.ImagePlus, ij.ImagePlus)
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcProfile(de.unihalle.informatik.MiToBo.datatypes.Region2D, de.unihalle.informatik.MiToBo.morphology.SkeletonTree, ij.process.ImageProcessor, ij.process.ImageProcessor)
        --> de.unihalle.informatik.MiToBo.datatypes.Tree
        SkeletonTree(int, int, ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.getNeuritePathTrees(ij.process.ImageProcessor, ij.process.ImageProcessor, ij.process.ImageProcessor, java.util.Vector)
            --> de.unihalle.informatik.MiToBo.datatypes.Tree.Tree(de.unihalle.informatik.MiToBo.datatypes.TreeNodeData)
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNodeData
            --> de.unihalle.informatik.MiToBo.morphology.SkeletonTree.buildTree()
            --> de.unihalle.informatik.MiToBo.morphology.SkeletonTree.height
            --> de.unihalle.informatik.MiToBo.morphology.SkeletonTree.skelIP
            --> de.unihalle.informatik.MiToBo.morphology.SkeletonTree.skeletonImage
            --> de.unihalle.informatik.MiToBo.morphology.SkeletonTree.tmpSkelIP
            --> de.unihalle.informatik.MiToBo.morphology.SkeletonTree.tmpSkelImage
            --> de.unihalle.informatik.MiToBo.morphology.SkeletonTree.width
            --> de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.SkeletonTreeNodeData(int, int)
            --> ij.ImagePlus *
            --> ij.ImagePlus.getProcessor() *
            --> ij.gui.NewImage.createRGBImage(java.lang.String, int, int, int, int) *
            --> ij.process.ImageProcessor *
            --> ij.process.ImageProcessor.copyBits(ij.process.ImageProcessor, int, int, int) *
            --> ij.process.ImageProcessor.getHeight() *
            --> ij.process.ImageProcessor.getWidth() *
            --> java.lang.String *
        buildTree()
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNode
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNode.getData()
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNodeData
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.SkeletonTree(int, int, ij.ImagePlus)
            --> de.unihalle.informatik.MiToBo.morphology.SkeletonTree.expandPath(de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData, int, int)
            --> de.unihalle.informatik.MiToBo.morphology.SkeletonTree.root *
            --> de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData
            --> de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.getStartPoint()
            --> java.awt.geom.Point2D$Double *
            --> java.awt.geom.Point2D$Double.x *
            --> java.awt.geom.Point2D$Double.y *
        color_red
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.expandPath(de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData, int, int)
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.static {}
        expandPath(de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNode
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNode.TreeNode(de.unihalle.informatik.MiToBo.datatypes.TreeNodeData)
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNode.addChild(de.unihalle.informatik.MiToBo.datatypes.TreeNode)
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNode.getChilds()
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNode.getData()
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNodeData
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.buildTree()
            --> de.unihalle.informatik.MiToBo.morphology.SkeletonTree.color_red
            --> de.unihalle.informatik.MiToBo.morphology.SkeletonTree.height
            --> de.unihalle.informatik.MiToBo.morphology.SkeletonTree.tmpSkelIP
            --> de.unihalle.informatik.MiToBo.morphology.SkeletonTree.width
            --> de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData
            --> de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.SkeletonTreeNodeData(int, int)
            --> de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.appendPoint(int, int)
            --> de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.getMaxLength()
            --> de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.getNode() *
            --> de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.setMaxPathID(int)
            --> ij.process.ImageProcessor *
            --> ij.process.ImageProcessor.getPixel(int, int) *
            --> ij.process.ImageProcessor.putPixel(int, int, int) *
            --> java.awt.geom.Point2D$Double *
            --> java.awt.geom.Point2D$Double.Point2D$Double() *
            --> java.awt.geom.Point2D$Double.Point2D$Double(double, double) *
            --> java.awt.geom.Point2D$Double.x *
            --> java.awt.geom.Point2D$Double.y *
            --> java.lang.Object *
            --> java.util.Vector *
            --> java.util.Vector.Vector() *
            --> java.util.Vector.add(java.lang.Object) *
            --> java.util.Vector.elementAt(int) *
            --> java.util.Vector.size() *
        getAllPixels()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcLongestPathProfiles(ij.ImagePlus, ij.ImagePlus, ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcProfile(de.unihalle.informatik.MiToBo.datatypes.Region2D, de.unihalle.informatik.MiToBo.morphology.SkeletonTree, ij.process.ImageProcessor, ij.process.ImageProcessor)
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNode
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNode.getData()
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNodeData
            --> de.unihalle.informatik.MiToBo.morphology.SkeletonTree.root *
            --> de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData
            --> de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.getAllPathPixels(java.util.Vector)
            --> java.util.Vector *
            --> java.util.Vector.Vector() *
        getLongestPath()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.saveProfileData(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcLongestPathProfiles(ij.ImagePlus, ij.ImagePlus, ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcProfile(de.unihalle.informatik.MiToBo.datatypes.Region2D, de.unihalle.informatik.MiToBo.morphology.SkeletonTree, ij.process.ImageProcessor, ij.process.ImageProcessor)
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNode
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNode.getData()
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNodeData
            --> de.unihalle.informatik.MiToBo.morphology.SkeletonTree.root *
            --> de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData
            --> de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.getLongestPath(java.util.Vector)
            --> java.util.Vector *
            --> java.util.Vector.Vector() *
        getSpinesAlongPath(int)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcLongestPathProfiles(ij.ImagePlus, ij.ImagePlus, ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcProfile(de.unihalle.informatik.MiToBo.datatypes.Region2D, de.unihalle.informatik.MiToBo.morphology.SkeletonTree, ij.process.ImageProcessor, ij.process.ImageProcessor)
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNode
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNode.getData()
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNodeData
            --> de.unihalle.informatik.MiToBo.morphology.SkeletonTree.root *
            --> de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData
            --> de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.getSpinesAlongPath(java.util.Vector, int)
            --> java.util.Vector *
            --> java.util.Vector.Vector() *
        getStartPoint()
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNode
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNode.getData()
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNodeData
            --> de.unihalle.informatik.MiToBo.morphology.SkeletonTree.root *
            --> de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData
            --> de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.getStartPoint()
            --> java.awt.geom.Point2D$Double *
        height
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.SkeletonTree(int, int, ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.expandPath(de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData, int, int)
        root *
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.buildTree()
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.getAllPixels()
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.getLongestPath()
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.getSpinesAlongPath(int)
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.getStartPoint()
        skelIP
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.SkeletonTree(int, int, ij.ImagePlus)
            --> ij.process.ImageProcessor *
        skeletonImage
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.SkeletonTree(int, int, ij.ImagePlus)
            --> ij.ImagePlus *
        static {}
            --> de.unihalle.informatik.MiToBo.morphology.SkeletonTree.color_red
        tmpSkelIP
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.SkeletonTree(int, int, ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.expandPath(de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData, int, int)
            --> ij.process.ImageProcessor *
        tmpSkelImage
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.SkeletonTree(int, int, ij.ImagePlus)
            --> ij.ImagePlus *
        width
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.SkeletonTree(int, int, ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.expandPath(de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData, int, int)
    SkeletonTreeNodeData
        --> de.unihalle.informatik.MiToBo.datatypes.TreeNodeData
        <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.buildTree()
        <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.expandPath(de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData, int, int)
        <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.getAllPixels()
        <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.getLongestPath()
        <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.getSpinesAlongPath(int)
        <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.getStartPoint()
        SkeletonTreeNodeData(int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNodeData.TreeNodeData()
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.SkeletonTree(int, int, ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.expandPath(de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData, int, int)
            --> de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.longestPathBranch
            --> de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.pathPoints
            --> de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.startX
            --> de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.startY
            --> java.util.Vector *
            --> java.util.Vector.Vector() *
        appendPoint(int, int)
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.expandPath(de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData, int, int)
            --> de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.pathPoints
            --> java.awt.geom.Point2D$Double.Point2D$Double(double, double) *
            --> java.lang.Object *
            --> java.util.Vector *
            --> java.util.Vector.add(java.lang.Object) *
        getAllPathPixels(java.util.Vector)
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNode
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNode.getChilds()
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNode.getData()
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNodeData
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.getAllPixels()
            --> de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.node *
            --> de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.pathPoints
            --> java.awt.geom.Point2D$Double *
            --> java.awt.geom.Point2D$Double.Point2D$Double(double, double) *
            --> java.awt.geom.Point2D$Double.x *
            --> java.awt.geom.Point2D$Double.y *
            --> java.lang.Object *
            --> java.util.Vector *
            --> java.util.Vector.add(java.lang.Object) *
            --> java.util.Vector.elementAt(int) *
            --> java.util.Vector.size() *
        getFirstPixels(java.util.Vector, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNode
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNode.getChilds()
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNode.getData()
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNodeData
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.getSpinesAlongPath(java.util.Vector, int)
            --> de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.node *
            --> de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.pathPoints
            --> java.awt.geom.Point2D$Double *
            --> java.awt.geom.Point2D$Double.Point2D$Double(double, double) *
            --> java.awt.geom.Point2D$Double.x *
            --> java.awt.geom.Point2D$Double.y *
            --> java.lang.Object *
            --> java.util.Vector *
            --> java.util.Vector.add(java.lang.Object) *
            --> java.util.Vector.elementAt(int) *
            --> java.util.Vector.size() *
        getLongestPath(java.util.Vector)
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNode
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNode.getChilds()
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNode.getData()
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNodeData
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.getLongestPath()
            --> de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.longestPathBranch
            --> de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.node *
            --> de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.pathPoints
            --> java.awt.geom.Point2D$Double *
            --> java.awt.geom.Point2D$Double.Point2D$Double(double, double) *
            --> java.awt.geom.Point2D$Double.x *
            --> java.awt.geom.Point2D$Double.y *
            --> java.lang.Object *
            --> java.util.Vector *
            --> java.util.Vector.add(java.lang.Object) *
            --> java.util.Vector.elementAt(int) *
            --> java.util.Vector.size() *
        getMaxLength()
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNode
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNode.getChilds()
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNode.getData()
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNodeData
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.expandPath(de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData, int, int)
            --> de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.longestPathBranch
            --> de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.node *
            --> de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.pathPoints
            --> java.lang.Object *
            --> java.util.Vector *
            --> java.util.Vector.elementAt(int) *
            --> java.util.Vector.size() *
        getNode() *
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.expandPath(de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData, int, int)
        getPoints()
            --> de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.pathPoints
            --> java.util.Vector *
        getSpinesAlongPath(java.util.Vector, int)
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNode
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNode.getChilds()
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNode.getData()
            --> de.unihalle.informatik.MiToBo.datatypes.TreeNodeData
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.getSpinesAlongPath(int)
            --> de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.getFirstPixels(java.util.Vector, int, int)
            --> de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.longestPathBranch
            --> de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.node *
            --> java.lang.Object *
            --> java.util.Vector *
            --> java.util.Vector.elementAt(int) *
            --> java.util.Vector.size() *
        getStartPoint()
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.buildTree()
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.getStartPoint()
            --> de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.startX
            --> de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.startY
            --> java.awt.geom.Point2D$Double *
            --> java.awt.geom.Point2D$Double.Point2D$Double(double, double) *
        longestPathBranch
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.SkeletonTreeNodeData(int, int)
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.getLongestPath(java.util.Vector)
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.getMaxLength()
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.getSpinesAlongPath(java.util.Vector, int)
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.setMaxPathID(int)
        node *
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.getAllPathPixels(java.util.Vector)
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.getFirstPixels(java.util.Vector, int, int)
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.getLongestPath(java.util.Vector)
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.getMaxLength()
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.getSpinesAlongPath(java.util.Vector, int)
        pathPoints
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.SkeletonTreeNodeData(int, int)
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.appendPoint(int, int)
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.getAllPathPixels(java.util.Vector)
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.getFirstPixels(java.util.Vector, int, int)
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.getLongestPath(java.util.Vector)
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.getMaxLength()
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.getPoints()
            --> java.util.Vector *
        printData()
        setMaxPathID(int)
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.expandPath(de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData, int, int)
            --> de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.longestPathBranch
        startX
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.SkeletonTreeNodeData(int, int)
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.getStartPoint()
        startY
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.SkeletonTreeNodeData(int, int)
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.getStartPoint()
    StructuringElement
        <-- de.unihalle.informatik.MiToBo.morphology.Morphology3D.close(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.morphology.StructuringElement, de.unihalle.informatik.MiToBo.morphology.StructuringElement)
        <-- de.unihalle.informatik.MiToBo.morphology.Morphology3D.dilate(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.morphology.StructuringElement)
        <-- de.unihalle.informatik.MiToBo.morphology.Morphology3D.erode(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.morphology.StructuringElement)
        <-- de.unihalle.informatik.MiToBo.morphology.Morphology3D.open(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.morphology.StructuringElement, de.unihalle.informatik.MiToBo.morphology.StructuringElement)
        --> java.lang.Object *
        <-- mtb_morphology.Morph_3D.run(java.lang.String)
        StructuringElement(int[][][], int, int, int)
            --> de.unihalle.informatik.MiToBo.morphology.StructuringElement.centerX
            --> de.unihalle.informatik.MiToBo.morphology.StructuringElement.centerY
            --> de.unihalle.informatik.MiToBo.morphology.StructuringElement.centerZ
            <-- de.unihalle.informatik.MiToBo.morphology.StructuringElement.createBox(int, int, int)
            <-- de.unihalle.informatik.MiToBo.morphology.StructuringElement.createCube(int)
            <-- de.unihalle.informatik.MiToBo.morphology.StructuringElement.createSphere(int)
            --> de.unihalle.informatik.MiToBo.morphology.StructuringElement.mask
            --> de.unihalle.informatik.MiToBo.morphology.StructuringElement.sizeX
            --> de.unihalle.informatik.MiToBo.morphology.StructuringElement.sizeY
            --> de.unihalle.informatik.MiToBo.morphology.StructuringElement.sizeZ
            --> java.lang.Object.Object() *
        centerX
            <-- de.unihalle.informatik.MiToBo.morphology.StructuringElement.StructuringElement(int[][][], int, int, int)
            <-- de.unihalle.informatik.MiToBo.morphology.StructuringElement.getCenter()
            <-- de.unihalle.informatik.MiToBo.morphology.StructuringElement.getCenterX()
        centerY
            <-- de.unihalle.informatik.MiToBo.morphology.StructuringElement.StructuringElement(int[][][], int, int, int)
            <-- de.unihalle.informatik.MiToBo.morphology.StructuringElement.getCenter()
            <-- de.unihalle.informatik.MiToBo.morphology.StructuringElement.getCenterY()
        centerZ
            <-- de.unihalle.informatik.MiToBo.morphology.StructuringElement.StructuringElement(int[][][], int, int, int)
            <-- de.unihalle.informatik.MiToBo.morphology.StructuringElement.getCenter()
            <-- de.unihalle.informatik.MiToBo.morphology.StructuringElement.getCenterZ()
        createBox(int, int, int)
            --> I[][][] *
            --> de.unihalle.informatik.MiToBo.morphology.StructuringElement.StructuringElement(int[][][], int, int, int)
        createCube(int)
            --> I[][][] *
            --> de.unihalle.informatik.MiToBo.morphology.StructuringElement.StructuringElement(int[][][], int, int, int)
            <-- mtb_morphology.Morph_3D.run(java.lang.String)
        createSphere(int)
            --> I[][][] *
            --> de.unihalle.informatik.MiToBo.morphology.StructuringElement.StructuringElement(int[][][], int, int, int)
            <-- mtb_morphology.Morph_3D.run(java.lang.String)
        getCenter()
            --> de.unihalle.informatik.MiToBo.morphology.StructuringElement.centerX
            --> de.unihalle.informatik.MiToBo.morphology.StructuringElement.centerY
            --> de.unihalle.informatik.MiToBo.morphology.StructuringElement.centerZ
        getCenterX()
            <-- de.unihalle.informatik.MiToBo.morphology.Morphology3D.dilate(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.morphology.StructuringElement)
            <-- de.unihalle.informatik.MiToBo.morphology.Morphology3D.erode(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.morphology.StructuringElement)
            --> de.unihalle.informatik.MiToBo.morphology.StructuringElement.centerX
        getCenterY()
            <-- de.unihalle.informatik.MiToBo.morphology.Morphology3D.dilate(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.morphology.StructuringElement)
            <-- de.unihalle.informatik.MiToBo.morphology.Morphology3D.erode(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.morphology.StructuringElement)
            --> de.unihalle.informatik.MiToBo.morphology.StructuringElement.centerY
        getCenterZ()
            <-- de.unihalle.informatik.MiToBo.morphology.Morphology3D.dilate(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.morphology.StructuringElement)
            <-- de.unihalle.informatik.MiToBo.morphology.Morphology3D.erode(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.morphology.StructuringElement)
            --> de.unihalle.informatik.MiToBo.morphology.StructuringElement.centerZ
        getSize()
            --> de.unihalle.informatik.MiToBo.morphology.StructuringElement.sizeX
            --> de.unihalle.informatik.MiToBo.morphology.StructuringElement.sizeY
            --> de.unihalle.informatik.MiToBo.morphology.StructuringElement.sizeZ
        getSizeX()
            <-- de.unihalle.informatik.MiToBo.morphology.Morphology3D.dilate(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.morphology.StructuringElement)
            <-- de.unihalle.informatik.MiToBo.morphology.Morphology3D.erode(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.morphology.StructuringElement)
            --> de.unihalle.informatik.MiToBo.morphology.StructuringElement.sizeX
        getSizeY()
            <-- de.unihalle.informatik.MiToBo.morphology.Morphology3D.dilate(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.morphology.StructuringElement)
            <-- de.unihalle.informatik.MiToBo.morphology.Morphology3D.erode(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.morphology.StructuringElement)
            --> de.unihalle.informatik.MiToBo.morphology.StructuringElement.sizeY
        getSizeZ()
            <-- de.unihalle.informatik.MiToBo.morphology.Morphology3D.dilate(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.morphology.StructuringElement)
            <-- de.unihalle.informatik.MiToBo.morphology.Morphology3D.erode(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.morphology.StructuringElement)
            --> de.unihalle.informatik.MiToBo.morphology.StructuringElement.sizeZ
        getValue(int, int, int)
            <-- de.unihalle.informatik.MiToBo.morphology.Morphology3D.dilate(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.morphology.StructuringElement)
            <-- de.unihalle.informatik.MiToBo.morphology.Morphology3D.erode(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.morphology.StructuringElement)
            --> de.unihalle.informatik.MiToBo.morphology.StructuringElement.mask
        mask
            <-- de.unihalle.informatik.MiToBo.morphology.StructuringElement.StructuringElement(int[][][], int, int, int)
            <-- de.unihalle.informatik.MiToBo.morphology.StructuringElement.getValue(int, int, int)
        sizeX
            <-- de.unihalle.informatik.MiToBo.morphology.StructuringElement.StructuringElement(int[][][], int, int, int)
            <-- de.unihalle.informatik.MiToBo.morphology.StructuringElement.getSize()
            <-- de.unihalle.informatik.MiToBo.morphology.StructuringElement.getSizeX()
        sizeY
            <-- de.unihalle.informatik.MiToBo.morphology.StructuringElement.StructuringElement(int[][][], int, int, int)
            <-- de.unihalle.informatik.MiToBo.morphology.StructuringElement.getSize()
            <-- de.unihalle.informatik.MiToBo.morphology.StructuringElement.getSizeY()
        sizeZ
            <-- de.unihalle.informatik.MiToBo.morphology.StructuringElement.StructuringElement(int[][][], int, int, int)
            <-- de.unihalle.informatik.MiToBo.morphology.StructuringElement.getSize()
            <-- de.unihalle.informatik.MiToBo.morphology.StructuringElement.getSizeZ()
de.unihalle.informatik.MiToBo.segmentation.contours.snakes
    Resampler
        --> java.lang.Object *
        Resampler()
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.SnakeAlgos.calcSnake(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double[], double[], int, double)
            --> java.lang.Object.Object() *
        Resampler(Jama.Matrix, Jama.Matrix, double)
            --> Jama.Matrix *
            --> Jama.Matrix.get(int, int) *
            --> Jama.Matrix.getRowDimension() *
            --> de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.des
            --> de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.max
            --> de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.min
            --> de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.org_x
            --> de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.org_y
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.SnakeAlgos.calcSnake(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double[], double[], int, double)
            --> java.lang.Double *
            --> java.lang.Double.valueOf(double) *
            --> java.lang.Object *
            --> java.lang.Object.Object() *
            --> java.util.Vector *
            --> java.util.Vector.Vector() *
            --> java.util.Vector.add(java.lang.Object) *
        Resampler(java.util.Vector, double)
            --> de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.des
            --> de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.max
            --> de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.min
            --> de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.org_x
            --> de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.org_y
            --> java.awt.geom.Point2D$Double *
            --> java.awt.geom.Point2D$Double.getX() *
            --> java.awt.geom.Point2D$Double.getY() *
            --> java.lang.Double *
            --> java.lang.Double.valueOf(double) *
            --> java.lang.Object *
            --> java.lang.Object.Object() *
            --> java.util.Vector *
            --> java.util.Vector.Vector() *
            --> java.util.Vector.add(java.lang.Object) *
            --> java.util.Vector.elementAt(int) *
            --> java.util.Vector.size() *
            <-- mtb_neurites.Neurit_Detector_2D.process()
        des
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.Resampler(Jama.Matrix, Jama.Matrix, double)
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.Resampler(java.util.Vector, double)
        getPoints()
            --> de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.org_x
            --> de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.org_y
            --> java.awt.geom.Point2D$Double.Point2D$Double(double, double) *
            --> java.io.PrintStream *
            --> java.io.PrintStream.println(java.lang.String) *
            --> java.lang.Double *
            --> java.lang.Double.doubleValue() *
            --> java.lang.Object *
            --> java.lang.String *
            --> java.lang.System.out *
            --> java.util.Vector *
            --> java.util.Vector.Vector() *
            --> java.util.Vector.Vector(int) *
            --> java.util.Vector.addElement(java.lang.Object) *
            --> java.util.Vector.elementAt(int) *
            --> java.util.Vector.size() *
            <-- mtb_neurites.Neurit_Detector_2D.process()
        get_X_coords()
            --> D[][] *
            --> Jama.Matrix *
            --> Jama.Matrix.Matrix(double[][]) *
            --> de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.org_x
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.SnakeAlgos.calcSnake(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double[], double[], int, double)
            --> java.lang.Double *
            --> java.lang.Double.doubleValue() *
            --> java.lang.Object *
            --> java.util.Vector *
            --> java.util.Vector.elementAt(int) *
            --> java.util.Vector.size() *
        get_Y_coords()
            --> D[][] *
            --> Jama.Matrix *
            --> Jama.Matrix.Matrix(double[][]) *
            --> de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.org_y
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.SnakeAlgos.calcSnake(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double[], double[], int, double)
            --> java.lang.Double *
            --> java.lang.Double.doubleValue() *
            --> java.lang.Object *
            --> java.util.Vector *
            --> java.util.Vector.elementAt(int) *
            --> java.util.Vector.size() *
        get_size()
            --> de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.org_x
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.rearrange(int)
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.resampling()
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.SnakeAlgos.calcSnake(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double[], double[], int, double)
            --> java.util.Vector *
            --> java.util.Vector.size() *
        max
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.Resampler(Jama.Matrix, Jama.Matrix, double)
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.Resampler(java.util.Vector, double)
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.resampling()
        min
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.Resampler(Jama.Matrix, Jama.Matrix, double)
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.Resampler(java.util.Vector, double)
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.resampling()
        org_x
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.Resampler(Jama.Matrix, Jama.Matrix, double)
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.Resampler(java.util.Vector, double)
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.getPoints()
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.get_X_coords()
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.get_size()
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.rearrange(int)
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.resampling()
            --> java.util.Vector *
        org_y
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.Resampler(Jama.Matrix, Jama.Matrix, double)
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.Resampler(java.util.Vector, double)
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.getPoints()
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.get_Y_coords()
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.rearrange(int)
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.resampling()
            --> java.util.Vector *
        rearrange(int)
            --> de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.get_size()
            --> de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.org_x
            --> de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.org_y
            --> de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.standardization(java.awt.geom.Point2D$Double)
            --> java.awt.geom.Point2D$Double *
            --> java.awt.geom.Point2D$Double.Point2D$Double(double, double) *
            --> java.awt.geom.Point2D$Double.getX() *
            --> java.awt.geom.Point2D$Double.getY() *
            --> java.awt.geom.Point2D$Double.x *
            --> java.awt.geom.Point2D$Double.y *
            --> java.lang.Double *
            --> java.lang.Double.doubleValue() *
            --> java.lang.Double.valueOf(double) *
            --> java.lang.Object *
            --> java.util.Vector *
            --> java.util.Vector.Vector() *
            --> java.util.Vector.add(int, java.lang.Object) *
            --> java.util.Vector.elementAt(int) *
            <-- mtb_neurites.Neurit_Detector_2D.process()
        resampling()
            --> de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.get_size()
            --> de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.max
            --> de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.min
            --> de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.org_x
            --> de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.org_y
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.SnakeAlgos.calcSnake(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double[], double[], int, double)
            --> java.lang.Double *
            --> java.lang.Double.doubleValue() *
            --> java.lang.Double.valueOf(double) *
            --> java.lang.Math.pow(double, double) *
            --> java.lang.Math.sqrt(double) *
            --> java.lang.Object *
            --> java.util.Vector *
            --> java.util.Vector.Vector() *
            --> java.util.Vector.add(int, java.lang.Object) *
            --> java.util.Vector.elementAt(int) *
            --> java.util.Vector.removeElementAt(int) *
            --> java.util.Vector.setSize(int) *
            --> java.util.Vector.size() *
        standardization(java.awt.geom.Point2D$Double)
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.rearrange(int)
            --> java.awt.geom.Point2D$Double *
            --> java.awt.geom.Point2D$Double.Point2D$Double(double, double) *
            --> java.awt.geom.Point2D$Double.getX() *
            --> java.awt.geom.Point2D$Double.getY() *
            --> java.lang.Math.pow(double, double) *
            --> java.lang.Math.sqrt(double) *
    SnakeAlgos
        --> java.lang.Object *
        SnakeAlgos()
            --> de.unihalle.informatik.MiToBo.datatypes.Snake
            --> de.unihalle.informatik.MiToBo.segmentation.contours.snakes.SnakeAlgos.snake
            --> java.lang.Object.Object() *
        SnakeAlgos(de.unihalle.informatik.MiToBo.datatypes.Snake)
            --> de.unihalle.informatik.MiToBo.datatypes.Snake
            --> de.unihalle.informatik.MiToBo.datatypes.Snake.getPoints()
            --> de.unihalle.informatik.MiToBo.datatypes.Snake.isCycle()
            --> de.unihalle.informatik.MiToBo.segmentation.contours.snakes.SnakeAlgos.cycle
            --> de.unihalle.informatik.MiToBo.segmentation.contours.snakes.SnakeAlgos.snake
            --> de.unihalle.informatik.MiToBo.segmentation.contours.snakes.SnakeAlgos.snakePoints
            --> java.lang.Object.Object() *
            --> java.util.Vector *
            <-- mtb_neurites.Neurit_Detector_2D.activeContours(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, java.util.Vector, int, double)
            <-- mtb_neurites.Neurit_Detector_2D.process()
        addAllPoints()
            --> de.unihalle.informatik.MiToBo.segmentation.contours.snakes.SnakeAlgos.sgn(int)
            --> de.unihalle.informatik.MiToBo.segmentation.contours.snakes.SnakeAlgos.snakePoints
            --> java.awt.geom.Point2D$Double *
            --> java.awt.geom.Point2D$Double.Point2D$Double(double, double) *
            --> java.awt.geom.Point2D$Double.getX() *
            --> java.awt.geom.Point2D$Double.getY() *
            --> java.lang.Object *
            --> java.util.Vector *
            --> java.util.Vector.Vector() *
            --> java.util.Vector.addElement(java.lang.Object) *
            --> java.util.Vector.elementAt(int) *
            --> java.util.Vector.size() *
            <-- mtb_neurites.Neurit_Detector_2D.process()
        calcSnake(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double[], double[], int, double)
            --> D[][] *
            --> Jama.Matrix *
            --> Jama.Matrix.Matrix(double[][]) *
            --> Jama.Matrix.get(int, int) *
            --> Jama.Matrix.inverse() *
            --> Jama.Matrix.plus(Jama.Matrix) *
            --> Jama.Matrix.times(Jama.Matrix) *
            --> Jama.Matrix.times(double) *
            --> de.unihalle.informatik.MiToBo.datatypes.Snake
            --> de.unihalle.informatik.MiToBo.datatypes.Snake.Snake(java.util.Vector, boolean)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeX()
            --> de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.Resampler()
            --> de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.Resampler(Jama.Matrix, Jama.Matrix, double)
            --> de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.get_X_coords()
            --> de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.get_Y_coords()
            --> de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.get_size()
            --> de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.resampling()
            --> de.unihalle.informatik.MiToBo.segmentation.contours.snakes.SnakeAlgos.snakePoints
            --> java.awt.geom.Point2D$Double *
            --> java.awt.geom.Point2D$Double.Point2D$Double(double, double) *
            --> java.awt.geom.Point2D$Double.getX() *
            --> java.awt.geom.Point2D$Double.getY() *
            --> java.lang.Object *
            --> java.util.Vector *
            --> java.util.Vector.elementAt(int) *
            --> java.util.Vector.setElementAt(java.lang.Object, int) *
            --> java.util.Vector.setSize(int) *
            --> java.util.Vector.size() *
            <-- mtb_neurites.Neurit_Detector_2D.activeContours(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, java.util.Vector, int, double)
        cycle
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.SnakeAlgos.SnakeAlgos(de.unihalle.informatik.MiToBo.datatypes.Snake)
        sgn(int)
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.SnakeAlgos.addAllPoints()
        snake
            --> de.unihalle.informatik.MiToBo.datatypes.Snake
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.SnakeAlgos.SnakeAlgos()
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.SnakeAlgos.SnakeAlgos(de.unihalle.informatik.MiToBo.datatypes.Snake)
        snakePoints
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.SnakeAlgos.SnakeAlgos(de.unihalle.informatik.MiToBo.datatypes.Snake)
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.SnakeAlgos.addAllPoints()
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.SnakeAlgos.calcSnake(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double[], double[], int, double)
            --> java.util.Vector *
    SnakeExternalEnergy
        --> java.lang.Object *
        getDerivativeX(double, double)
        getDerivativeY(double, double)
de.unihalle.informatik.MiToBo.segmentation.levelset
    LevelSetSolver
        <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D
        --> java.lang.Object *
        LS
            --> de.unihalle.informatik.MiToBo.datatypes.LevelSet
        LevelSetSolver(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeC()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeT()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeX()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeY()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeZ()
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.LevelSetSolver.img
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.LevelSetSolver.sizeC
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.LevelSetSolver.sizeT
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.LevelSetSolver.sizeX
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.LevelSetSolver.sizeY
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.LevelSetSolver.sizeZ
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.NoEdgesSolver3D(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double, double, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.NoEdgesSolver3D(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double, double, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> java.lang.Object.Object() *
        img
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.LevelSetSolver.LevelSetSolver(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        initialize()
        sizeC
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.LevelSetSolver.LevelSetSolver(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        sizeT
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.LevelSetSolver.LevelSetSolver(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        sizeX
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.LevelSetSolver.LevelSetSolver(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        sizeY
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.LevelSetSolver.LevelSetSolver(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        sizeZ
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.LevelSetSolver.LevelSetSolver(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        solve()
        step()
    NoEdgesSolver3D
        --> de.unihalle.informatik.MiToBo.segmentation.levelset.LevelSetSolver
        F1
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.NoEdgesSolver3D(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double, double, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.NoEdgesSolver3D(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double, double, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.initMaskThreshold()
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.initThreshold()
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.solve()
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.step()
        F2
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.NoEdgesSolver3D(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double, double, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.NoEdgesSolver3D(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double, double, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.initMaskThreshold()
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.initThreshold()
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.solve()
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.step()
        LS *
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.NoEdgesSolver3D(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double, double, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.NoEdgesSolver3D(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double, double, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.deltaSurface(int, int, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.getLevelSetAsBinary()
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.initMaskThreshold()
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.initThreshold()
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.step()
        NoEdgesSolver3D(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double, double, int)
            --> de.unihalle.informatik.MiToBo.datatypes.LevelSet
            --> de.unihalle.informatik.MiToBo.datatypes.LevelSetByte.LevelSetByte(int, int, int, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.LevelSetSolver.LevelSetSolver(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.F1
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.F2
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.LS *
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.SQRT_2
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.SQRT_3
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.c1
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.c2
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.channel
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.lambda1
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.lambda2
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.m
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.mask
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.mu
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.n
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.nu
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.sizeC *
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.sizeT *
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.sizeX *
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.sizeY *
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.sizeZ *
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.surface
            --> java.lang.Math.sqrt(double) *
            <-- mtb_regions.Segment_No_Edges3D.run(ij.process.ImageProcessor)
        NoEdgesSolver3D(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double, double, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> de.unihalle.informatik.MiToBo.datatypes.LevelSet
            --> de.unihalle.informatik.MiToBo.datatypes.LevelSetByte.LevelSetByte(int, int, int, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.LevelSetSolver.LevelSetSolver(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.F1
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.F2
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.LS *
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.SQRT_2
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.SQRT_3
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.c1
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.c2
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.channel
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.lambda1
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.lambda2
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.m
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.mask
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.mu
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.n
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.nu
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.sizeC *
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.sizeT *
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.sizeX *
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.sizeY *
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.sizeZ *
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.surface
            --> java.lang.Math.sqrt(double) *
        SQRT_2
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.NoEdgesSolver3D(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double, double, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.NoEdgesSolver3D(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double, double, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.gradientHeavyside(double, double, double, double)
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.initMaskThreshold()
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.initThreshold()
        SQRT_3
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.NoEdgesSolver3D(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double, double, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.NoEdgesSolver3D(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double, double, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.gradientHeavyside(double, double, double, double)
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.initMaskThreshold()
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.initThreshold()
        c1
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.NoEdgesSolver3D(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double, double, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.NoEdgesSolver3D(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double, double, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.initMaskThreshold()
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.initThreshold()
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.solve()
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.step()
        c2
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.NoEdgesSolver3D(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double, double, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.NoEdgesSolver3D(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double, double, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.initMaskThreshold()
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.initThreshold()
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.solve()
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.step()
        channel
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.NoEdgesSolver3D(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double, double, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.NoEdgesSolver3D(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double, double, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.initMaskThreshold()
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.initThreshold()
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.step()
        deltaSurface(int, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.LevelSet
            --> de.unihalle.informatik.MiToBo.datatypes.LevelSet.getValue(int, int, int, int, int)
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.LS *
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.gradientHeavyside(double, double, double, double)
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.sizeX *
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.sizeY *
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.sizeZ *
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.step()
        getLevelSetAsBinary()
            --> de.unihalle.informatik.MiToBo.datatypes.LevelSet
            --> de.unihalle.informatik.MiToBo.datatypes.LevelSet.toBinaryImage()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.LS *
            <-- mtb_regions.Segment_No_Edges3D.run(ij.process.ImageProcessor)
        gradientHeavyside(double, double, double, double)
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.SQRT_2
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.SQRT_3
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.deltaSurface(int, int, int)
        img *
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.initMaskThreshold()
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.initThreshold()
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.step()
        initMaskThreshold()
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> de.unihalle.informatik.MiToBo.datatypes.LevelSet
            --> de.unihalle.informatik.MiToBo.datatypes.LevelSet.getValue(int, int, int, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.LevelSet.setValue(int, int, int, int, int, double)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getValueDouble(int, int, int, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getValueInt(int, int, int, int, int)
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.F1
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.F2
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.LS *
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.SQRT_2
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.SQRT_3
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.c1
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.c2
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.channel
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.img *
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.initialize()
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.m
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.mask
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.n
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.sizeX *
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.sizeY *
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.sizeZ *
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.surface
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshMoments.calcThreshold(de.unihalle.informatik.MiToBo.datatypes.Histogram)
        initThreshold()
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> de.unihalle.informatik.MiToBo.datatypes.LevelSet
            --> de.unihalle.informatik.MiToBo.datatypes.LevelSet.getValue(int, int, int, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.LevelSet.setValue(int, int, int, int, int, double)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getValueDouble(int, int, int, int, int)
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.F1
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.F2
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.LS *
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.SQRT_2
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.SQRT_3
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.c1
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.c2
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.channel
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.img *
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.initialize()
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.m
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.n
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.sizeX *
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.sizeY *
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.sizeZ *
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.surface
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshMoments.calcThreshold(de.unihalle.informatik.MiToBo.datatypes.Histogram)
        initialize()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.initMaskThreshold()
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.initThreshold()
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.mask
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.solve()
        lambda1
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.NoEdgesSolver3D(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double, double, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.NoEdgesSolver3D(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double, double, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.solve()
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.step()
        lambda2
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.NoEdgesSolver3D(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double, double, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.NoEdgesSolver3D(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double, double, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.solve()
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.step()
        m
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.NoEdgesSolver3D(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double, double, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.NoEdgesSolver3D(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double, double, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.initMaskThreshold()
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.initThreshold()
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.solve()
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.step()
        mask
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.NoEdgesSolver3D(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double, double, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.NoEdgesSolver3D(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double, double, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.initMaskThreshold()
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.initialize()
        mu
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.NoEdgesSolver3D(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double, double, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.NoEdgesSolver3D(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double, double, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.solve()
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.step()
        n
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.NoEdgesSolver3D(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double, double, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.NoEdgesSolver3D(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double, double, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.initMaskThreshold()
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.initThreshold()
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.step()
        nu
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.NoEdgesSolver3D(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double, double, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.NoEdgesSolver3D(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double, double, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.solve()
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.step()
        sizeC *
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.NoEdgesSolver3D(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double, double, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.NoEdgesSolver3D(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double, double, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        sizeT *
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.NoEdgesSolver3D(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double, double, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.NoEdgesSolver3D(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double, double, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        sizeX *
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.NoEdgesSolver3D(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double, double, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.NoEdgesSolver3D(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double, double, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.deltaSurface(int, int, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.initMaskThreshold()
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.initThreshold()
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.step()
        sizeY *
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.NoEdgesSolver3D(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double, double, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.NoEdgesSolver3D(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double, double, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.deltaSurface(int, int, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.initMaskThreshold()
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.initThreshold()
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.step()
        sizeZ *
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.NoEdgesSolver3D(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double, double, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.NoEdgesSolver3D(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double, double, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.deltaSurface(int, int, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.initMaskThreshold()
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.initThreshold()
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.step()
        solve()
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.F1
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.F2
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.c1
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.c2
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.initialize()
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.lambda1
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.lambda2
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.m
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.mu
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.nu
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.step()
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.surface
            --> java.io.PrintStream *
            --> java.io.PrintStream.println() *
            --> java.io.PrintStream.println(java.lang.String) *
            --> java.lang.String *
            --> java.lang.StringBuilder *
            --> java.lang.StringBuilder.StringBuilder(java.lang.String) *
            --> java.lang.StringBuilder.append(double) *
            --> java.lang.StringBuilder.append(int) *
            --> java.lang.StringBuilder.append(java.lang.String) *
            --> java.lang.StringBuilder.append(long) *
            --> java.lang.StringBuilder.toString() *
            --> java.lang.System.currentTimeMillis() *
            --> java.lang.System.out *
            <-- mtb_regions.Segment_No_Edges3D.run(ij.process.ImageProcessor)
        step()
            --> de.unihalle.informatik.MiToBo.datatypes.LevelSet
            --> de.unihalle.informatik.MiToBo.datatypes.LevelSet.getValue(int, int, int, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.LevelSet.setValue(int, int, int, int, int, double)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getValueDouble(int, int, int, int, int)
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.F1
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.F2
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.LS *
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.c1
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.c2
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.channel
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.deltaSurface(int, int, int)
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.img *
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.lambda1
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.lambda2
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.m
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.mu
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.n
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.nu
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.sizeX *
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.sizeY *
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.sizeZ *
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.solve()
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.surface
        surface
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.NoEdgesSolver3D(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double, double, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.NoEdgesSolver3D(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double, double, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.initMaskThreshold()
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.initThreshold()
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.solve()
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.step()
de.unihalle.informatik.MiToBo.segmentation.regions.labeling
    LabelComponentsRecursive
        --> java.lang.Object *
        LabelComponentsRecursive()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> java.lang.Object.Object() *
            <-- mtb_regions.Label_Components_Recursive.run(ij.process.ImageProcessor)
        binIP
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsRecursive.labelRecursive(int, int, int, de.unihalle.informatik.MiToBo.datatypes.Region2D)
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsRecursive.regionSegmentation(ij.process.ImageProcessor)
            --> ij.process.ImageProcessor *
        height
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsRecursive.labelRecursive(int, int, int, de.unihalle.informatik.MiToBo.datatypes.Region2D)
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsRecursive.regionSegmentation(ij.process.ImageProcessor)
        labelIP
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsRecursive.labelRecursive(int, int, int, de.unihalle.informatik.MiToBo.datatypes.Region2D)
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsRecursive.regionSegmentation(ij.process.ImageProcessor)
            --> ij.process.ImageProcessor *
        labelImage
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsRecursive.regionSegmentation(ij.process.ImageProcessor)
            --> ij.ImagePlus *
        labelRecursive(int, int, int, de.unihalle.informatik.MiToBo.datatypes.Region2D)
            --> de.unihalle.informatik.MiToBo.datatypes.Region2D
            --> de.unihalle.informatik.MiToBo.datatypes.Region2D.addPixel(int, int)
            --> de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsRecursive.binIP
            --> de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsRecursive.height
            --> de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsRecursive.labelIP
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsRecursive.regionSegmentation(ij.process.ImageProcessor)
            --> de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsRecursive.width
            --> ij.process.ImageProcessor *
            --> ij.process.ImageProcessor.getPixel(int, int) *
            --> ij.process.ImageProcessor.putPixel(int, int, int) *
        regionSegmentation(ij.process.ImageProcessor)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> de.unihalle.informatik.MiToBo.datatypes.Region2D
            --> de.unihalle.informatik.MiToBo.datatypes.Region2D.Region2D()
            --> de.unihalle.informatik.MiToBo.datatypes.Region2D.addPixel(int, int)
            --> de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsRecursive.binIP
            --> de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsRecursive.height
            --> de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsRecursive.labelIP
            --> de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsRecursive.labelImage
            --> de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsRecursive.labelRecursive(int, int, int, de.unihalle.informatik.MiToBo.datatypes.Region2D)
            --> de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsRecursive.width
            --> ij.ImagePlus *
            --> ij.ImagePlus.getProcessor() *
            --> ij.gui.NewImage.createFloatImage(java.lang.String, int, int, int, int) *
            --> ij.process.ImageProcessor *
            --> ij.process.ImageProcessor.getHeight() *
            --> ij.process.ImageProcessor.getPixel(int, int) *
            --> ij.process.ImageProcessor.getWidth() *
            --> ij.process.ImageProcessor.putPixel(int, int, int) *
            --> java.lang.Object *
            --> java.lang.String *
            --> java.util.Vector *
            --> java.util.Vector.Vector() *
            --> java.util.Vector.addElement(java.lang.Object) *
            <-- mtb_regions.Label_Components_Recursive.run(ij.process.ImageProcessor)
        width
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsRecursive.labelRecursive(int, int, int, de.unihalle.informatik.MiToBo.datatypes.Region2D)
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsRecursive.regionSegmentation(ij.process.ImageProcessor)
    LabelComponentsSequential
        --> java.lang.Object *
        LabelComponentsSequential()
            <-- de.unihalle.informatik.MiToBo.apps.cells2D.CellSegmentAlgos.voronoiTesselation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcLongestPathProfiles(ij.ImagePlus, ij.ImagePlus, ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.morphology.ComponentPostprocess.EraseSmallComponents(ij.process.ImageProcessor, int)
            <-- de.unihalle.informatik.MiToBo.morphology.ComponentPostprocess.LinkAdjacentComponents(ij.process.ImageProcessor, double)
            --> java.lang.Object.Object() *
            <-- mtb_contours.Contour_on_Labeled_Components.add_InnerContours(java.util.Vector, java.util.Vector)
            <-- mtb_contours.Contour_on_Labeled_Components.run(ij.process.ImageProcessor)
            <-- mtb_neurites.Neurit_Detector_2D.getSnakeRegion(java.awt.Polygon)
            <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
            <-- mtb_neurites.Neurit_Detector_2D.removeCellBody(de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            <-- mtb_regions.Label_Components_Sequential.run(ij.process.ImageProcessor)
        getLabelSavely(int, int)
            --> de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential.m_height
            --> de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential.m_labelIP
            --> de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential.m_width
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential.regionSegmentation(ij.process.ImageProcessor, boolean)
            --> ij.process.ImageProcessor *
            --> ij.process.ImageProcessor.getPixel(int, int) *
        m_height
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential.getLabelSavely(int, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential.regionSegmentation(ij.process.ImageProcessor, boolean)
        m_labelIP
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential.getLabelSavely(int, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential.regionSegmentation(ij.process.ImageProcessor, boolean)
            --> ij.process.ImageProcessor *
        m_labelImage
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential.regionSegmentation(ij.process.ImageProcessor, boolean)
            --> ij.ImagePlus *
        m_width
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential.getLabelSavely(int, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential.regionSegmentation(ij.process.ImageProcessor, boolean)
        regionSegmentation(ij.process.ImageProcessor, boolean)
            <-- de.unihalle.informatik.MiToBo.apps.cells2D.CellSegmentAlgos.voronoiTesselation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcLongestPathProfiles(ij.ImagePlus, ij.ImagePlus, ij.ImagePlus)
            --> de.unihalle.informatik.MiToBo.datatypes.Region2D
            --> de.unihalle.informatik.MiToBo.datatypes.Region2D.Region2D()
            --> de.unihalle.informatik.MiToBo.datatypes.Region2D.addPixel(int, int)
            <-- de.unihalle.informatik.MiToBo.morphology.ComponentPostprocess.EraseSmallComponents(ij.process.ImageProcessor, int)
            <-- de.unihalle.informatik.MiToBo.morphology.ComponentPostprocess.LinkAdjacentComponents(ij.process.ImageProcessor, double)
            --> de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential.getLabelSavely(int, int)
            --> de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential.m_height
            --> de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential.m_labelIP
            --> de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential.m_labelImage
            --> de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential.m_width
            --> ij.ImagePlus *
            --> ij.ImagePlus.getProcessor() *
            --> ij.gui.NewImage.createFloatImage(java.lang.String, int, int, int, int) *
            --> ij.process.ImageProcessor *
            --> ij.process.ImageProcessor.getHeight() *
            --> ij.process.ImageProcessor.getPixel(int, int) *
            --> ij.process.ImageProcessor.getWidth() *
            --> ij.process.ImageProcessor.putPixel(int, int, int) *
            --> java.lang.Integer *
            --> java.lang.Integer.intValue() *
            --> java.lang.Integer.valueOf(int) *
            --> java.lang.Object *
            --> java.lang.String *
            --> java.util.HashMap.HashMap() *
            --> java.util.HashMap.clear() *
            --> java.util.HashMap.containsKey(java.lang.Object) *
            --> java.util.HashMap.get(java.lang.Object) *
            --> java.util.HashMap.put(java.lang.Object, java.lang.Object) *
            --> java.util.Iterator *
            --> java.util.Iterator.hasNext() *
            --> java.util.Iterator.next() *
            --> java.util.LinkedHashSet *
            --> java.util.LinkedHashSet.LinkedHashSet() *
            --> java.util.LinkedHashSet.add(java.lang.Object) *
            --> java.util.LinkedHashSet.iterator() *
            --> java.util.Vector *
            --> java.util.Vector.Vector() *
            --> java.util.Vector.add(java.lang.Object) *
            --> java.util.Vector.clear() *
            --> java.util.Vector.get(int) *
            --> java.util.Vector.set(int, java.lang.Object) *
            --> java.util.Vector.size() *
            <-- mtb_contours.Contour_on_Labeled_Components.add_InnerContours(java.util.Vector, java.util.Vector)
            <-- mtb_contours.Contour_on_Labeled_Components.run(ij.process.ImageProcessor)
            <-- mtb_neurites.Neurit_Detector_2D.getSnakeRegion(java.awt.Polygon)
            <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
            <-- mtb_neurites.Neurit_Detector_2D.removeCellBody(de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            <-- mtb_regions.Label_Components_Sequential.run(ij.process.ImageProcessor)
    LabelComponentsSequential3D
        --> de.unihalle.informatik.MiToBo.meta.MTBOpBase
        LabelComponentsSequential3D()
            --> de.unihalle.informatik.MiToBo.meta.MTBOpBase.MTBOpBase()
            <-- mtb_regions.Label_Components_Sequential_3D.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        getLabelSavely(int, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getValueInt(int, int, int, int, int)
            --> de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3D.m_labelImage
            --> de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3D.m_sizeX
            --> de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3D.m_sizeY
            --> de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3D.m_sizeZ
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3D.regionSegmentation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, boolean, int, int)
        getMetaParams()
            --> java.lang.Object *
            --> java.util.LinkedList *
            --> java.util.LinkedList.LinkedList() *
            --> java.util.LinkedList.add(java.lang.Object) *
        m_c
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3D.regionSegmentation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, boolean, int, int)
        m_labelImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3D.getLabelSavely(int, int, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3D.regionSegmentation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, boolean, int, int)
        m_sizeX
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3D.getLabelSavely(int, int, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3D.regionSegmentation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, boolean, int, int)
        m_sizeY
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3D.getLabelSavely(int, int, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3D.regionSegmentation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, boolean, int, int)
        m_sizeZ
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3D.getLabelSavely(int, int, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3D.regionSegmentation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, boolean, int, int)
        m_t
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3D.regionSegmentation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, boolean, int, int)
        operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeC()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeT()
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams
            --> de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3D.regionSegmentation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, boolean, int, int)
            --> de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3DParams
            --> de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3DParams.getDiagonalNeighborsFlag()
            --> de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3DParams.getInputImage()
            --> de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3DParams.setResultingRegions(java.util.Vector, int, int)
            --> java.util.Vector *
        regionSegmentation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, boolean, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.Region3D
            --> de.unihalle.informatik.MiToBo.datatypes.Region3D.Region3D()
            --> de.unihalle.informatik.MiToBo.datatypes.Region3D.addPoint(double, double, double)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.createMTBImage(int, int, int, int, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeX()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeY()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeZ()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getValueInt(int, int, int, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.putValueInt(int, int, int, int, int, int)
            --> de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3D.getLabelSavely(int, int, int)
            --> de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3D.m_c
            --> de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3D.m_labelImage
            --> de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3D.m_sizeX
            --> de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3D.m_sizeY
            --> de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3D.m_sizeZ
            --> de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3D.m_t
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3D.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            --> java.lang.Integer *
            --> java.lang.Integer.intValue() *
            --> java.lang.Integer.valueOf(int) *
            --> java.lang.Object *
            --> java.util.HashMap.HashMap() *
            --> java.util.HashMap.clear() *
            --> java.util.HashMap.containsKey(java.lang.Object) *
            --> java.util.HashMap.get(java.lang.Object) *
            --> java.util.HashMap.put(java.lang.Object, java.lang.Object) *
            --> java.util.Iterator *
            --> java.util.Iterator.hasNext() *
            --> java.util.Iterator.next() *
            --> java.util.LinkedHashSet *
            --> java.util.LinkedHashSet.LinkedHashSet() *
            --> java.util.LinkedHashSet.add(java.lang.Object) *
            --> java.util.LinkedHashSet.iterator() *
            --> java.util.Vector *
            --> java.util.Vector.Vector() *
            --> java.util.Vector.add(java.lang.Object) *
            --> java.util.Vector.clear() *
            --> java.util.Vector.get(int) *
            --> java.util.Vector.set(int, java.lang.Object) *
            --> java.util.Vector.size() *
        runOp(de.unihalle.informatik.MiToBo.meta.MTBOpParams) *
            <-- mtb_regions.Label_Components_Sequential_3D.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
    LabelComponentsSequential3DParams
        --> de.unihalle.informatik.MiToBo.meta.MTBOpParams
        <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3D.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        <-- mtb_regions.Label_Components_Sequential_3D.parameterDialog()
        <-- mtb_regions.Label_Components_Sequential_3D.run(ij.process.ImageProcessor)
        LabelComponentsSequential3DParams(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, boolean)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams.MTBOpParams()
            --> de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3DParams.setParameter(java.lang.String, java.lang.Object) *
            --> java.lang.Boolean *
            --> java.lang.Boolean.valueOf(boolean) *
            --> java.lang.Object *
            --> java.lang.String *
            <-- mtb_regions.Label_Components_Sequential_3D.parameterDialog()
        LabelComponentsSequential3DParams(de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, boolean)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.meta.MTBMetaData
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams.MTBOpParams(de.unihalle.informatik.MiToBo.meta.MTBMetaData)
            --> de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3DParams.setParameter(java.lang.String, java.lang.Object) *
            --> java.lang.Boolean *
            --> java.lang.Boolean.valueOf(boolean) *
            --> java.lang.Object *
            --> java.lang.String *
        getDiagonalNeighborsFlag()
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3D.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            --> de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3DParams.getParameter(java.lang.String) *
            --> java.lang.Boolean *
            --> java.lang.Boolean.booleanValue() *
            --> java.lang.Object *
            --> java.lang.String *
        getInputImage()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3D.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            --> de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3DParams.getParameter(java.lang.String) *
            --> java.lang.Object *
            --> java.lang.String *
            <-- mtb_regions.Label_Components_Sequential_3D.run(ij.process.ImageProcessor)
        getMetaParams()
            --> java.lang.Object *
            --> java.util.LinkedList *
            --> java.util.LinkedList.LinkedList() *
            --> java.util.LinkedList.add(java.lang.Object) *
        getParameter(java.lang.String) *
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3DParams.getDiagonalNeighborsFlag()
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3DParams.getInputImage()
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3DParams.getResultingRegions(int, int)
        getResultingRegions(int, int)
            --> de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3DParams.getParameter(java.lang.String) *
            --> java.lang.Object *
            --> java.lang.String *
            --> java.lang.StringBuilder *
            --> java.lang.StringBuilder.StringBuilder(java.lang.String) *
            --> java.lang.StringBuilder.append(int) *
            --> java.lang.StringBuilder.append(java.lang.String) *
            --> java.lang.StringBuilder.toString() *
            --> java.util.Vector *
            <-- mtb_regions.Label_Components_Sequential_3D.run(ij.process.ImageProcessor)
        setMetaDataObject(de.unihalle.informatik.MiToBo.meta.MTBMetaData) *
            <-- mtb_regions.Label_Components_Sequential_3D.run(ij.process.ImageProcessor)
        setParameter(java.lang.String, java.lang.Object) *
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3DParams.LabelComponentsSequential3DParams(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, boolean)
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3DParams.LabelComponentsSequential3DParams(de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, boolean)
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3DParams.setResultingRegions(java.util.Vector, int, int)
        setResultingRegions(java.util.Vector, int, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3D.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            --> de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3DParams.setParameter(java.lang.String, java.lang.Object) *
            --> java.lang.Object *
            --> java.lang.String *
            --> java.lang.StringBuilder *
            --> java.lang.StringBuilder.StringBuilder(java.lang.String) *
            --> java.lang.StringBuilder.append(int) *
            --> java.lang.StringBuilder.append(java.lang.String) *
            --> java.lang.StringBuilder.toString() *
            --> java.util.Vector *
de.unihalle.informatik.MiToBo.segmentation.thresholds
    CalcGlobalThreshMoments
        --> java.lang.Object *
        CalcGlobalThreshMoments()
            --> java.lang.Object.Object() *
        calcThreshold(de.unihalle.informatik.MiToBo.datatypes.Histogram)
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.getData()
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.getSize()
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.normalize()
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.initMaskThreshold()
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.initThreshold()
            --> java.lang.Math.sqrt(double) *
    CalcGlobalThreshOtsu
        <-- de.unihalle.informatik.MiToBo.apps.cells2D.CellSegmentAlgos.voronoiTesselation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.detectGranules_old(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.detectNuclei(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        --> de.unihalle.informatik.MiToBo.meta.MTBOpBase
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu$OtsuParams.CalcGlobalThreshOtsu$OtsuParams(de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu$OtsuParams.CalcGlobalThreshOtsu$OtsuParams(de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu, de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu$OtsuParams.this$0
        <-- mtb_morphology.CalcOtsuThreshold_Image.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
        CalcGlobalThreshOtsu()
            <-- de.unihalle.informatik.MiToBo.apps.cells2D.CellSegmentAlgos.voronoiTesselation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.detectGranules_old(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.detectNuclei(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> de.unihalle.informatik.MiToBo.meta.MTBOpBase.MTBOpBase()
            <-- mtb_morphology.CalcOtsuThreshold_Image.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
        calcThreshold(de.unihalle.informatik.MiToBo.datatypes.Histogram)
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.getData()
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.getLargestNonEmptyBin()
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.getMean()
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.getSmallestNonEmptyBin()
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.normalize()
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu.calcThreshold(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu.calcThreshold(ij.process.ImageProcessor)
        calcThreshold(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu.calcThreshold(de.unihalle.informatik.MiToBo.datatypes.Histogram)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        calcThreshold(ij.process.ImageProcessor)
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram
            --> de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(ij.process.ImageProcessor)
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu.calcThreshold(de.unihalle.informatik.MiToBo.datatypes.Histogram)
            --> ij.process.ImageProcessor *
        getMetaParams()
            --> java.util.LinkedList *
            --> java.util.LinkedList.LinkedList() *
        mtbImg
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu$OtsuParams
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu$OtsuParams.getInputImage()
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu$OtsuParams.setResultThresh(double)
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu.calcThreshold(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu.mtbImg
        runOp(de.unihalle.informatik.MiToBo.meta.MTBOpParams) *
            <-- de.unihalle.informatik.MiToBo.apps.cells2D.CellSegmentAlgos.voronoiTesselation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.detectGranules_old(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.detectNuclei(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- mtb_morphology.CalcOtsuThreshold_Image.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
    CalcGlobalThreshOtsu$OtsuParams
        --> de.unihalle.informatik.MiToBo.meta.MTBOpParams
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        CalcGlobalThreshOtsu$OtsuParams(de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.apps.cells2D.CellSegmentAlgos.voronoiTesselation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams.MTBOpParams()
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu$OtsuParams.setParameter(java.lang.String, java.lang.Object) *
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu$OtsuParams.this$0
            --> java.lang.Object *
            --> java.lang.String *
            <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
        CalcGlobalThreshOtsu$OtsuParams(de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu, de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.detectGranules_old(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.detectNuclei(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.meta.MTBMetaData
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams.MTBOpParams(de.unihalle.informatik.MiToBo.meta.MTBMetaData)
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu$OtsuParams.setParameter(java.lang.String, java.lang.Object) *
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu$OtsuParams.this$0
            --> java.lang.Object *
            --> java.lang.String *
            <-- mtb_morphology.CalcOtsuThreshold_Image.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        getInputImage()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu$OtsuParams.getParameter(java.lang.String) *
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            --> java.lang.Object *
            --> java.lang.String *
        getOtsuThreshold()
            <-- de.unihalle.informatik.MiToBo.apps.cells2D.CellSegmentAlgos.voronoiTesselation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.detectGranules_old(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.detectNuclei(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu$OtsuParams.getParameter(java.lang.String) *
            --> java.lang.Double *
            --> java.lang.Double.doubleValue() *
            --> java.lang.Object *
            --> java.lang.String *
            <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
        getParameter(java.lang.String) *
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu$OtsuParams.getInputImage()
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu$OtsuParams.getOtsuThreshold()
            <-- mtb_morphology.CalcOtsuThreshold_Image.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        setParameter(java.lang.String, java.lang.Object) *
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu$OtsuParams.CalcGlobalThreshOtsu$OtsuParams(de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu$OtsuParams.CalcGlobalThreshOtsu$OtsuParams(de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu, de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu$OtsuParams.setResultThresh(double)
        setResultThresh(double)
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu$OtsuParams.setParameter(java.lang.String, java.lang.Object) *
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            --> java.lang.Double.Double(double) *
            --> java.lang.Object *
            --> java.lang.String *
        this$0
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu$OtsuParams.CalcGlobalThreshOtsu$OtsuParams(de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu$OtsuParams.CalcGlobalThreshOtsu$OtsuParams(de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu, de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
    ImgThresh
        --> java.lang.Object *
        <-- mtb_morphology.Threshold_Image.dialogItemChanged(ij.gui.GenericDialog, java.awt.AWTEvent)
        <-- mtb_morphology.Threshold_Image.m_th
        <-- mtb_morphology.Threshold_Image.run(ij.process.ImageProcessor)
        ImgThresh()
            <-- de.unihalle.informatik.MiToBo.apps.cells2D.CellSegmentAlgos.voronoiTesselation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.detectGranules_old(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.detectNuclei(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> java.lang.Object.Object() *
            <-- mtb_morphology.Threshold_Image.run(ij.process.ImageProcessor)
            <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
        applyThreshold(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getActualSliceIndex()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeStack()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeX()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeY()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getValueDouble(int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.putValueDouble(int, int, double)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.setActualSliceIndex(int)
        applyThreshold(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double)
            <-- de.unihalle.informatik.MiToBo.apps.cells2D.CellSegmentAlgos.voronoiTesselation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.detectGranules_old(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.detectNuclei(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.duplicate()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getActualSliceIndex()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeStack()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeX()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeY()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getValueDouble(int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.putValueDouble(int, int, double)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.setActualSliceIndex(int)
        applyThreshold(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            --> B[] *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getImagePlus()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeX()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeY()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.createMTBImage(ij.ImagePlus) *
            --> ij.ImagePlus *
            --> ij.ImagePlus.getProcessor() *
            --> ij.gui.NewImage.createByteImage(java.lang.String, int, int, int, int) *
            --> ij.process.ImageProcessor *
            --> ij.process.ImageProcessor.getPixel(int, int) *
            --> ij.process.ImageProcessor.getPixels() *
            --> java.lang.Object *
            --> java.lang.String *
            <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
        applyThreshold(ij.process.ImageProcessor, int)
            --> B[] *
            --> ij.ImagePlus *
            --> ij.ImagePlus.getProcessor() *
            --> ij.gui.NewImage.createByteImage(java.lang.String, int, int, int, int) *
            --> ij.process.ImageProcessor *
            --> ij.process.ImageProcessor.getHeight() *
            --> ij.process.ImageProcessor.getPixel(int, int) *
            --> ij.process.ImageProcessor.getPixels() *
            --> ij.process.ImageProcessor.getWidth() *
            --> java.lang.Object *
            --> java.lang.String *
        applyThreshold(ij.process.ImageProcessor, int, int, int)
            --> ij.process.ImageProcessor *
            --> ij.process.ImageProcessor.duplicate() *
            --> ij.process.ImageProcessor.getHeight() *
            --> ij.process.ImageProcessor.getPixel(int, int) *
            --> ij.process.ImageProcessor.getWidth() *
            --> ij.process.ImageProcessor.putPixel(int, int, int) *
        applyThresholdToSlice(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getActualSliceIndex()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeX()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeY()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getValueDouble(int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.putValueDouble(int, int, double)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.setActualSliceIndex(int)
            <-- mtb_morphology.Threshold_Image.dialogItemChanged(ij.gui.GenericDialog, java.awt.AWTEvent)
            <-- mtb_morphology.Threshold_Image.run(ij.process.ImageProcessor)
    ImgThreshNiblack
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.detectGranules_old(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        --> de.unihalle.informatik.MiToBo.meta.MTBOpBase
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams.ImgThreshNiblack$NiblackParams(de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$Mode, double, double, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams.ImgThreshNiblack$NiblackParams(de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack, de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$Mode, double, double, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams.this$0
        <-- mtb_morphology.Threshold_Image_Niblack.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        $SWITCH_TABLE$de$unihalle$informatik$MiToBo$segmentation$thresholds$ImgThreshNiblack$Mode
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.$SWITCH_TABLE$de$unihalle$informatik$MiToBo$segmentation$thresholds$ImgThreshNiblack$Mode()
        $SWITCH_TABLE$de$unihalle$informatik$MiToBo$segmentation$thresholds$ImgThreshNiblack$Mode()
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$Mode
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$Mode.MASKWISE
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$Mode.STD
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$Mode.STD_LOCVARCHECK
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$Mode.WHOLE_IMAGE
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$Mode.ordinal() *
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$Mode.values()
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.$SWITCH_TABLE$de$unihalle$informatik$MiToBo$segmentation$thresholds$ImgThreshNiblack$Mode
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            --> java.lang.NoSuchFieldError *
        ImgThreshNiblack()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.detectGranules_old(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> de.unihalle.informatik.MiToBo.meta.MTBOpBase.MTBOpBase()
            <-- mtb_morphology.Threshold_Image_Niblack.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
        applyNiblackThreshold(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, double, double, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.createMTBImage(int, int, int, int, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeX()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeY()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getValueInt(int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.getValueInt(int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.putValueInt(int, int, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            --> java.lang.Math.sqrt(double) *
        applyNiblackThresholdMaskwise(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, double, double, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            --> S[] *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.createMTBImage(int, int, int, int, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getImagePlus()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeX()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeY()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.putValueInt(int, int, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            --> ij.ImagePlus *
            --> ij.ImagePlus.getProcessor() *
            --> ij.process.ImageProcessor *
            --> ij.process.ImageProcessor.getPixels() *
            --> ij.process.ImageProcessor.getRoi() *
            --> ij.process.ImageProcessor.setRoi(int, int, int, int) *
            --> java.awt.Rectangle *
            --> java.awt.Rectangle.height *
            --> java.awt.Rectangle.width *
            --> java.awt.Rectangle.x *
            --> java.awt.Rectangle.y *
            --> java.lang.Object *
        applyNiblackThresholdWholeImage(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.createMTBImage(int, int, int, int, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeX()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeY()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getValueInt(int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.getValueInt(int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.putValueInt(int, int, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.applyNiblackThresholdWholeImage(ij.process.ImageProcessor, double, double, ij.ImagePlus)
            --> java.lang.Math.sqrt(double) *
            <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
        applyNiblackThresholdWholeImage(ij.process.ImageProcessor, double, double, ij.ImagePlus)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.createMTBImage(ij.ImagePlus)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.getImagePlus()
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.applyNiblackThresholdWholeImage(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            --> ij.ImagePlus *
            --> ij.ImagePlus.getProcessor() *
            --> ij.gui.NewImage.createShortImage(java.lang.String, int, int, int, int) *
            --> ij.process.ImageProcessor *
            --> ij.process.ImageProcessor.copyBits(ij.process.ImageProcessor, int, int, int) *
            --> ij.process.ImageProcessor.getHeight() *
            --> ij.process.ImageProcessor.getWidth() *
            --> java.lang.String *
        applyNiblackThreshold_withLocalVarCheck(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, double, double, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.createMTBImage(int, int, int, int, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeX()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeY()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getValueInt(int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.getValueInt(int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.putValueInt(int, int, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            --> java.lang.Math.abs(double) *
            --> java.lang.Math.sqrt(double) *
        getMetaParams()
            --> java.lang.Object *
            --> java.util.LinkedList *
            --> java.util.LinkedList.LinkedList() *
            --> java.util.LinkedList.add(java.lang.Object) *
        mtbImg
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$Mode
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$Mode.ordinal() *
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams.getEnhanceParamR()
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams.getInputImage()
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams.getMask()
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams.getMode()
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams.getScalingK()
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams.getSlidingWindowSize()
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams.setResultImage(de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.$SWITCH_TABLE$de$unihalle$informatik$MiToBo$segmentation$thresholds$ImgThreshNiblack$Mode()
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.applyNiblackThreshold(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, double, double, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.applyNiblackThresholdMaskwise(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, double, double, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.applyNiblackThreshold_withLocalVarCheck(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, double, double, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.mtbImg
        runOp(de.unihalle.informatik.MiToBo.meta.MTBOpParams) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.detectGranules_old(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- mtb_morphology.Threshold_Image_Niblack.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
    ImgThreshNiblack$Mode
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.detectGranules_old(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams.ImgThreshNiblack$NiblackParams(de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$Mode, double, double, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams.ImgThreshNiblack$NiblackParams(de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack, de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$Mode, double, double, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams.getMode()
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.$SWITCH_TABLE$de$unihalle$informatik$MiToBo$segmentation$thresholds$ImgThreshNiblack$Mode()
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        --> java.lang.Enum *
        <-- mtb_morphology.Threshold_Image_Niblack.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        ENUM$VALUES
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$Mode.static {}
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$Mode.values()
        ImgThreshNiblack$Mode(java.lang.String, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$Mode.static {}
            --> java.lang.Enum.Enum(java.lang.String, int) *
            --> java.lang.String *
        MASKWISE
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$Mode.static {}
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.$SWITCH_TABLE$de$unihalle$informatik$MiToBo$segmentation$thresholds$ImgThreshNiblack$Mode()
        STD
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$Mode.static {}
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.$SWITCH_TABLE$de$unihalle$informatik$MiToBo$segmentation$thresholds$ImgThreshNiblack$Mode()
            <-- mtb_morphology.Threshold_Image_Niblack.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        STD_LOCVARCHECK
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.detectGranules_old(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$Mode.static {}
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.$SWITCH_TABLE$de$unihalle$informatik$MiToBo$segmentation$thresholds$ImgThreshNiblack$Mode()
        WHOLE_IMAGE
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$Mode.static {}
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.$SWITCH_TABLE$de$unihalle$informatik$MiToBo$segmentation$thresholds$ImgThreshNiblack$Mode()
        ordinal() *
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.$SWITCH_TABLE$de$unihalle$informatik$MiToBo$segmentation$thresholds$ImgThreshNiblack$Mode()
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        static {}
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$Mode.ENUM$VALUES
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$Mode.ImgThreshNiblack$Mode(java.lang.String, int)
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$Mode.MASKWISE
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$Mode.STD
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$Mode.STD_LOCVARCHECK
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$Mode.WHOLE_IMAGE
            --> java.lang.String *
        valueOf(java.lang.String)
            --> java.lang.Class *
            --> java.lang.Enum *
            --> java.lang.Enum.valueOf(java.lang.Class, java.lang.String) *
            --> java.lang.String *
        values()
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$Mode.ENUM$VALUES
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.$SWITCH_TABLE$de$unihalle$informatik$MiToBo$segmentation$thresholds$ImgThreshNiblack$Mode()
            --> java.lang.Object *
            --> java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int) *
    ImgThreshNiblack$NiblackParams
        --> de.unihalle.informatik.MiToBo.meta.MTBOpParams
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        ImgThreshNiblack$NiblackParams(de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$Mode, double, double, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams.MTBOpParams()
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$Mode
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams.setParameter(java.lang.String, java.lang.Object) *
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams.this$0
            --> java.lang.Double.Double(double) *
            --> java.lang.Integer.Integer(int) *
            --> java.lang.Object *
            --> java.lang.String *
        ImgThreshNiblack$NiblackParams(de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack, de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$Mode, double, double, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.detectGranules_old(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte
            --> de.unihalle.informatik.MiToBo.meta.MTBMetaData
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams.MTBOpParams(de.unihalle.informatik.MiToBo.meta.MTBMetaData)
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$Mode
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams.setParameter(java.lang.String, java.lang.Object) *
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams.this$0
            --> java.lang.Double.Double(double) *
            --> java.lang.Integer.Integer(int) *
            --> java.lang.Object *
            --> java.lang.String *
            <-- mtb_morphology.Threshold_Image_Niblack.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        getEnhanceParamR()
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams.getParameter(java.lang.String) *
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            --> java.lang.Double *
            --> java.lang.Double.doubleValue() *
            --> java.lang.Object *
            --> java.lang.String *
        getInputImage()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams.getParameter(java.lang.String) *
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            --> java.lang.Object *
            --> java.lang.String *
        getMask()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams.getParameter(java.lang.String) *
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            --> java.lang.Object *
            --> java.lang.String *
        getMode()
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$Mode
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams.getParameter(java.lang.String) *
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            --> java.lang.Object *
            --> java.lang.String *
        getParameter(java.lang.String) *
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams.getEnhanceParamR()
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams.getInputImage()
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams.getMask()
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams.getMode()
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams.getResultImage()
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams.getScalingK()
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams.getSlidingWindowSize()
        getResultImage()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.detectGranules_old(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams.getParameter(java.lang.String) *
            --> java.lang.Object *
            --> java.lang.String *
            <-- mtb_morphology.Threshold_Image_Niblack.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        getScalingK()
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams.getParameter(java.lang.String) *
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            --> java.lang.Double *
            --> java.lang.Double.doubleValue() *
            --> java.lang.Object *
            --> java.lang.String *
        getSlidingWindowSize()
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams.getParameter(java.lang.String) *
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            --> java.lang.Integer *
            --> java.lang.Integer.intValue() *
            --> java.lang.Object *
            --> java.lang.String *
        setParameter(java.lang.String, java.lang.Object) *
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams.ImgThreshNiblack$NiblackParams(de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$Mode, double, double, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams.ImgThreshNiblack$NiblackParams(de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack, de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$Mode, double, double, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams.setResultImage(de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        setResultImage(de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams.setParameter(java.lang.String, java.lang.Object) *
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            --> java.lang.Object *
            --> java.lang.String *
        this$0
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams.ImgThreshNiblack$NiblackParams(de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$Mode, double, double, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams.ImgThreshNiblack$NiblackParams(de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack, de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$Mode, double, double, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
de.unihalle.informatik.MiToBo.statistics
    RegionSetStatistics
        --> java.lang.Object *
        RegionSetStatistics()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> java.lang.Object.Object() *
        calcAverageSize(java.util.Vector)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> de.unihalle.informatik.MiToBo.datatypes.Region2D
            --> de.unihalle.informatik.MiToBo.datatypes.Region2D.getArea()
            --> java.lang.Object *
            --> java.util.Vector *
            --> java.util.Vector.elementAt(int) *
            --> java.util.Vector.size() *
de.unihalle.informatik.MiToBo_admin.ant
    ExtractClassDepList
        <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepListTest.eObj
        <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepListTest.setUp()
        <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepListTest.testExtractClassSection()
        <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepListTest.testGetAllRequiredClasses()
        <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepListTest.testSetExportFile()
        --> org.apache.tools.ant.Task *
        ExtractClassDepList()
            --> de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.allDeps
            --> de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.classesDone
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepListTest.setUp()
            --> java.util.Hashtable *
            --> java.util.Hashtable.Hashtable() *
            --> java.util.TreeSet *
            --> java.util.TreeSet.TreeSet() *
            --> org.apache.tools.ant.Task.Task() *
        allDeps
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.ExtractClassDepList()
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.execute()
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.getAllRequiredClasses(java.util.LinkedList, boolean)
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.getDependencies()
            --> java.util.TreeSet *
        classesDone
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.ExtractClassDepList()
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.getAllRequiredClasses(java.util.LinkedList, boolean)
            --> java.util.Hashtable *
        destdir
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.execute()
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.setDestdir(java.lang.String)
            --> java.lang.String *
        execute()
            --> de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.allDeps
            --> de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.destdir
            --> de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.exportfile
            --> de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.getDependencies(java.lang.String)
            --> de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.logfile
            --> de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.readDependencyLogfile()
            --> java.io.BufferedReader.BufferedReader(java.io.Reader) *
            --> java.io.BufferedReader.close() *
            --> java.io.BufferedReader.readLine() *
            --> java.io.BufferedWriter.BufferedWriter(java.io.Writer) *
            --> java.io.File *
            --> java.io.File.File(java.lang.String) *
            --> java.io.FileReader.FileReader(java.io.File) *
            --> java.io.FileWriter.FileWriter(java.lang.String) *
            --> java.io.IOException *
            --> java.io.InputStream *
            --> java.io.InputStream.read() *
            --> java.io.PrintStream *
            --> java.io.PrintStream.print(java.lang.String) *
            --> java.io.PrintStream.println(java.lang.String) *
            --> java.io.Reader *
            --> java.io.Writer *
            --> java.io.Writer.close() *
            --> java.io.Writer.write(java.lang.String) *
            --> java.lang.CharSequence *
            --> java.lang.Character.isLetter(char) *
            --> java.lang.Character.isWhitespace(char) *
            --> java.lang.Object *
            --> java.lang.String *
            --> java.lang.String.charAt(int) *
            --> java.lang.String.contains(java.lang.CharSequence) *
            --> java.lang.String.lastIndexOf(java.lang.String) *
            --> java.lang.String.length() *
            --> java.lang.String.replace(java.lang.CharSequence, java.lang.CharSequence) *
            --> java.lang.String.split(java.lang.String) *
            --> java.lang.String.startsWith(java.lang.String) *
            --> java.lang.String.substring(int, int) *
            --> java.lang.String.valueOf(java.lang.Object) *
            --> java.lang.StringBuilder *
            --> java.lang.StringBuilder.StringBuilder() *
            --> java.lang.StringBuilder.StringBuilder(java.lang.String) *
            --> java.lang.StringBuilder.append(java.lang.String) *
            --> java.lang.StringBuilder.toString() *
            --> java.lang.System.err *
            --> java.lang.System.in *
            --> java.lang.System.out *
            --> java.util.Iterator *
            --> java.util.Iterator.hasNext() *
            --> java.util.Iterator.next() *
            --> java.util.LinkedList.LinkedList() *
            --> java.util.LinkedList.add(java.lang.Object) *
            --> java.util.LinkedList.get(int) *
            --> java.util.LinkedList.size() *
            --> java.util.TreeSet *
            --> java.util.TreeSet.TreeSet() *
            --> java.util.TreeSet.add(java.lang.Object) *
            --> java.util.TreeSet.iterator() *
            --> org.apache.tools.ant.BuildException *
        exportfile
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.execute()
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.getExportfile()
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.setExportfile(java.lang.String)
            --> java.lang.String *
        extractClassSection(java.lang.String)
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.getAllRequiredClasses(java.util.LinkedList, boolean)
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.getDependencies(java.lang.String)
            --> de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.inputFileContents
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepListTest.testExtractClassSection()
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepListTest.testGetAllRequiredClasses()
            --> java.lang.Object *
            --> java.lang.String *
            --> java.lang.String.charAt(int) *
            --> java.lang.String.startsWith(java.lang.String) *
            --> java.lang.StringBuilder *
            --> java.lang.StringBuilder.StringBuilder(java.lang.String) *
            --> java.lang.StringBuilder.append(java.lang.String) *
            --> java.lang.StringBuilder.toString() *
            --> java.util.LinkedList *
            --> java.util.LinkedList.LinkedList() *
            --> java.util.LinkedList.add(java.lang.Object) *
            --> java.util.LinkedList.get(int) *
            --> java.util.LinkedList.size() *
        extractPackageSection(java.lang.String)
            --> de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.inputFileContents
            --> java.lang.Object *
            --> java.lang.String *
            --> java.lang.String.startsWith(java.lang.String) *
            --> java.util.LinkedList *
            --> java.util.LinkedList.LinkedList() *
            --> java.util.LinkedList.add(java.lang.Object) *
            --> java.util.LinkedList.get(int) *
            --> java.util.LinkedList.size() *
        getAllRequiredClasses(java.util.LinkedList, boolean)
            --> de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.allDeps
            --> de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.classesDone
            --> de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.extractClassSection(java.lang.String)
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.getDependencies(java.lang.String)
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepListTest.testGetAllRequiredClasses()
            --> java.lang.CharSequence *
            --> java.lang.Character.isLetter(char) *
            --> java.lang.Character.isLowerCase(char) *
            --> java.lang.Character.isWhitespace(char) *
            --> java.lang.Integer.Integer(int) *
            --> java.lang.Object *
            --> java.lang.String *
            --> java.lang.String.charAt(int) *
            --> java.lang.String.contains(java.lang.CharSequence) *
            --> java.lang.String.lastIndexOf(java.lang.String) *
            --> java.lang.String.length() *
            --> java.lang.String.substring(int) *
            --> java.lang.String.substring(int, int) *
            --> java.util.Hashtable *
            --> java.util.Hashtable.containsKey(java.lang.Object) *
            --> java.util.Hashtable.put(java.lang.Object, java.lang.Object) *
            --> java.util.LinkedList *
            --> java.util.LinkedList.get(int) *
            --> java.util.LinkedList.size() *
            --> java.util.TreeSet *
            --> java.util.TreeSet.add(java.lang.Object) *
        getDependencies()
            --> de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.allDeps
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepListTest.testGetAllRequiredClasses()
            --> java.util.TreeSet *
        getDependencies(java.lang.String)
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.execute()
            --> de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.extractClassSection(java.lang.String)
            --> de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.getAllRequiredClasses(java.util.LinkedList, boolean)
            --> java.io.PrintStream *
            --> java.io.PrintStream.println(java.lang.String) *
            --> java.lang.Object *
            --> java.lang.String *
            --> java.lang.System.out *
            --> java.util.LinkedList *
            --> java.util.LinkedList.get(int) *
            --> java.util.LinkedList.size() *
        getExportfile()
            --> de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.exportfile
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepListTest.testSetExportFile()
            --> java.lang.String *
        inputFileContents
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.extractClassSection(java.lang.String)
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.extractPackageSection(java.lang.String)
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.readDependencyLogfile()
            --> java.util.LinkedList *
        logfile
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.execute()
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.readDependencyLogfile()
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.setLogfile(java.lang.String)
            --> java.lang.String *
        readDependencyLogfile()
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.execute()
            --> de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.inputFileContents
            --> de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.logfile
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepListTest.testExtractClassSection()
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepListTest.testGetAllRequiredClasses()
            --> java.io.BufferedReader.BufferedReader(java.io.Reader) *
            --> java.io.BufferedReader.close() *
            --> java.io.BufferedReader.readLine() *
            --> java.io.File *
            --> java.io.File.File(java.lang.String) *
            --> java.io.FileReader.FileReader(java.io.File) *
            --> java.io.IOException *
            --> java.io.Reader *
            --> java.lang.Object *
            --> java.lang.String *
            --> java.util.LinkedList *
            --> java.util.LinkedList.LinkedList() *
            --> java.util.LinkedList.add(java.lang.Object) *
        setDestdir(java.lang.String)
            --> de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.destdir
            --> java.lang.String *
        setExportfile(java.lang.String)
            --> de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.exportfile
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepListTest.testSetExportFile()
            --> java.lang.String *
        setLogfile(java.lang.String)
            --> de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.logfile
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepListTest.testExtractClassSection()
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepListTest.testGetAllRequiredClasses()
            --> java.lang.String *
    ExtractClassDepListTest
        <-- de.unihalle.informatik.MiToBo_admin.test.MiToBoAdminTests.suite()
        --> junit.framework.TestCase *
        ExtractClassDepListTest()
            --> junit.framework.TestCase.TestCase() *
        assertTrue(java.lang.String, boolean) *
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepListTest.testExtractClassSection()
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepListTest.testGetAllRequiredClasses()
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepListTest.testSetExportFile()
        eObj
            --> de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepListTest.setUp()
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepListTest.testExtractClassSection()
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepListTest.testGetAllRequiredClasses()
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepListTest.testSetExportFile()
        setUp()
            --> de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList
            --> de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.ExtractClassDepList()
            --> de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepListTest.eObj
        testExtractClassSection()
            --> de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList
            --> de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.extractClassSection(java.lang.String)
            --> de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.readDependencyLogfile()
            --> de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.setLogfile(java.lang.String)
            --> de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepListTest.assertTrue(java.lang.String, boolean) *
            --> de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepListTest.eObj
            --> java.lang.Object *
            --> java.lang.String *
            --> java.util.LinkedList *
            --> java.util.LinkedList.LinkedList() *
            --> java.util.LinkedList.add(java.lang.Object) *
            --> java.util.LinkedList.equals(java.lang.Object) *
            --> java.util.LinkedList.size() *
        testGetAllRequiredClasses()
            --> de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList
            --> de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.extractClassSection(java.lang.String)
            --> de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.getAllRequiredClasses(java.util.LinkedList, boolean)
            --> de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.getDependencies()
            --> de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.readDependencyLogfile()
            --> de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.setLogfile(java.lang.String)
            --> de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepListTest.assertTrue(java.lang.String, boolean) *
            --> de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepListTest.eObj
            --> java.io.PrintStream *
            --> java.io.PrintStream.println(java.lang.Object) *
            --> java.io.PrintStream.println(java.lang.String) *
            --> java.lang.Object *
            --> java.lang.String *
            --> java.lang.System.out *
            --> java.util.Iterator *
            --> java.util.Iterator.hasNext() *
            --> java.util.Iterator.next() *
            --> java.util.LinkedList *
            --> java.util.TreeSet *
            --> java.util.TreeSet.TreeSet() *
            --> java.util.TreeSet.add(java.lang.Object) *
            --> java.util.TreeSet.equals(java.lang.Object) *
            --> java.util.TreeSet.iterator() *
        testSetExportFile()
            --> de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList
            --> de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.getExportfile()
            --> de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.setExportfile(java.lang.String)
            --> de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepListTest.assertTrue(java.lang.String, boolean) *
            --> de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepListTest.eObj
            --> java.lang.String *
    GetLastCvsTag
        --> org.apache.tools.ant.Task *
        GetLastCvsTag()
            --> org.apache.tools.ant.Task.Task() *
        execute()
            --> de.unihalle.informatik.MiToBo_admin.ant.GetLastCvsTag.logfile
            --> de.unihalle.informatik.MiToBo_admin.ant.GetLastCvsTag.project *
            --> java.io.BufferedReader.BufferedReader(java.io.Reader) *
            --> java.io.BufferedReader.close() *
            --> java.io.BufferedReader.readLine() *
            --> java.io.File *
            --> java.io.File.File(java.lang.String) *
            --> java.io.FileReader.FileReader(java.io.File) *
            --> java.io.IOException *
            --> java.io.PrintStream *
            --> java.io.PrintStream.println(java.lang.String) *
            --> java.io.Reader *
            --> java.lang.CharSequence *
            --> java.lang.Object *
            --> java.lang.String *
            --> java.lang.String.contains(java.lang.CharSequence) *
            --> java.lang.String.length() *
            --> java.lang.String.split(java.lang.String) *
            --> java.lang.String.startsWith(java.lang.String) *
            --> java.lang.String.substring(int, int) *
            --> java.lang.String.trim() *
            --> java.lang.String.valueOf(java.lang.Object) *
            --> java.lang.StringBuilder *
            --> java.lang.StringBuilder.StringBuilder() *
            --> java.lang.StringBuilder.StringBuilder(java.lang.String) *
            --> java.lang.StringBuilder.append(java.lang.String) *
            --> java.lang.StringBuilder.toString() *
            --> java.lang.System.err *
            --> java.lang.System.out *
            --> org.apache.tools.ant.BuildException *
            --> org.apache.tools.ant.Project *
            --> org.apache.tools.ant.Project.setUserProperty(java.lang.String, java.lang.String) *
        logfile
            <-- de.unihalle.informatik.MiToBo_admin.ant.GetLastCvsTag.execute()
            <-- de.unihalle.informatik.MiToBo_admin.ant.GetLastCvsTag.setLogfile(java.lang.String)
            --> java.lang.String *
        project *
            <-- de.unihalle.informatik.MiToBo_admin.ant.GetLastCvsTag.execute()
        setLogfile(java.lang.String)
            --> de.unihalle.informatik.MiToBo_admin.ant.GetLastCvsTag.logfile
            --> java.lang.String *
    MakePluginConfig
        --> org.apache.tools.ant.Task *
        MakePluginConfig()
            --> org.apache.tools.ant.Task.Task() *
        destdir
            <-- de.unihalle.informatik.MiToBo_admin.ant.MakePluginConfig.execute()
            <-- de.unihalle.informatik.MiToBo_admin.ant.MakePluginConfig.setDestdir(java.lang.String)
            --> java.lang.String *
        execute()
            --> de.unihalle.informatik.MiToBo_admin.ant.MakePluginConfig.destdir
            --> de.unihalle.informatik.MiToBo_admin.ant.MakePluginConfig.exportfile
            --> java.io.BufferedReader.BufferedReader(java.io.Reader) *
            --> java.io.BufferedReader.close() *
            --> java.io.BufferedReader.readLine() *
            --> java.io.BufferedWriter.BufferedWriter(java.io.Writer) *
            --> java.io.File *
            --> java.io.File.File(java.lang.String) *
            --> java.io.FileReader.FileReader(java.io.File) *
            --> java.io.FileWriter.FileWriter(java.lang.String) *
            --> java.io.IOException *
            --> java.io.PrintStream *
            --> java.io.PrintStream.println(java.lang.String) *
            --> java.io.Reader *
            --> java.io.Writer *
            --> java.io.Writer.close() *
            --> java.io.Writer.write(java.lang.String) *
            --> java.lang.Object *
            --> java.lang.String *
            --> java.lang.String.split(java.lang.String) *
            --> java.lang.String.startsWith(java.lang.String) *
            --> java.lang.String.valueOf(java.lang.Object) *
            --> java.lang.StringBuilder *
            --> java.lang.StringBuilder.StringBuilder() *
            --> java.lang.StringBuilder.StringBuilder(java.lang.String) *
            --> java.lang.StringBuilder.append(java.lang.String) *
            --> java.lang.StringBuilder.toString() *
            --> java.lang.System.err *
            --> java.lang.System.out *
            --> org.apache.tools.ant.BuildException *
        exportfile
            <-- de.unihalle.informatik.MiToBo_admin.ant.MakePluginConfig.execute()
            <-- de.unihalle.informatik.MiToBo_admin.ant.MakePluginConfig.setExportfile(java.lang.String)
            --> java.lang.String *
        setDestdir(java.lang.String)
            --> de.unihalle.informatik.MiToBo_admin.ant.MakePluginConfig.destdir
            --> java.lang.String *
        setExportfile(java.lang.String)
            --> de.unihalle.informatik.MiToBo_admin.ant.MakePluginConfig.exportfile
            --> java.lang.String *
de.unihalle.informatik.MiToBo_admin.test
    MiToBoAdminTests
        --> java.lang.Object *
        MiToBoAdminTests()
            --> java.lang.Object.Object() *
        suite()
            --> de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepListTest
            --> java.lang.Class *
            --> junit.framework.Test *
            --> junit.framework.TestSuite.TestSuite() *
            --> junit.framework.TestSuite.addTestSuite(java.lang.Class) *
ij *
    IJ *
        error(java.lang.String) *
            <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.Image3D(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.Image3DToStack()
            <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.setVoxels(int[])
            <-- mtb_morphology.Dilate_Image.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            <-- mtb_morphology.Erode_Image.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            <-- mtb_regions.Label_Components_Sequential.run(ij.process.ImageProcessor)
        getImage() *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.applyToImage()
        getNumber(java.lang.String, double) *
            <-- mtb_morphology.Dilate_Image.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            <-- mtb_morphology.Erode_Image.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        showMessage(java.lang.String) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.actionPerformed(java.awt.event.ActionEvent)
            <-- mtb_demo.Demo_MTBOpBase_Plugin.parameterDialog()
            <-- mtb_filters.Rank_Operator.parameterDialog()
            <-- mtb_morphology.CalcOtsuThreshold_Image.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            <-- mtb_morphology.HDomeTransform_3D.parameterDialog()
            <-- mtb_regions.Segment_No_Edges3D.run(ij.process.ImageProcessor)
        showProgress(double) *
            <-- mtb_fields.Create_GVF.GVF_field(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            <-- mtb_fields.Create_GVF.writeUV(double[], double[], int, int)
        showProgress(int, int) *
            <-- mtb_filters.Rank_Operator.statusUpdated(loci.formats.StatusEvent)
            <-- mtb_regions.Label_Components_Sequential_3D.statusUpdated(loci.formats.StatusEvent)
        showStatus(java.lang.String) *
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.examine()
            <-- mtb_demo.Demo_MTBOpBase_Plugin.parameterDialog()
            <-- mtb_filters.Rank_Operator.parameterDialog()
            <-- mtb_filters.Rank_Operator.run(ij.process.ImageProcessor)
            <-- mtb_filters.Rank_Operator.statusUpdated(loci.formats.StatusEvent)
            <-- mtb_morphology.HDomeTransform_3D.run(ij.process.ImageProcessor)
            <-- mtb_regions.Label_Components_Sequential_3D.run(ij.process.ImageProcessor)
            <-- mtb_regions.Label_Components_Sequential_3D.statusUpdated(loci.formats.StatusEvent)
            <-- mtb_regions.Segment_No_Edges3D.run(ij.process.ImageProcessor)
    ImagePlus *
        <-- de.unihalle.informatik.MiToBo.apps.cells2D.CellSegmentAlgos.voronoiTesselation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.detectPbodies(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.applyToImage()
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.applyToImageBatch(java.lang.String)
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.image
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.NeuriteProfile(de.unihalle.informatik.MiToBo.datatypes.Region2D)
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.getSkeletonImg()
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.getVoronoiImg()
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.saveSkeletonImage(java.lang.String)
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.saveVoronoiImage(java.lang.String)
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.setSkeletonImg(ij.ImagePlus)
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.setVoronoiImg(ij.ImagePlus)
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.skeletonImg
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.voronoiImg
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcLongestPathProfiles(ij.ImagePlus, ij.ImagePlus, ij.ImagePlus)
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.getNeuritePathTrees(ij.process.ImageProcessor, ij.process.ImageProcessor, ij.process.ImageProcessor, java.util.Vector)
        <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.Image3DToStack()
        <-- de.unihalle.informatik.MiToBo.datatypes.Region2D.toMTBImageByte(java.lang.String, int, int)
        <-- de.unihalle.informatik.MiToBo.datatypes.Snake.toMTBImage(java.lang.String, int, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.datatypes.Snake.toMTBImageByte(java.lang.String, int, int)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.MTBImage()
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.MTBImage(ij.ImagePlus)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.close()
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.createMTBImage(ij.ImagePlus)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getImagePlus()
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.m_img
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.show()
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.updateAndRepaintWindow()
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.MTBImageByte(ij.ImagePlus)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.MTBImageByte(int, int, int, int, int)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.duplicate()
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.getImagePlus()
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.getImagePlus()
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.MTBImageFloat(ij.ImagePlus)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.MTBImageFloat(int, int, int, int, int)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.duplicate()
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.getImagePlus()
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.getImagePlus()
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.getImagePlusRGB()
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.MTBImageShort(ij.ImagePlus)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.MTBImageShort(int, int, int, int, int)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.duplicate()
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.getImagePlus()
        <-- de.unihalle.informatik.MiToBo.enhance.GammaCorrection.correctGamma(ij.process.ImageProcessor, double, int)
        <-- de.unihalle.informatik.MiToBo.enhance.HistogramEqualization.equalizeImageHisto(ij.process.ImageProcessor)
        <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.deleteBorder(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
        <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.open()
        <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.open(int[])
        <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.io.File, ij.ImagePlus)
        <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.lang.String, java.lang.String, ij.ImagePlus)
        <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.saveFile(boolean)
        <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.setImage(ij.ImagePlus)
        <-- de.unihalle.informatik.MiToBo.meta.MTBOpBasePlugin.inputImage
        <-- de.unihalle.informatik.MiToBo.meta.MTBOpBasePlugin.run(ij.process.ImageProcessor)
        <-- de.unihalle.informatik.MiToBo.meta.MTBOpBasePlugin.setup(java.lang.String, ij.ImagePlus)
        <-- de.unihalle.informatik.MiToBo.morphology.ComponentPostprocess.EraseSmallComponents(ij.process.ImageProcessor, int)
        <-- de.unihalle.informatik.MiToBo.morphology.ComponentPostprocess.LinkAdjacentComponents(ij.process.ImageProcessor, double)
        <-- de.unihalle.informatik.MiToBo.morphology.ImgDilate.applyMask(ij.process.ImageProcessor, int)
        <-- de.unihalle.informatik.MiToBo.morphology.ImgErode.applyMask(ij.process.ImageProcessor, int)
        <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.SkeletonTree(int, int, ij.ImagePlus)
        <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.skeletonImage
        <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.tmpSkelImage
        <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsRecursive.labelImage
        <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsRecursive.regionSegmentation(ij.process.ImageProcessor)
        <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential.m_labelImage
        <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential.regionSegmentation(ij.process.ImageProcessor, boolean)
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThresh.applyThreshold(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThresh.applyThreshold(ij.process.ImageProcessor, int)
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.applyNiblackThresholdMaskwise(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, double, double, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.applyNiblackThresholdWholeImage(ij.process.ImageProcessor, double, double, ij.ImagePlus)
        <-- mtb_contours.Contour_on_Labeled_Components.add_InnerContours(java.util.Vector, java.util.Vector)
        <-- mtb_contours.Contour_on_Labeled_Components.get_ContourImage(java.util.Vector)
        <-- mtb_contours.Contour_on_Labeled_Components.run(ij.process.ImageProcessor)
        <-- mtb_contours.Contour_on_Labeled_Components.setup(java.lang.String, ij.ImagePlus)
        <-- mtb_demo.Demo_MTBOpBase_Plugin.setup(java.lang.String, ij.ImagePlus)
        <-- mtb_enhance.Correct_Gamma.img
        <-- mtb_enhance.Correct_Gamma.run(ij.process.ImageProcessor)
        <-- mtb_enhance.Correct_Gamma.setup(java.lang.String, ij.ImagePlus)
        <-- mtb_enhance.Histogram_Equalize.setup(java.lang.String, ij.ImagePlus)
        <-- mtb_fields.Create_GVF.run(ij.process.ImageProcessor)
        <-- mtb_fields.Create_GVF.setup(java.lang.String, ij.ImagePlus)
        <-- mtb_filters.Rank_Operator.run(ij.process.ImageProcessor)
        <-- mtb_filters.Rank_Operator.setup(java.lang.String, ij.ImagePlus)
        <-- mtb_granules.Cell_Segment_2D.img
        <-- mtb_granules.Cell_Segment_2D.run(ij.process.ImageProcessor)
        <-- mtb_granules.Cell_Segment_2D.setup(java.lang.String, ij.ImagePlus)
        <-- mtb_io.Save_Image.img
        <-- mtb_io.Save_Image.save()
        <-- mtb_io.Save_Image.setup(java.lang.String, ij.ImagePlus)
        <-- mtb_morphology.CalcOtsuThreshold_Image.inputImage
        <-- mtb_morphology.CalcOtsuThreshold_Image.run(ij.process.ImageProcessor)
        <-- mtb_morphology.CalcOtsuThreshold_Image.setup(java.lang.String, ij.ImagePlus)
        <-- mtb_morphology.Dilate_Image.setup(java.lang.String, ij.ImagePlus)
        <-- mtb_morphology.Erode_Image.setup(java.lang.String, ij.ImagePlus)
        <-- mtb_morphology.HDomeTransform_3D.run(ij.process.ImageProcessor)
        <-- mtb_morphology.HDomeTransform_3D.setup(java.lang.String, ij.ImagePlus)
        <-- mtb_morphology.Link_Components.run(ij.process.ImageProcessor)
        <-- mtb_morphology.Link_Components.setup(java.lang.String, ij.ImagePlus)
        <-- mtb_morphology.Morph_3D.run(java.lang.String)
        <-- mtb_morphology.Threshold_Image.dialogItemChanged(ij.gui.GenericDialog, java.awt.AWTEvent)
        <-- mtb_morphology.Threshold_Image.m_imgPlus
        <-- mtb_morphology.Threshold_Image.run(ij.process.ImageProcessor)
        <-- mtb_morphology.Threshold_Image.setup(java.lang.String, ij.ImagePlus)
        <-- mtb_morphology.Threshold_Image_Niblack.setup(java.lang.String, ij.ImagePlus)
        <-- mtb_neurites.Neurit_Detector_2D.getSnakeRegion(java.awt.Polygon)
        <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
        <-- mtb_neurites.Neurit_Detector_2D.process()
        <-- mtb_neurites.Neurit_Detector_2D.removeCellBody(de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        <-- mtb_regions.Label_Components_Recursive.run(ij.process.ImageProcessor)
        <-- mtb_regions.Label_Components_Recursive.setup(java.lang.String, ij.ImagePlus)
        <-- mtb_regions.Label_Components_Sequential.run(ij.process.ImageProcessor)
        <-- mtb_regions.Label_Components_Sequential.setup(java.lang.String, ij.ImagePlus)
        <-- mtb_regions.Label_Components_Sequential_3D.run(ij.process.ImageProcessor)
        <-- mtb_regions.Label_Components_Sequential_3D.setup(java.lang.String, ij.ImagePlus)
        <-- mtb_regions.Segment_No_Edges3D.run(ij.process.ImageProcessor)
        <-- mtb_regions.Segment_No_Edges3D.setup(java.lang.String, ij.ImagePlus)
        ImagePlus() *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.Image3DToStack()
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.deleteBorder(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
        ImagePlus(java.lang.String) *
            <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.Image3D(java.lang.String)
            <-- mtb_morphology.Morph_3D.run(java.lang.String)
        ImagePlus(java.lang.String, ij.ImageStack) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.deleteBorder(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.open()
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.open(int[])
        ImagePlus(java.lang.String, ij.process.ImageProcessor) *
            <-- de.unihalle.informatik.MiToBo.enhance.GammaCorrection.correctGamma(ij.process.ImageProcessor, double, int)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.open()
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.open(int[])
            <-- mtb_fields.Create_GVF.run(ij.process.ImageProcessor)
            <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
        close() *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.close()
        createImagePlus() *
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.duplicate()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.duplicate()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.duplicate()
        getCurrentSlice() *
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.show()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.duplicate()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.duplicate()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.duplicate()
            <-- mtb_morphology.Threshold_Image.dialogItemChanged(ij.gui.GenericDialog, java.awt.AWTEvent)
            <-- mtb_morphology.Threshold_Image.run(ij.process.ImageProcessor)
            <-- mtb_regions.Label_Components_Sequential_3D.setup(java.lang.String, ij.ImagePlus)
        getDisplayRangeMax() *
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.duplicate()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.duplicate()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.duplicate()
            <-- mtb_morphology.Threshold_Image.dialogItemChanged(ij.gui.GenericDialog, java.awt.AWTEvent)
        getDisplayRangeMin() *
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.duplicate()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.duplicate()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.duplicate()
        getHeight() *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcLongestPathProfiles(ij.ImagePlus, ij.ImagePlus, ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.MTBImage(ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.deleteBorder(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            <-- mtb_granules.Cell_Segment_2D.run(ij.process.ImageProcessor)
            <-- mtb_regions.Label_Components_Recursive.setup(java.lang.String, ij.ImagePlus)
            <-- mtb_regions.Label_Components_Sequential.setup(java.lang.String, ij.ImagePlus)
        getImageStack() *
            <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.Image3D(java.lang.String)
        getNChannels() *
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.MTBImage(ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.duplicate()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.duplicate()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.duplicate()
        getNFrames() *
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.MTBImage(ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.duplicate()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.duplicate()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.duplicate()
        getNSlices() *
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.MTBImage(ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.duplicate()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.duplicate()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.duplicate()
        getOpenAsHyperStack() *
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.duplicate()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.duplicate()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.duplicate()
        getProcessor() *
            <-- de.unihalle.informatik.MiToBo.apps.cells2D.CellSegmentAlgos.voronoiTesselation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.detectPbodies(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcLongestPathProfiles(ij.ImagePlus, ij.ImagePlus, ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.getNeuritePathTrees(ij.process.ImageProcessor, ij.process.ImageProcessor, ij.process.ImageProcessor, java.util.Vector)
            <-- de.unihalle.informatik.MiToBo.datatypes.Region2D.toMTBImageByte(java.lang.String, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.Snake.toMTBImage(java.lang.String, int, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.datatypes.Snake.toMTBImageByte(java.lang.String, int, int)
            <-- de.unihalle.informatik.MiToBo.enhance.GammaCorrection.correctGamma(ij.process.ImageProcessor, double, int)
            <-- de.unihalle.informatik.MiToBo.enhance.HistogramEqualization.equalizeImageHisto(ij.process.ImageProcessor)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.deleteBorder(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.open()
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.open(int[])
            <-- de.unihalle.informatik.MiToBo.meta.MTBOpBasePlugin.setup(java.lang.String, ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.morphology.ComponentPostprocess.EraseSmallComponents(ij.process.ImageProcessor, int)
            <-- de.unihalle.informatik.MiToBo.morphology.ComponentPostprocess.LinkAdjacentComponents(ij.process.ImageProcessor, double)
            <-- de.unihalle.informatik.MiToBo.morphology.ImgDilate.applyMask(ij.process.ImageProcessor, int)
            <-- de.unihalle.informatik.MiToBo.morphology.ImgErode.applyMask(ij.process.ImageProcessor, int)
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.SkeletonTree(int, int, ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsRecursive.regionSegmentation(ij.process.ImageProcessor)
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential.regionSegmentation(ij.process.ImageProcessor, boolean)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThresh.applyThreshold(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThresh.applyThreshold(ij.process.ImageProcessor, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.applyNiblackThresholdMaskwise(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, double, double, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.applyNiblackThresholdWholeImage(ij.process.ImageProcessor, double, double, ij.ImagePlus)
            <-- mtb_contours.Contour_on_Labeled_Components.add_InnerContours(java.util.Vector, java.util.Vector)
            <-- mtb_contours.Contour_on_Labeled_Components.get_ContourImage(java.util.Vector)
            <-- mtb_enhance.Correct_Gamma.run(ij.process.ImageProcessor)
            <-- mtb_granules.Cell_Segment_2D.run(ij.process.ImageProcessor)
            <-- mtb_morphology.CalcOtsuThreshold_Image.setup(java.lang.String, ij.ImagePlus)
            <-- mtb_neurites.Neurit_Detector_2D.getSnakeRegion(java.awt.Polygon)
            <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
            <-- mtb_neurites.Neurit_Detector_2D.removeCellBody(de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            <-- mtb_regions.Label_Components_Recursive.run(ij.process.ImageProcessor)
            <-- mtb_regions.Label_Components_Sequential.run(ij.process.ImageProcessor)
        getProperties() *
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.createMTBImage(ij.ImagePlus)
        getProperty(java.lang.String) *
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.createMTBImage(ij.ImagePlus)
        getStack() *
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.MTBImage(ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.MTBImageByte(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.getImagePlus()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.MTBImageFloat(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.getImagePlus()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.getImagePlusRGB()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.MTBImageShort(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.deleteBorder(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            <-- mtb_enhance.Correct_Gamma.run(ij.process.ImageProcessor)
            <-- mtb_granules.Cell_Segment_2D.run(ij.process.ImageProcessor)
            <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
        getStackSize() *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.MTBImage(ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.deleteBorder(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            <-- mtb_enhance.Correct_Gamma.run(ij.process.ImageProcessor)
        getStatistics() *
            <-- de.unihalle.informatik.MiToBo.enhance.GammaCorrection.correctGamma(ij.process.ImageProcessor, double, int)
        getTitle() *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.applyToImage()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.applyToImageBatch(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.duplicate()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.duplicate()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.duplicate()
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.deleteBorder(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            <-- mtb_filters.Rank_Operator.run(ij.process.ImageProcessor)
            <-- mtb_morphology.HDomeTransform_3D.run(ij.process.ImageProcessor)
            <-- mtb_regions.Label_Components_Sequential.setup(java.lang.String, ij.ImagePlus)
            <-- mtb_regions.Label_Components_Sequential_3D.run(ij.process.ImageProcessor)
        getType() *
            <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.Image3D(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.createMTBImage(ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.deleteBorder(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            <-- mtb_enhance.Correct_Gamma.run(ij.process.ImageProcessor)
        getWidth() *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcLongestPathProfiles(ij.ImagePlus, ij.ImagePlus, ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.MTBImage(ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.deleteBorder(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            <-- mtb_granules.Cell_Segment_2D.run(ij.process.ImageProcessor)
            <-- mtb_regions.Label_Components_Recursive.setup(java.lang.String, ij.ImagePlus)
            <-- mtb_regions.Label_Components_Sequential.setup(java.lang.String, ij.ImagePlus)
        getWindow() *
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.show()
            <-- mtb_regions.Label_Components_Sequential_3D.run(ij.process.ImageProcessor)
        isHyperStack() *
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.duplicate()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.duplicate()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.duplicate()
        setColor(java.awt.Color) *
            <-- de.unihalle.informatik.MiToBo.datatypes.Region2D.toMTBImageByte(java.lang.String, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.Snake.toMTBImage(java.lang.String, int, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.datatypes.Snake.toMTBImageByte(java.lang.String, int, int)
        setDimensions(int, int, int) *
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.MTBImageByte(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.duplicate()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.getImagePlus()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.MTBImageFloat(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.duplicate()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.getImagePlus()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.getImagePlusRGB()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.MTBImageShort(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.duplicate()
        setDisplayRange(double, double) *
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.duplicate()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.duplicate()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.duplicate()
            <-- mtb_morphology.Threshold_Image.run(ij.process.ImageProcessor)
        setOpenAsHyperStack(boolean) *
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.MTBImageByte(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.duplicate()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.getImagePlus()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.MTBImageFloat(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.duplicate()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.getImagePlus()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.getImagePlusRGB()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.MTBImageShort(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.duplicate()
            <-- mtb_regions.Label_Components_Sequential_3D.run(ij.process.ImageProcessor)
        setPosition(int) *
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.duplicate()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.duplicate()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.duplicate()
            <-- mtb_morphology.Threshold_Image.run(ij.process.ImageProcessor)
            <-- mtb_regions.Label_Components_Sequential_3D.run(ij.process.ImageProcessor)
        setProcessor(java.lang.String, ij.process.ImageProcessor) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        setProperty(java.lang.String, java.lang.Object) *
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.show()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.MTBImageByte(ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.MTBImageByte(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.getImagePlus()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.MTBImageFloat(ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.MTBImageFloat(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.getImagePlus()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.getImagePlusRGB()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.MTBImageShort(ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.MTBImageShort(int, int, int, int, int)
        setStack(java.lang.String, ij.ImageStack) *
            <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.Image3DToStack()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.duplicate()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.duplicate()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.duplicate()
        setTitle(java.lang.String) *
            <-- mtb_filters.Rank_Operator.run(ij.process.ImageProcessor)
            <-- mtb_morphology.HDomeTransform_3D.run(ij.process.ImageProcessor)
            <-- mtb_regions.Label_Components_Sequential_3D.run(ij.process.ImageProcessor)
        show() *
            <-- de.unihalle.informatik.MiToBo.apps.cells2D.CellSegmentAlgos.voronoiTesselation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.show()
            <-- mtb_contours.Contour_on_Labeled_Components.run(ij.process.ImageProcessor)
            <-- mtb_morphology.Link_Components.run(ij.process.ImageProcessor)
            <-- mtb_morphology.Morph_3D.run(java.lang.String)
            <-- mtb_regions.Label_Components_Recursive.run(ij.process.ImageProcessor)
            <-- mtb_regions.Label_Components_Sequential.run(ij.process.ImageProcessor)
            <-- mtb_regions.Label_Components_Sequential_3D.run(ij.process.ImageProcessor)
            <-- mtb_regions.Segment_No_Edges3D.run(ij.process.ImageProcessor)
        updateAndRepaintWindow() *
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.updateAndRepaintWindow()
    ImageStack *
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(ij.ImageStack)
        <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(ij.ImageStack, int)
        <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.Image3D(java.lang.String)
        <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.Image3DToStack()
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.MTBImage()
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.MTBImage(ij.ImagePlus)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.m_imgStack
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.MTBImageByte(ij.ImagePlus)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.MTBImageByte(int, int, int, int, int)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.duplicate()
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.getImagePlus()
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.MTBImageFloat(ij.ImagePlus)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.MTBImageFloat(int, int, int, int, int)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.duplicate()
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.getImagePlus()
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.getImagePlusRGB()
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.MTBImageShort(ij.ImagePlus)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.MTBImageShort(int, int, int, int, int)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.duplicate()
        <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.deleteBorder(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
        <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.open()
        <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.open(int[])
        <-- mtb_enhance.Correct_Gamma.run(ij.process.ImageProcessor)
        <-- mtb_granules.Cell_Segment_2D.run(ij.process.ImageProcessor)
        <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
        ImageStack() *
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.open()
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.open(int[])
        ImageStack(int, int) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.Image3DToStack()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.duplicate()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.duplicate()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.duplicate()
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.deleteBorder(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.open()
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.open(int[])
        addSlice(java.lang.String, ij.process.ImageProcessor) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.Image3DToStack()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.duplicate()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.duplicate()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.duplicate()
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.deleteBorder(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.open()
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.open(int[])
        getHeight() *
            <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.Image3D(java.lang.String)
        getProcessor(int) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(ij.ImageStack)
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(ij.ImageStack, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.Image3D(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.MTBImageByte(ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.MTBImageByte(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.duplicate()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.getImagePlus()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.MTBImageFloat(ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.MTBImageFloat(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.duplicate()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.getImagePlus()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.getImagePlusRGB()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.MTBImageShort(ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.MTBImageShort(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.duplicate()
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.deleteBorder(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            <-- mtb_enhance.Correct_Gamma.run(ij.process.ImageProcessor)
            <-- mtb_granules.Cell_Segment_2D.run(ij.process.ImageProcessor)
            <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
        getSize() *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(ij.ImageStack)
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(ij.ImageStack, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.Image3D(java.lang.String)
            <-- mtb_granules.Cell_Segment_2D.run(ij.process.ImageProcessor)
        getSliceLabel(int) *
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.duplicate()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.duplicate()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.duplicate()
        getWidth() *
            <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.Image3D(java.lang.String)
ij.gui *
    DialogListener *
        <-- mtb_enhance.Correct_Gamma
        <-- mtb_enhance.Correct_Gamma.run(ij.process.ImageProcessor)
        <-- mtb_morphology.Threshold_Image
        <-- mtb_morphology.Threshold_Image.thresholdSetupDialog()
    GenericDialog *
        <-- mtb_enhance.Correct_Gamma.dialogItemChanged(ij.gui.GenericDialog, java.awt.AWTEvent)
        <-- mtb_morphology.Threshold_Image.dialogItemChanged(ij.gui.GenericDialog, java.awt.AWTEvent)
        GenericDialog(java.lang.String) *
            <-- mtb_demo.Demo_MTBOpBase_Plugin.parameterDialog()
            <-- mtb_enhance.Correct_Gamma.run(ij.process.ImageProcessor)
            <-- mtb_fields.Create_GVF.run(ij.process.ImageProcessor)
            <-- mtb_filters.Rank_Operator.parameterDialog()
            <-- mtb_morphology.HDomeTransform_3D.parameterDialog()
            <-- mtb_morphology.Morph_3D.run(java.lang.String)
            <-- mtb_morphology.Threshold_Image.thresholdSetupDialog()
            <-- mtb_morphology.Threshold_Image_Niblack.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            <-- mtb_regions.Label_Components_Sequential.chooseNeighborhoodDialog()
            <-- mtb_regions.Label_Components_Sequential_3D.parameterDialog()
            <-- mtb_regions.Segment_No_Edges3D.run(ij.process.ImageProcessor)
        addCheckboxGroup(int, int, java.lang.String[], boolean[]) *
            <-- mtb_filters.Rank_Operator.parameterDialog()
        addChoice(java.lang.String, java.lang.String[], java.lang.String) *
            <-- mtb_enhance.Correct_Gamma.run(ij.process.ImageProcessor)
            <-- mtb_filters.Rank_Operator.parameterDialog()
            <-- mtb_morphology.Morph_3D.run(java.lang.String)
            <-- mtb_morphology.Threshold_Image.thresholdSetupDialog()
            <-- mtb_regions.Label_Components_Sequential.chooseNeighborhoodDialog()
            <-- mtb_regions.Label_Components_Sequential_3D.parameterDialog()
        addDialogListener(ij.gui.DialogListener) *
            <-- mtb_enhance.Correct_Gamma.run(ij.process.ImageProcessor)
            <-- mtb_morphology.Threshold_Image.thresholdSetupDialog()
        addMessage(java.lang.String) *
            <-- mtb_enhance.Correct_Gamma.run(ij.process.ImageProcessor)
            <-- mtb_fields.Create_GVF.run(ij.process.ImageProcessor)
            <-- mtb_filters.Rank_Operator.parameterDialog()
            <-- mtb_morphology.Threshold_Image.thresholdSetupDialog()
        addNumericField(java.lang.String, double, int) *
            <-- mtb_demo.Demo_MTBOpBase_Plugin.parameterDialog()
            <-- mtb_enhance.Correct_Gamma.run(ij.process.ImageProcessor)
            <-- mtb_fields.Create_GVF.run(ij.process.ImageProcessor)
            <-- mtb_filters.Rank_Operator.parameterDialog()
            <-- mtb_morphology.HDomeTransform_3D.parameterDialog()
            <-- mtb_morphology.Morph_3D.run(java.lang.String)
            <-- mtb_morphology.Threshold_Image_Niblack.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            <-- mtb_regions.Segment_No_Edges3D.run(ij.process.ImageProcessor)
        addSlider(java.lang.String, double, double, double) *
            <-- mtb_morphology.Threshold_Image.thresholdSetupDialog()
        getCheckboxes() *
            <-- mtb_filters.Rank_Operator.parameterDialog()
        getChoices() *
            <-- mtb_morphology.Threshold_Image.dialogItemChanged(ij.gui.GenericDialog, java.awt.AWTEvent)
        getNextChoice() *
            <-- mtb_morphology.Morph_3D.run(java.lang.String)
        getNextChoiceIndex() *
            <-- mtb_enhance.Correct_Gamma.run(ij.process.ImageProcessor)
            <-- mtb_filters.Rank_Operator.parameterDialog()
            <-- mtb_regions.Label_Components_Sequential.chooseNeighborhoodDialog()
            <-- mtb_regions.Label_Components_Sequential_3D.parameterDialog()
        getNextNumber() *
            <-- mtb_demo.Demo_MTBOpBase_Plugin.parameterDialog()
            <-- mtb_enhance.Correct_Gamma.dialogItemChanged(ij.gui.GenericDialog, java.awt.AWTEvent)
            <-- mtb_enhance.Correct_Gamma.run(ij.process.ImageProcessor)
            <-- mtb_fields.Create_GVF.run(ij.process.ImageProcessor)
            <-- mtb_filters.Rank_Operator.parameterDialog()
            <-- mtb_morphology.HDomeTransform_3D.parameterDialog()
            <-- mtb_morphology.Morph_3D.run(java.lang.String)
            <-- mtb_morphology.Threshold_Image.dialogItemChanged(ij.gui.GenericDialog, java.awt.AWTEvent)
            <-- mtb_morphology.Threshold_Image_Niblack.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            <-- mtb_regions.Segment_No_Edges3D.run(ij.process.ImageProcessor)
        invalidNumber() *
            <-- mtb_enhance.Correct_Gamma.dialogItemChanged(ij.gui.GenericDialog, java.awt.AWTEvent)
        showDialog() *
            <-- mtb_demo.Demo_MTBOpBase_Plugin.parameterDialog()
            <-- mtb_enhance.Correct_Gamma.run(ij.process.ImageProcessor)
            <-- mtb_fields.Create_GVF.run(ij.process.ImageProcessor)
            <-- mtb_filters.Rank_Operator.parameterDialog()
            <-- mtb_morphology.HDomeTransform_3D.parameterDialog()
            <-- mtb_morphology.Morph_3D.run(java.lang.String)
            <-- mtb_morphology.Threshold_Image.thresholdSetupDialog()
            <-- mtb_morphology.Threshold_Image_Niblack.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            <-- mtb_regions.Label_Components_Sequential.chooseNeighborhoodDialog()
            <-- mtb_regions.Label_Components_Sequential_3D.parameterDialog()
            <-- mtb_regions.Segment_No_Edges3D.run(ij.process.ImageProcessor)
        wasCanceled() *
            <-- mtb_enhance.Correct_Gamma.run(ij.process.ImageProcessor)
            <-- mtb_fields.Create_GVF.run(ij.process.ImageProcessor)
            <-- mtb_regions.Label_Components_Sequential.chooseNeighborhoodDialog()
        wasOKed() *
            <-- mtb_demo.Demo_MTBOpBase_Plugin.parameterDialog()
            <-- mtb_filters.Rank_Operator.parameterDialog()
            <-- mtb_morphology.HDomeTransform_3D.parameterDialog()
            <-- mtb_morphology.Threshold_Image.thresholdSetupDialog()
            <-- mtb_regions.Label_Components_Sequential_3D.parameterDialog()
    ImageWindow *
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.show()
        <-- mtb_regions.Label_Components_Sequential_3D.run(ij.process.ImageProcessor)
    NewImage *
        createByteImage(java.lang.String, int, int, int, int) *
            <-- de.unihalle.informatik.MiToBo.apps.cells2D.CellSegmentAlgos.voronoiTesselation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcLongestPathProfiles(ij.ImagePlus, ij.ImagePlus, ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.datatypes.Region2D.toMTBImageByte(java.lang.String, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.Snake.toMTBImageByte(java.lang.String, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.MTBImageByte(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.enhance.HistogramEqualization.equalizeImageHisto(ij.process.ImageProcessor)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.deleteBorder(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            <-- de.unihalle.informatik.MiToBo.morphology.ComponentPostprocess.EraseSmallComponents(ij.process.ImageProcessor, int)
            <-- de.unihalle.informatik.MiToBo.morphology.ComponentPostprocess.LinkAdjacentComponents(ij.process.ImageProcessor, double)
            <-- de.unihalle.informatik.MiToBo.morphology.ImgDilate.applyMask(ij.process.ImageProcessor, int)
            <-- de.unihalle.informatik.MiToBo.morphology.ImgErode.applyMask(ij.process.ImageProcessor, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThresh.applyThreshold(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThresh.applyThreshold(ij.process.ImageProcessor, int)
            <-- mtb_contours.Contour_on_Labeled_Components.add_InnerContours(java.util.Vector, java.util.Vector)
            <-- mtb_contours.Contour_on_Labeled_Components.get_ContourImage(java.util.Vector)
            <-- mtb_neurites.Neurit_Detector_2D.getSnakeRegion(java.awt.Polygon)
            <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
            <-- mtb_neurites.Neurit_Detector_2D.removeCellBody(de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        createFloatImage(java.lang.String, int, int, int, int) *
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.getImagePlus()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.MTBImageFloat(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.getImagePlus()
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.deleteBorder(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsRecursive.regionSegmentation(ij.process.ImageProcessor)
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential.regionSegmentation(ij.process.ImageProcessor, boolean)
        createRGBImage(java.lang.String, int, int, int, int) *
            <-- de.unihalle.informatik.MiToBo.apps.cells2D.CellSegmentAlgos.voronoiTesselation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcLongestPathProfiles(ij.ImagePlus, ij.ImagePlus, ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.getNeuritePathTrees(ij.process.ImageProcessor, ij.process.ImageProcessor, ij.process.ImageProcessor, java.util.Vector)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.getImagePlusRGB()
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.deleteBorder(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.SkeletonTree(int, int, ij.ImagePlus)
            <-- mtb_regions.Label_Components_Recursive.run(ij.process.ImageProcessor)
            <-- mtb_regions.Label_Components_Sequential.run(ij.process.ImageProcessor)
        createShortImage(java.lang.String, int, int, int, int) *
            <-- de.unihalle.informatik.MiToBo.datatypes.Snake.toMTBImage(java.lang.String, int, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.MTBImageShort(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.enhance.HistogramEqualization.equalizeImageHisto(ij.process.ImageProcessor)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.deleteBorder(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.applyNiblackThresholdWholeImage(ij.process.ImageProcessor, double, double, ij.ImagePlus)
            <-- mtb_granules.Cell_Segment_2D.run(ij.process.ImageProcessor)
    StackWindow *
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.show()
        <-- mtb_regions.Label_Components_Sequential_3D.run(ij.process.ImageProcessor)
        setPosition(int, int, int) *
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.show()
            <-- mtb_regions.Label_Components_Sequential_3D.run(ij.process.ImageProcessor)
        updateSliceSelector() *
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.show()
            <-- mtb_regions.Label_Components_Sequential_3D.run(ij.process.ImageProcessor)
ij.io *
    FileSaver *
        FileSaver(ij.ImagePlus) *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.saveSkeletonImage(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.saveVoronoiImage(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.saveFile(boolean)
        saveAsGif(java.lang.String) *
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.saveFile(boolean)
        saveAsJpeg(java.lang.String) *
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.saveFile(boolean)
        saveAsPng(java.lang.String) *
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.saveFile(boolean)
        saveAsTiff(java.lang.String) *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.saveSkeletonImage(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.saveVoronoiImage(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.saveFile(boolean)
        saveAsTiffStack(java.lang.String) *
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.saveFile(boolean)
    OpenDialog *
        OpenDialog(java.lang.String, java.lang.String) *
            <-- mtb_morphology.Morph_3D.run(java.lang.String)
        getDirectory() *
            <-- mtb_morphology.Morph_3D.run(java.lang.String)
        getFileName() *
            <-- mtb_morphology.Morph_3D.run(java.lang.String)
    SaveDialog *
        SaveDialog(java.lang.String, java.lang.String, java.lang.String) *
            <-- mtb_fields.Create_GVF.writeUV(double[], double[], int, int)
        getDirectory() *
            <-- mtb_fields.Create_GVF.writeUV(double[], double[], int, int)
        getFileName() *
            <-- mtb_fields.Create_GVF.writeUV(double[], double[], int, int)
ij.plugin *
    PlugIn *
        <-- mtb_granules.Granule_Detector_2D
        <-- mtb_io.Open_Image
        <-- mtb_morphology.Morph_3D
        <-- mtb_neurites.Neurit_Detector_2D
ij.plugin.filter *
    PlugInFilter *
        <-- de.unihalle.informatik.MiToBo.meta.MTBOpBasePlugin
        <-- mtb_contours.Contour_on_Labeled_Components
        <-- mtb_demo.Demo_MTBOpBase_Plugin
        <-- mtb_enhance.Correct_Gamma
        <-- mtb_fields.Create_GVF
        <-- mtb_filters.Rank_Operator
        <-- mtb_granules.Cell_Segment_2D
        <-- mtb_io.Save_Image
        <-- mtb_morphology.CalcOtsuThreshold_Image
        <-- mtb_morphology.HDomeTransform_3D
        <-- mtb_morphology.Link_Components
        <-- mtb_morphology.Threshold_Image
        <-- mtb_regions.Label_Components_Recursive
        <-- mtb_regions.Label_Components_Sequential
        <-- mtb_regions.Label_Components_Sequential_3D
        <-- mtb_regions.Segment_No_Edges3D
ij.process *
    BinaryProcessor *
        BinaryProcessor(ij.process.ByteProcessor) *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.getNeuritePathTrees(ij.process.ImageProcessor, ij.process.ImageProcessor, ij.process.ImageProcessor, java.util.Vector)
            <-- de.unihalle.informatik.MiToBo.morphology.ComponentPostprocess.LinkAdjacentComponents(ij.process.ImageProcessor, double)
        getPixel(int, int) *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.getNeuritePathTrees(ij.process.ImageProcessor, ij.process.ImageProcessor, ij.process.ImageProcessor, java.util.Vector)
            <-- de.unihalle.informatik.MiToBo.morphology.ComponentPostprocess.LinkAdjacentComponents(ij.process.ImageProcessor, double)
        skeletonize() *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.getNeuritePathTrees(ij.process.ImageProcessor, ij.process.ImageProcessor, ij.process.ImageProcessor, java.util.Vector)
            <-- de.unihalle.informatik.MiToBo.morphology.ComponentPostprocess.LinkAdjacentComponents(ij.process.ImageProcessor, double)
    ByteProcessor *
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.getNeuritePathTrees(ij.process.ImageProcessor, ij.process.ImageProcessor, ij.process.ImageProcessor, java.util.Vector)
        <-- de.unihalle.informatik.MiToBo.morphology.ComponentPostprocess.LinkAdjacentComponents(ij.process.ImageProcessor, double)
        ByteProcessor(int, int) *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.getNeuritePathTrees(ij.process.ImageProcessor, ij.process.ImageProcessor, ij.process.ImageProcessor, java.util.Vector)
            <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.Image3DToStack()
            <-- de.unihalle.informatik.MiToBo.morphology.ComponentPostprocess.LinkAdjacentComponents(ij.process.ImageProcessor, double)
        putPixel(int, int, int) *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.getNeuritePathTrees(ij.process.ImageProcessor, ij.process.ImageProcessor, ij.process.ImageProcessor, java.util.Vector)
            <-- de.unihalle.informatik.MiToBo.morphology.ComponentPostprocess.LinkAdjacentComponents(ij.process.ImageProcessor, double)
        setPixels(java.lang.Object) *
            <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.Image3DToStack()
    ImageProcessor *
        <-- de.unihalle.informatik.MiToBo.apps.cells2D.CellSegmentAlgos.voronoiTesselation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.detectPbodies(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcLongestPathProfiles(ij.ImagePlus, ij.ImagePlus, ij.ImagePlus)
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcProfile(de.unihalle.informatik.MiToBo.datatypes.Region2D, de.unihalle.informatik.MiToBo.morphology.SkeletonTree, ij.process.ImageProcessor, ij.process.ImageProcessor)
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.getNeuritePathTrees(ij.process.ImageProcessor, ij.process.ImageProcessor, ij.process.ImageProcessor, java.util.Vector)
        <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(ij.ImageStack)
        <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(ij.ImageStack, int)
        <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(ij.process.ImageProcessor)
        <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(ij.process.ImageProcessor, int)
        <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.Image3D(java.lang.String)
        <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.Image3DToStack()
        <-- de.unihalle.informatik.MiToBo.datatypes.Region2D.toMTBImageByte(java.lang.String, int, int)
        <-- de.unihalle.informatik.MiToBo.datatypes.Snake.toMTBImage(java.lang.String, int, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.datatypes.Snake.toMTBImageByte(java.lang.String, int, int)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.MTBImageByte(ij.ImagePlus)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.MTBImageByte(int, int, int, int, int)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.duplicate()
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.getImagePlus()
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.MTBImageFloat(ij.ImagePlus)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.MTBImageFloat(int, int, int, int, int)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.duplicate()
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.getImagePlus()
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.getImagePlusRGB()
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.MTBImageShort(ij.ImagePlus)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.MTBImageShort(int, int, int, int, int)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.duplicate()
        <-- de.unihalle.informatik.MiToBo.enhance.GammaCorrection.correctGamma(ij.process.ImageProcessor, double, int)
        <-- de.unihalle.informatik.MiToBo.enhance.HistogramEqualization.equalizeImageHisto(ij.process.ImageProcessor)
        <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.deleteBorder(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
        <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.open()
        <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.open(int[])
        <-- de.unihalle.informatik.MiToBo.meta.MTBOpBasePlugin.inputProc
        <-- de.unihalle.informatik.MiToBo.meta.MTBOpBasePlugin.run(ij.process.ImageProcessor)
        <-- de.unihalle.informatik.MiToBo.meta.MTBOpBasePlugin.setup(java.lang.String, ij.ImagePlus)
        <-- de.unihalle.informatik.MiToBo.morphology.ComponentPostprocess.EraseSmallComponents(ij.process.ImageProcessor, int)
        <-- de.unihalle.informatik.MiToBo.morphology.ComponentPostprocess.LinkAdjacentComponents(ij.process.ImageProcessor, double)
        <-- de.unihalle.informatik.MiToBo.morphology.ImgDilate.applyMask(ij.process.ImageProcessor, int)
        <-- de.unihalle.informatik.MiToBo.morphology.ImgErode.applyMask(ij.process.ImageProcessor, int)
        <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.SkeletonTree(int, int, ij.ImagePlus)
        <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.expandPath(de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData, int, int)
        <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.skelIP
        <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.tmpSkelIP
        <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsRecursive.binIP
        <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsRecursive.labelIP
        <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsRecursive.labelRecursive(int, int, int, de.unihalle.informatik.MiToBo.datatypes.Region2D)
        <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsRecursive.regionSegmentation(ij.process.ImageProcessor)
        <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential.getLabelSavely(int, int)
        <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential.m_labelIP
        <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential.regionSegmentation(ij.process.ImageProcessor, boolean)
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu.calcThreshold(ij.process.ImageProcessor)
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThresh.applyThreshold(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThresh.applyThreshold(ij.process.ImageProcessor, int)
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThresh.applyThreshold(ij.process.ImageProcessor, int, int, int)
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.applyNiblackThresholdMaskwise(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, double, double, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.applyNiblackThresholdWholeImage(ij.process.ImageProcessor, double, double, ij.ImagePlus)
        <-- mtb_contours.Contour_on_Labeled_Components.add_InnerContours(java.util.Vector, java.util.Vector)
        <-- mtb_contours.Contour_on_Labeled_Components.get_ContourImage(java.util.Vector)
        <-- mtb_contours.Contour_on_Labeled_Components.get_Contours(ij.process.ImageProcessor, java.util.Vector)
        <-- mtb_contours.Contour_on_Labeled_Components.get_ContoursOnRegions(ij.process.ImageProcessor, java.util.Vector)
        <-- mtb_contours.Contour_on_Labeled_Components.get_OuterContours(ij.process.ImageProcessor, java.util.Vector)
        <-- mtb_contours.Contour_on_Labeled_Components.run(ij.process.ImageProcessor)
        <-- mtb_demo.Demo_MTBOpBase_Plugin.run(ij.process.ImageProcessor)
        <-- mtb_enhance.Correct_Gamma.run(ij.process.ImageProcessor)
        <-- mtb_fields.Create_GVF.run(ij.process.ImageProcessor)
        <-- mtb_filters.Rank_Operator.run(ij.process.ImageProcessor)
        <-- mtb_granules.Cell_Segment_2D.run(ij.process.ImageProcessor)
        <-- mtb_io.Save_Image.run(ij.process.ImageProcessor)
        <-- mtb_morphology.CalcOtsuThreshold_Image.inputProc
        <-- mtb_morphology.CalcOtsuThreshold_Image.run(ij.process.ImageProcessor)
        <-- mtb_morphology.CalcOtsuThreshold_Image.setup(java.lang.String, ij.ImagePlus)
        <-- mtb_morphology.HDomeTransform_3D.run(ij.process.ImageProcessor)
        <-- mtb_morphology.Link_Components.run(ij.process.ImageProcessor)
        <-- mtb_morphology.Threshold_Image.run(ij.process.ImageProcessor)
        <-- mtb_neurites.Neurit_Detector_2D.getSnakeRegion(java.awt.Polygon)
        <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
        <-- mtb_neurites.Neurit_Detector_2D.removeCellBody(de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        <-- mtb_regions.Label_Components_Recursive.run(ij.process.ImageProcessor)
        <-- mtb_regions.Label_Components_Sequential.run(ij.process.ImageProcessor)
        <-- mtb_regions.Label_Components_Sequential_3D.run(ij.process.ImageProcessor)
        <-- mtb_regions.Segment_No_Edges3D.run(ij.process.ImageProcessor)
        applyTable(int[]) *
            <-- de.unihalle.informatik.MiToBo.enhance.GammaCorrection.correctGamma(ij.process.ImageProcessor, double, int)
        copyBits(ij.process.ImageProcessor, int, int, int) *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcLongestPathProfiles(ij.ImagePlus, ij.ImagePlus, ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.datatypes.Snake.toMTBImage(java.lang.String, int, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.morphology.ComponentPostprocess.EraseSmallComponents(ij.process.ImageProcessor, int)
            <-- de.unihalle.informatik.MiToBo.morphology.ComponentPostprocess.LinkAdjacentComponents(ij.process.ImageProcessor, double)
            <-- de.unihalle.informatik.MiToBo.morphology.ImgDilate.applyMask(ij.process.ImageProcessor, int)
            <-- de.unihalle.informatik.MiToBo.morphology.ImgErode.applyMask(ij.process.ImageProcessor, int)
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.SkeletonTree(int, int, ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.applyNiblackThresholdWholeImage(ij.process.ImageProcessor, double, double, ij.ImagePlus)
            <-- mtb_granules.Cell_Segment_2D.run(ij.process.ImageProcessor)
            <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
            <-- mtb_neurites.Neurit_Detector_2D.removeCellBody(de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        drawLine(int, int, int, int) *
            <-- de.unihalle.informatik.MiToBo.datatypes.Snake.toMTBImage(java.lang.String, int, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.datatypes.Snake.toMTBImageByte(java.lang.String, int, int)
            <-- de.unihalle.informatik.MiToBo.morphology.ComponentPostprocess.LinkAdjacentComponents(ij.process.ImageProcessor, double)
        drawPixel(int, int) *
            <-- de.unihalle.informatik.MiToBo.datatypes.Region2D.toMTBImageByte(java.lang.String, int, int)
        duplicate() *
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.duplicate()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.duplicate()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.duplicate()
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThresh.applyThreshold(ij.process.ImageProcessor, int, int, int)
        getHeight() *
            <-- de.unihalle.informatik.MiToBo.enhance.HistogramEqualization.equalizeImageHisto(ij.process.ImageProcessor)
            <-- de.unihalle.informatik.MiToBo.morphology.ComponentPostprocess.EraseSmallComponents(ij.process.ImageProcessor, int)
            <-- de.unihalle.informatik.MiToBo.morphology.ComponentPostprocess.LinkAdjacentComponents(ij.process.ImageProcessor, double)
            <-- de.unihalle.informatik.MiToBo.morphology.ImgDilate.applyMask(ij.process.ImageProcessor, int)
            <-- de.unihalle.informatik.MiToBo.morphology.ImgErode.applyMask(ij.process.ImageProcessor, int)
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.SkeletonTree(int, int, ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsRecursive.regionSegmentation(ij.process.ImageProcessor)
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential.regionSegmentation(ij.process.ImageProcessor, boolean)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThresh.applyThreshold(ij.process.ImageProcessor, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThresh.applyThreshold(ij.process.ImageProcessor, int, int, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.applyNiblackThresholdWholeImage(ij.process.ImageProcessor, double, double, ij.ImagePlus)
            <-- mtb_contours.Contour_on_Labeled_Components.get_Contours(ij.process.ImageProcessor, java.util.Vector)
            <-- mtb_contours.Contour_on_Labeled_Components.get_ContoursOnRegions(ij.process.ImageProcessor, java.util.Vector)
            <-- mtb_contours.Contour_on_Labeled_Components.run(ij.process.ImageProcessor)
            <-- mtb_fields.Create_GVF.run(ij.process.ImageProcessor)
            <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
        getHistogram() *
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(ij.ImageStack)
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(ij.ImageStack, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(ij.process.ImageProcessor)
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(ij.process.ImageProcessor, int)
        getMax() *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.detectPbodies(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        getPixel(int, int) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcLongestPathProfiles(ij.ImagePlus, ij.ImagePlus, ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcProfile(de.unihalle.informatik.MiToBo.datatypes.Region2D, de.unihalle.informatik.MiToBo.morphology.SkeletonTree, ij.process.ImageProcessor, ij.process.ImageProcessor)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.getNeuritePathTrees(ij.process.ImageProcessor, ij.process.ImageProcessor, ij.process.ImageProcessor, java.util.Vector)
            <-- de.unihalle.informatik.MiToBo.enhance.HistogramEqualization.equalizeImageHisto(ij.process.ImageProcessor)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.deleteBorder(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            <-- de.unihalle.informatik.MiToBo.morphology.ComponentPostprocess.LinkAdjacentComponents(ij.process.ImageProcessor, double)
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.expandPath(de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData, int, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsRecursive.labelRecursive(int, int, int, de.unihalle.informatik.MiToBo.datatypes.Region2D)
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsRecursive.regionSegmentation(ij.process.ImageProcessor)
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential.getLabelSavely(int, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential.regionSegmentation(ij.process.ImageProcessor, boolean)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThresh.applyThreshold(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThresh.applyThreshold(ij.process.ImageProcessor, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThresh.applyThreshold(ij.process.ImageProcessor, int, int, int)
        getPixels() *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.Image3D(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.MTBImageByte(ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.MTBImageByte(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.getImagePlus()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.MTBImageFloat(ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.MTBImageFloat(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.getImagePlus()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.getImagePlusRGB()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.MTBImageShort(ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.MTBImageShort(int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThresh.applyThreshold(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThresh.applyThreshold(ij.process.ImageProcessor, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.applyNiblackThresholdMaskwise(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, double, double, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            <-- mtb_contours.Contour_on_Labeled_Components.get_OuterContours(ij.process.ImageProcessor, java.util.Vector)
            <-- mtb_neurites.Neurit_Detector_2D.getSnakeRegion(java.awt.Polygon)
            <-- mtb_neurites.Neurit_Detector_2D.removeCellBody(de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        getRoi() *
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.applyNiblackThresholdMaskwise(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, double, double, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        getWidth() *
            <-- de.unihalle.informatik.MiToBo.enhance.HistogramEqualization.equalizeImageHisto(ij.process.ImageProcessor)
            <-- de.unihalle.informatik.MiToBo.morphology.ComponentPostprocess.EraseSmallComponents(ij.process.ImageProcessor, int)
            <-- de.unihalle.informatik.MiToBo.morphology.ComponentPostprocess.LinkAdjacentComponents(ij.process.ImageProcessor, double)
            <-- de.unihalle.informatik.MiToBo.morphology.ImgDilate.applyMask(ij.process.ImageProcessor, int)
            <-- de.unihalle.informatik.MiToBo.morphology.ImgErode.applyMask(ij.process.ImageProcessor, int)
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.SkeletonTree(int, int, ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsRecursive.regionSegmentation(ij.process.ImageProcessor)
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential.regionSegmentation(ij.process.ImageProcessor, boolean)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThresh.applyThreshold(ij.process.ImageProcessor, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThresh.applyThreshold(ij.process.ImageProcessor, int, int, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.applyNiblackThresholdWholeImage(ij.process.ImageProcessor, double, double, ij.ImagePlus)
            <-- mtb_contours.Contour_on_Labeled_Components.get_Contours(ij.process.ImageProcessor, java.util.Vector)
            <-- mtb_contours.Contour_on_Labeled_Components.get_ContoursOnRegions(ij.process.ImageProcessor, java.util.Vector)
            <-- mtb_contours.Contour_on_Labeled_Components.run(ij.process.ImageProcessor)
            <-- mtb_fields.Create_GVF.run(ij.process.ImageProcessor)
            <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
        insert(ij.process.ImageProcessor, int, int) *
            <-- mtb_enhance.Correct_Gamma.run(ij.process.ImageProcessor)
        invert() *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        putPixel(int, int, int) *
            <-- de.unihalle.informatik.MiToBo.apps.cells2D.CellSegmentAlgos.voronoiTesselation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcLongestPathProfiles(ij.ImagePlus, ij.ImagePlus, ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcProfile(de.unihalle.informatik.MiToBo.datatypes.Region2D, de.unihalle.informatik.MiToBo.morphology.SkeletonTree, ij.process.ImageProcessor, ij.process.ImageProcessor)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.getNeuritePathTrees(ij.process.ImageProcessor, ij.process.ImageProcessor, ij.process.ImageProcessor, java.util.Vector)
            <-- de.unihalle.informatik.MiToBo.enhance.HistogramEqualization.equalizeImageHisto(ij.process.ImageProcessor)
            <-- de.unihalle.informatik.MiToBo.morphology.ComponentPostprocess.EraseSmallComponents(ij.process.ImageProcessor, int)
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.expandPath(de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData, int, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsRecursive.labelRecursive(int, int, int, de.unihalle.informatik.MiToBo.datatypes.Region2D)
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsRecursive.regionSegmentation(ij.process.ImageProcessor)
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential.regionSegmentation(ij.process.ImageProcessor, boolean)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThresh.applyThreshold(ij.process.ImageProcessor, int, int, int)
            <-- mtb_contours.Contour_on_Labeled_Components.add_InnerContours(java.util.Vector, java.util.Vector)
            <-- mtb_contours.Contour_on_Labeled_Components.get_ContourImage(java.util.Vector)
            <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
            <-- mtb_regions.Label_Components_Recursive.run(ij.process.ImageProcessor)
            <-- mtb_regions.Label_Components_Sequential.run(ij.process.ImageProcessor)
        putPixelValue(int, int, double) *
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.deleteBorder(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
        setColor(int) *
            <-- de.unihalle.informatik.MiToBo.morphology.ComponentPostprocess.LinkAdjacentComponents(ij.process.ImageProcessor, double)
        setPixels(java.lang.Object) *
            <-- mtb_contours.Contour_on_Labeled_Components.add_InnerContours(java.util.Vector, java.util.Vector)
        setRoi(int, int, int, int) *
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.applyNiblackThresholdMaskwise(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, double, double, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
    ImageStatistics *
        <-- de.unihalle.informatik.MiToBo.enhance.GammaCorrection.correctGamma(ij.process.ImageProcessor, double, int)
        histMax *
            <-- de.unihalle.informatik.MiToBo.enhance.GammaCorrection.correctGamma(ij.process.ImageProcessor, double, int)
    ShortProcessor *
        ShortProcessor(int, int) *
            <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.Image3DToStack()
        setPixels(java.lang.Object) *
            <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.Image3DToStack()
java.awt *
    AWTEvent *
        <-- mtb_enhance.Correct_Gamma.dialogItemChanged(ij.gui.GenericDialog, java.awt.AWTEvent)
        <-- mtb_morphology.Threshold_Image.dialogItemChanged(ij.gui.GenericDialog, java.awt.AWTEvent)
    BorderLayout *
        BorderLayout() *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupResultTable()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.DirChanWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.SnakeWindow()
        BorderLayout(int, int) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
        setVgap(int) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
    Checkbox *
        <-- mtb_filters.Rank_Operator.parameterDialog()
        getState() *
            <-- mtb_filters.Rank_Operator.parameterDialog()
        setEnabled(boolean) *
            <-- mtb_filters.Rank_Operator.parameterDialog()
    Choice *
        <-- mtb_morphology.Threshold_Image.dialogItemChanged(ij.gui.GenericDialog, java.awt.AWTEvent)
        getSelectedIndex() *
            <-- mtb_morphology.Threshold_Image.dialogItemChanged(ij.gui.GenericDialog, java.awt.AWTEvent)
    Color *
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.DirChanWindow()
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.NeuritDetector2DGUI()
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.SnakeWindow()
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.myBlue
        <-- de.unihalle.informatik.MiToBo.datatypes.Region2D.toMTBImageByte(java.lang.String, int, int)
        <-- de.unihalle.informatik.MiToBo.datatypes.Snake.toMTBImage(java.lang.String, int, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.datatypes.Snake.toMTBImageByte(java.lang.String, int, int)
        Color(int, int, int) *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.DirChanWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.NeuritDetector2DGUI()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.SnakeWindow()
        WHITE *
            <-- de.unihalle.informatik.MiToBo.datatypes.Region2D.toMTBImageByte(java.lang.String, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.Snake.toMTBImage(java.lang.String, int, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.datatypes.Snake.toMTBImageByte(java.lang.String, int, int)
    Component *
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.saveTable()
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.actionPerformed(java.awt.event.ActionEvent)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupResultTable()
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.DirChanWindow()
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.SnakeWindow()
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.showMessage(java.lang.String)
        <-- mtb_io.Open_Image.channelWindow()
        <-- mtb_io.Open_Image.open()
        <-- mtb_io.Save_Image.save()
    Dimension *
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupResultTable()
        Dimension(int, int) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupResultTable()
    FlowLayout *
        FlowLayout() *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupResultTable()
        FlowLayout(int, int, int) *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
    GridBagConstraints *
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
        GridBagConstraints() *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
        anchor *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
        gridx *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
        gridy *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
        ipadx *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
        ipady *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
    GridBagLayout *
        GridBagLayout() *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
        setConstraints(java.awt.Component, java.awt.GridBagConstraints) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
    GridLayout *
        GridLayout(int, int) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.DirChanWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.SnakeWindow()
        setVgap(int) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
    LayoutManager *
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupResultTable()
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.DirChanWindow()
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.SnakeWindow()
    Point *
        <-- mtb_contours.Contour_on_Labeled_Components.findNextPoint(java.awt.Point, int)
        <-- mtb_contours.Contour_on_Labeled_Components.traceContour(int, int)
        Point(int, int) *
            <-- mtb_contours.Contour_on_Labeled_Components.traceContour(int, int)
        getX() *
            <-- mtb_contours.Contour_on_Labeled_Components.findNextPoint(java.awt.Point, int)
            <-- mtb_contours.Contour_on_Labeled_Components.traceContour(int, int)
        getY() *
            <-- mtb_contours.Contour_on_Labeled_Components.findNextPoint(java.awt.Point, int)
            <-- mtb_contours.Contour_on_Labeled_Components.traceContour(int, int)
        setLocation(int, int) *
            <-- mtb_contours.Contour_on_Labeled_Components.findNextPoint(java.awt.Point, int)
    Polygon *
        <-- de.unihalle.informatik.MiToBo.datatypes.Snake.getSnakePolygon()
        <-- mtb_neurites.Neurit_Detector_2D.getSnakeRegion(java.awt.Polygon)
        <-- mtb_neurites.Neurit_Detector_2D.process()
        Polygon() *
            <-- de.unihalle.informatik.MiToBo.datatypes.Snake.getSnakePolygon()
        Polygon(int[], int[], int) *
            <-- mtb_contours.Contour_on_Labeled_Components.add_InnerContours(java.util.Vector, java.util.Vector)
        addPoint(int, int) *
            <-- de.unihalle.informatik.MiToBo.datatypes.Snake.getSnakePolygon()
        contains(int, int) *
            <-- mtb_contours.Contour_on_Labeled_Components.add_InnerContours(java.util.Vector, java.util.Vector)
            <-- mtb_neurites.Neurit_Detector_2D.getSnakeRegion(java.awt.Polygon)
        npoints *
            <-- mtb_neurites.Neurit_Detector_2D.getSnakeRegion(java.awt.Polygon)
        xpoints *
            <-- mtb_neurites.Neurit_Detector_2D.getSnakeRegion(java.awt.Polygon)
        ypoints *
            <-- mtb_neurites.Neurit_Detector_2D.getSnakeRegion(java.awt.Polygon)
    Rectangle *
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.applyNiblackThresholdMaskwise(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, double, double, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        height *
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.applyNiblackThresholdMaskwise(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, double, double, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        width *
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.applyNiblackThresholdMaskwise(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, double, double, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        x *
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.applyNiblackThresholdMaskwise(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, double, double, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        y *
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.applyNiblackThresholdMaskwise(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, double, double, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
java.awt.event *
    ActionEvent *
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.actionPerformed(java.awt.event.ActionEvent)
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
        <-- mtb_io.Open_Image.actionPerformed(java.awt.event.ActionEvent)
        getActionCommand() *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.actionPerformed(java.awt.event.ActionEvent)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
            <-- mtb_io.Open_Image.actionPerformed(java.awt.event.ActionEvent)
    ActionListener *
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupResultTable()
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.DirChanWindow()
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
        <-- mtb_io.Open_Image
        <-- mtb_io.Open_Image.channelWindow()
java.awt.geom *
    Point2D$Double *
        <-- de.unihalle.informatik.MiToBo.apps.cells2D.CellSegmentAlgos.voronoiTesselation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.saveProfileData(java.lang.String)
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcLongestPathProfiles(ij.ImagePlus, ij.ImagePlus, ij.ImagePlus)
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcProfile(de.unihalle.informatik.MiToBo.datatypes.Region2D, de.unihalle.informatik.MiToBo.morphology.SkeletonTree, ij.process.ImageProcessor, ij.process.ImageProcessor)
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.getNeuritePathTrees(ij.process.ImageProcessor, ij.process.ImageProcessor, ij.process.ImageProcessor, java.util.Vector)
        <-- de.unihalle.informatik.MiToBo.datatypes.Contour2D.getPointAt(int)
        <-- de.unihalle.informatik.MiToBo.datatypes.Region2D.toMTBImageByte(java.lang.String, int, int)
        <-- de.unihalle.informatik.MiToBo.datatypes.Snake.getSnakePolygon()
        <-- de.unihalle.informatik.MiToBo.datatypes.Snake.toMTBImage(java.lang.String, int, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.datatypes.Snake.toMTBImageByte(java.lang.String, int, int)
        <-- de.unihalle.informatik.MiToBo.morphology.ComponentPostprocess.EraseSmallComponents(ij.process.ImageProcessor, int)
        <-- de.unihalle.informatik.MiToBo.morphology.ComponentPostprocess.LinkAdjacentComponents(ij.process.ImageProcessor, double)
        <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.buildTree()
        <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.expandPath(de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData, int, int)
        <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.getStartPoint()
        <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.getAllPathPixels(java.util.Vector)
        <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.getFirstPixels(java.util.Vector, int, int)
        <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.getLongestPath(java.util.Vector)
        <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.getStartPoint()
        <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.Resampler(java.util.Vector, double)
        <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.rearrange(int)
        <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.standardization(java.awt.geom.Point2D$Double)
        <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.SnakeAlgos.addAllPoints()
        <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.SnakeAlgos.calcSnake(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double[], double[], int, double)
        <-- mtb_contours.Contour_on_Labeled_Components.add_InnerContours(java.util.Vector, java.util.Vector)
        <-- mtb_contours.Contour_on_Labeled_Components.get_ContourImage(java.util.Vector)
        <-- mtb_contours.Contour_on_Labeled_Components.get_OuterContours(ij.process.ImageProcessor, java.util.Vector)
        <-- mtb_neurites.Neurit_Detector_2D.drawSnakeRegion(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.Region2D)
        <-- mtb_neurites.Neurit_Detector_2D.getControlPoints(de.unihalle.informatik.MiToBo.datatypes.Contour2D)
        <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
        <-- mtb_neurites.Neurit_Detector_2D.removeCellBody(de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        <-- mtb_regions.Label_Components_Recursive.run(ij.process.ImageProcessor)
        <-- mtb_regions.Label_Components_Sequential.run(ij.process.ImageProcessor)
        Point2D$Double() *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.getNeuritePathTrees(ij.process.ImageProcessor, ij.process.ImageProcessor, ij.process.ImageProcessor, java.util.Vector)
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.expandPath(de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData, int, int)
        Point2D$Double(double, double) *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcProfile(de.unihalle.informatik.MiToBo.datatypes.Region2D, de.unihalle.informatik.MiToBo.morphology.SkeletonTree, ij.process.ImageProcessor, ij.process.ImageProcessor)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.getNeuritePathTrees(ij.process.ImageProcessor, ij.process.ImageProcessor, ij.process.ImageProcessor, java.util.Vector)
            <-- de.unihalle.informatik.MiToBo.datatypes.Contour2D.addPixel(int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.Region2D.addPixel(int, int)
            <-- de.unihalle.informatik.MiToBo.morphology.ComponentPostprocess.LinkAdjacentComponents(ij.process.ImageProcessor, double)
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.expandPath(de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData, int, int)
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.appendPoint(int, int)
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.getAllPathPixels(java.util.Vector)
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.getFirstPixels(java.util.Vector, int, int)
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.getLongestPath(java.util.Vector)
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.getStartPoint()
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.getPoints()
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.rearrange(int)
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.standardization(java.awt.geom.Point2D$Double)
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.SnakeAlgos.addAllPoints()
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.SnakeAlgos.calcSnake(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double[], double[], int, double)
        getX() *
            <-- de.unihalle.informatik.MiToBo.apps.cells2D.CellSegmentAlgos.voronoiTesselation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.datatypes.Region2D.toMTBImageByte(java.lang.String, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.Snake.getSnakePolygon()
            <-- de.unihalle.informatik.MiToBo.datatypes.Snake.toMTBImage(java.lang.String, int, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.datatypes.Snake.toMTBImageByte(java.lang.String, int, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.Resampler(java.util.Vector, double)
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.rearrange(int)
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.standardization(java.awt.geom.Point2D$Double)
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.SnakeAlgos.addAllPoints()
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.SnakeAlgos.calcSnake(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double[], double[], int, double)
            <-- mtb_contours.Contour_on_Labeled_Components.add_InnerContours(java.util.Vector, java.util.Vector)
            <-- mtb_contours.Contour_on_Labeled_Components.get_ContourImage(java.util.Vector)
            <-- mtb_contours.Contour_on_Labeled_Components.get_OuterContours(ij.process.ImageProcessor, java.util.Vector)
            <-- mtb_neurites.Neurit_Detector_2D.drawSnakeRegion(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.Region2D)
            <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
            <-- mtb_neurites.Neurit_Detector_2D.removeCellBody(de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            <-- mtb_regions.Label_Components_Recursive.run(ij.process.ImageProcessor)
            <-- mtb_regions.Label_Components_Sequential.run(ij.process.ImageProcessor)
        getY() *
            <-- de.unihalle.informatik.MiToBo.apps.cells2D.CellSegmentAlgos.voronoiTesselation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.datatypes.Region2D.toMTBImageByte(java.lang.String, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.Snake.getSnakePolygon()
            <-- de.unihalle.informatik.MiToBo.datatypes.Snake.toMTBImage(java.lang.String, int, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.datatypes.Snake.toMTBImageByte(java.lang.String, int, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.Resampler(java.util.Vector, double)
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.rearrange(int)
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.standardization(java.awt.geom.Point2D$Double)
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.SnakeAlgos.addAllPoints()
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.SnakeAlgos.calcSnake(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double[], double[], int, double)
            <-- mtb_contours.Contour_on_Labeled_Components.add_InnerContours(java.util.Vector, java.util.Vector)
            <-- mtb_contours.Contour_on_Labeled_Components.get_ContourImage(java.util.Vector)
            <-- mtb_contours.Contour_on_Labeled_Components.get_OuterContours(ij.process.ImageProcessor, java.util.Vector)
            <-- mtb_neurites.Neurit_Detector_2D.drawSnakeRegion(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.Region2D)
            <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
            <-- mtb_neurites.Neurit_Detector_2D.removeCellBody(de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            <-- mtb_regions.Label_Components_Recursive.run(ij.process.ImageProcessor)
            <-- mtb_regions.Label_Components_Sequential.run(ij.process.ImageProcessor)
        x *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.saveProfileData(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcLongestPathProfiles(ij.ImagePlus, ij.ImagePlus, ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcProfile(de.unihalle.informatik.MiToBo.datatypes.Region2D, de.unihalle.informatik.MiToBo.morphology.SkeletonTree, ij.process.ImageProcessor, ij.process.ImageProcessor)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.getNeuritePathTrees(ij.process.ImageProcessor, ij.process.ImageProcessor, ij.process.ImageProcessor, java.util.Vector)
            <-- de.unihalle.informatik.MiToBo.morphology.ComponentPostprocess.EraseSmallComponents(ij.process.ImageProcessor, int)
            <-- de.unihalle.informatik.MiToBo.morphology.ComponentPostprocess.LinkAdjacentComponents(ij.process.ImageProcessor, double)
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.buildTree()
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.expandPath(de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData, int, int)
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.getAllPathPixels(java.util.Vector)
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.getFirstPixels(java.util.Vector, int, int)
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.getLongestPath(java.util.Vector)
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.rearrange(int)
        y *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.saveProfileData(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcLongestPathProfiles(ij.ImagePlus, ij.ImagePlus, ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcProfile(de.unihalle.informatik.MiToBo.datatypes.Region2D, de.unihalle.informatik.MiToBo.morphology.SkeletonTree, ij.process.ImageProcessor, ij.process.ImageProcessor)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.getNeuritePathTrees(ij.process.ImageProcessor, ij.process.ImageProcessor, ij.process.ImageProcessor, java.util.Vector)
            <-- de.unihalle.informatik.MiToBo.morphology.ComponentPostprocess.EraseSmallComponents(ij.process.ImageProcessor, int)
            <-- de.unihalle.informatik.MiToBo.morphology.ComponentPostprocess.LinkAdjacentComponents(ij.process.ImageProcessor, double)
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.buildTree()
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.expandPath(de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData, int, int)
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.getAllPathPixels(java.util.Vector)
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.getFirstPixels(java.util.Vector, int, int)
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.getLongestPath(java.util.Vector)
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.rearrange(int)
java.io *
    BufferedReader *
        BufferedReader(java.io.Reader) *
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.meta.CvsInfo.getCvsTag(java.lang.String)
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.execute()
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.readDependencyLogfile()
            <-- de.unihalle.informatik.MiToBo_admin.ant.GetLastCvsTag.execute()
            <-- de.unihalle.informatik.MiToBo_admin.ant.MakePluginConfig.execute()
            <-- mtb_neurites.Neurit_Detector_2D.process()
        close() *
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(java.lang.String)
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.execute()
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.readDependencyLogfile()
            <-- de.unihalle.informatik.MiToBo_admin.ant.GetLastCvsTag.execute()
            <-- de.unihalle.informatik.MiToBo_admin.ant.MakePluginConfig.execute()
        readLine() *
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.meta.CvsInfo.getCvsTag(java.lang.String)
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.execute()
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.readDependencyLogfile()
            <-- de.unihalle.informatik.MiToBo_admin.ant.GetLastCvsTag.execute()
            <-- de.unihalle.informatik.MiToBo_admin.ant.MakePluginConfig.execute()
            <-- mtb_neurites.Neurit_Detector_2D.process()
    BufferedWriter *
        BufferedWriter(java.io.Writer) *
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.save(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.regionToFile(de.unihalle.informatik.MiToBo.datatypes.Region3D, java.lang.String)
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.execute()
            <-- de.unihalle.informatik.MiToBo_admin.ant.MakePluginConfig.execute()
            <-- mtb_fields.Create_GVF.writeUV(double[], double[], int, int)
        close() *
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.save(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.regionToFile(de.unihalle.informatik.MiToBo.datatypes.Region3D, java.lang.String)
            <-- mtb_fields.Create_GVF.writeUV(double[], double[], int, int)
        newLine() *
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.save(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.regionToFile(de.unihalle.informatik.MiToBo.datatypes.Region3D, java.lang.String)
        write(java.lang.String) *
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.save(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.regionToFile(de.unihalle.informatik.MiToBo.datatypes.Region3D, java.lang.String)
            <-- mtb_fields.Create_GVF.writeUV(double[], double[], int, int)
    File *
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel$ResultTabFileFilter.accept(java.io.File)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.GranuleDetectorGUI$GranuleTableModel(de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI, int, int)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.lastDir
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.saveTable()
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.actionPerformed(java.awt.event.ActionEvent)
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.input
        <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(java.lang.String)
        <-- de.unihalle.informatik.MiToBo.datatypes.Region2D.toMTBImageByte(java.lang.String, int, int)
        <-- de.unihalle.informatik.MiToBo.datatypes.Snake.toMTBImage(java.lang.String, int, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.datatypes.Snake.toMTBImageByte(java.lang.String, int, int)
        <-- de.unihalle.informatik.MiToBo.io.files.ImageFilter.accept(java.io.File)
        <-- de.unihalle.informatik.MiToBo.io.files.ImageFilter.acceptStacks(java.io.File)
        <-- de.unihalle.informatik.MiToBo.io.files.ImageFilter.getExtension(java.io.File)
        <-- de.unihalle.informatik.MiToBo.io.files.ImageFilter.getName(java.io.File)
        <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.ImgOpen()
        <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.ImgOpen(java.io.File)
        <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.ImgOpen(java.lang.String, java.lang.String)
        <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.examine()
        <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.inputFile
        <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.open()
        <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.open(int[])
        <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.setFile(java.io.File)
        <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.setFile(java.lang.String, java.lang.String)
        <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.io.File, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.io.File, ij.ImagePlus)
        <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.lang.String, java.lang.String, ij.ImagePlus)
        <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.lang.String, java.lang.String, java.lang.String, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.file
        <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.getPath()
        <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.saveFile(boolean)
        <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.setFile(java.lang.String, java.lang.String)
        <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.setPath(java.io.File)
        <-- de.unihalle.informatik.MiToBo.meta.xml.MTBxmlIO.readFromFile(java.lang.String)
        <-- de.unihalle.informatik.MiToBo.meta.xml.MTBxmlIO.saveToFile(org.w3c.dom.Document, java.lang.String)
        <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.execute()
        <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.readDependencyLogfile()
        <-- de.unihalle.informatik.MiToBo_admin.ant.GetLastCvsTag.execute()
        <-- de.unihalle.informatik.MiToBo_admin.ant.MakePluginConfig.execute()
        <-- mtb_fields.Create_GVF.writeUV(double[], double[], int, int)
        <-- mtb_io.Open_Image.inputFile
        <-- mtb_io.Open_Image.open()
        <-- mtb_io.Save_Image.inputFile
        <-- mtb_io.Save_Image.save()
        <-- mtb_neurites.Neurit_Detector_2D.createResultDir(java.lang.String)
        <-- mtb_neurites.Neurit_Detector_2D.paramfile
        <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
        <-- mtb_neurites.Neurit_Detector_2D.process()
        File(java.lang.String) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.GranuleDetectorGUI$GranuleTableModel(de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI, int, int)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.saveTable()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.datatypes.Region2D.toMTBImageByte(java.lang.String, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.Snake.toMTBImage(java.lang.String, int, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.datatypes.Snake.toMTBImageByte(java.lang.String, int, int)
            <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTree.initFromDirectory()
            <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTree.traverseSubdir(java.lang.String, java.lang.String)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.ImgOpen(java.lang.String, java.lang.String)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.deleteBorder(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.setFile(java.lang.String, java.lang.String)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.lang.String, java.lang.String, ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.lang.String, java.lang.String, java.lang.String, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.saveFile(boolean)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.setFile(java.lang.String, java.lang.String)
            <-- de.unihalle.informatik.MiToBo.meta.xml.MTBxmlIO.readFromFile(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.meta.xml.MTBxmlIO.saveToFile(org.w3c.dom.Document, java.lang.String)
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.execute()
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.readDependencyLogfile()
            <-- de.unihalle.informatik.MiToBo_admin.ant.GetLastCvsTag.execute()
            <-- de.unihalle.informatik.MiToBo_admin.ant.MakePluginConfig.execute()
            <-- mtb_fields.Create_GVF.writeUV(double[], double[], int, int)
            <-- mtb_neurites.Neurit_Detector_2D.createResultDir(java.lang.String)
            <-- mtb_neurites.Neurit_Detector_2D.process()
            <-- mtb_neurites.Neurit_Detector_2D.setResultDirs()
        File(java.lang.String, java.lang.String) *
            <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
        exists() *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.saveFile(boolean)
            <-- mtb_io.Save_Image.save()
            <-- mtb_neurites.Neurit_Detector_2D.createResultDir(java.lang.String)
        getName() *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel$ResultTabFileFilter.accept(java.io.File)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
            <-- de.unihalle.informatik.MiToBo.io.files.ImageFilter.getExtension(java.io.File)
            <-- de.unihalle.informatik.MiToBo.io.files.ImageFilter.getName(java.io.File)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.deleteBorder(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.examine()
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.open()
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.open(int[])
            <-- mtb_neurites.Neurit_Detector_2D.process()
        getParent() *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.saveFile(boolean)
            <-- mtb_neurites.Neurit_Detector_2D.createResultDir(java.lang.String)
        getPath() *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.saveTable()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.actionPerformed(java.awt.event.ActionEvent)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
        isDirectory() *
            <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTree.initFromDirectory()
            <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTree.traverseSubdir(java.lang.String, java.lang.String)
            <-- de.unihalle.informatik.MiToBo.io.files.ImageFilter.accept(java.io.File)
            <-- de.unihalle.informatik.MiToBo.io.files.ImageFilter.acceptStacks(java.io.File)
            <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
        isFile() *
            <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
        list() *
            <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTree.initFromDirectory()
            <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTree.traverseSubdir(java.lang.String, java.lang.String)
            <-- mtb_neurites.Neurit_Detector_2D.process()
        mkdir() *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
            <-- mtb_neurites.Neurit_Detector_2D.createResultDir(java.lang.String)
        mkdirs() *
            <-- mtb_neurites.Neurit_Detector_2D.setResultDirs()
        separator *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.ImgOpen(java.lang.String, java.lang.String)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.setFile(java.lang.String, java.lang.String)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.lang.String, java.lang.String, ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.lang.String, java.lang.String, java.lang.String, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.saveFile(boolean)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.setFile(java.lang.String, java.lang.String)
            <-- mtb_neurites.Neurit_Detector_2D.createResultDir(java.lang.String)
            <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
            <-- mtb_neurites.Neurit_Detector_2D.process()
        toString() *
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.examine()
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.open()
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.open(int[])
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.saveFile(boolean)
            <-- mtb_io.Open_Image.open()
            <-- mtb_io.Save_Image.save()
            <-- mtb_neurites.Neurit_Detector_2D.createResultDir(java.lang.String)
            <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
    FileNotFoundException *
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.saveProfileData(java.lang.String)
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.saveProfileList(java.util.LinkedList, java.lang.String)
        <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.save(java.lang.String)
        <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.regionToFile(de.unihalle.informatik.MiToBo.datatypes.Region3D, java.lang.String)
    FileOutputStream *
        FileOutputStream(java.io.File) *
            <-- de.unihalle.informatik.MiToBo.meta.xml.MTBxmlIO.saveToFile(org.w3c.dom.Document, java.lang.String)
    FileReader *
        FileReader(java.io.File) *
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(java.lang.String)
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.execute()
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.readDependencyLogfile()
            <-- de.unihalle.informatik.MiToBo_admin.ant.GetLastCvsTag.execute()
            <-- de.unihalle.informatik.MiToBo_admin.ant.MakePluginConfig.execute()
            <-- mtb_neurites.Neurit_Detector_2D.process()
    FileWriter *
        FileWriter(java.io.File) *
            <-- mtb_fields.Create_GVF.writeUV(double[], double[], int, int)
        FileWriter(java.lang.String) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.saveTable()
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.save(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.regionToFile(de.unihalle.informatik.MiToBo.datatypes.Region3D, java.lang.String)
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.execute()
            <-- de.unihalle.informatik.MiToBo_admin.ant.MakePluginConfig.execute()
        close() *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.saveTable()
        write(java.lang.String) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.saveTable()
    IOException *
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.saveTable()
        <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(java.lang.String)
        <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.save(java.lang.String)
        <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.regionToFile(de.unihalle.informatik.MiToBo.datatypes.Region3D, java.lang.String)
        <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.examine()
        <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.open()
        <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.open(int[])
        <-- de.unihalle.informatik.MiToBo.meta.xml.MTBxmlIO.saveToFile(org.w3c.dom.Document, java.lang.String)
        <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.execute()
        <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.readDependencyLogfile()
        <-- de.unihalle.informatik.MiToBo_admin.ant.GetLastCvsTag.execute()
        <-- de.unihalle.informatik.MiToBo_admin.ant.MakePluginConfig.execute()
        <-- mtb_fields.Create_GVF.writeUV(double[], double[], int, int)
        <-- mtb_neurites.Neurit_Detector_2D.process()
        getMessage() *
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.examine()
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.open()
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.open(int[])
        printStackTrace() *
            <-- de.unihalle.informatik.MiToBo.meta.xml.MTBxmlIO.saveToFile(org.w3c.dom.Document, java.lang.String)
    InputStream *
        <-- de.unihalle.informatik.MiToBo.meta.CvsInfo.getCvsTag(java.lang.String)
        <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.execute()
        read() *
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.execute()
    InputStreamReader *
        InputStreamReader(java.io.InputStream) *
            <-- de.unihalle.informatik.MiToBo.meta.CvsInfo.getCvsTag(java.lang.String)
    OutputStream *
        <-- de.unihalle.informatik.MiToBo.meta.xml.MTBxmlIO.saveToFile(org.w3c.dom.Document, java.lang.String)
    PrintStream *
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.applyToImageBatch(java.lang.String)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.saveTable()
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.actionPerformed(java.awt.event.ActionEvent)
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.saveProfileData(java.lang.String)
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.saveProfileList(java.util.LinkedList, java.lang.String)
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcLongestPathProfiles(ij.ImagePlus, ij.ImagePlus, ij.ImagePlus)
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcProfile(de.unihalle.informatik.MiToBo.datatypes.Region2D, de.unihalle.informatik.MiToBo.morphology.SkeletonTree, ij.process.ImageProcessor, ij.process.ImageProcessor)
        <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
        <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(java.lang.String)
        <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.binning(int)
        <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.save(java.lang.String)
        <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.Image3D(java.lang.String)
        <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.Image3DToStack()
        <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.setVoxels(int[])
        <-- de.unihalle.informatik.MiToBo.datatypes.TreeNode.printData()
        <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTree.initFromDirectory()
        <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTreeNodeData.printData()
        <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.deleteBorder(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
        <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.examine()
        <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.open()
        <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.open(int[])
        <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.saveFile(boolean)
        <-- de.unihalle.informatik.MiToBo.meta.CvsInfo.getCvsTag(java.lang.String)
        <-- de.unihalle.informatik.MiToBo.meta.MTBMetaData.MTBMetaData()
        <-- de.unihalle.informatik.MiToBo.meta.MTBOpBasePlugin.run(ij.process.ImageProcessor)
        <-- de.unihalle.informatik.MiToBo.meta.xml.MTBxmlIO.saveToFile(org.w3c.dom.Document, java.lang.String)
        <-- de.unihalle.informatik.MiToBo.morphology.Morphology3D.dilate(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.morphology.StructuringElement)
        <-- de.unihalle.informatik.MiToBo.morphology.Morphology3D.erode(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.morphology.StructuringElement)
        <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.getPoints()
        <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.solve()
        <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.execute()
        <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.getDependencies(java.lang.String)
        <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepListTest.testGetAllRequiredClasses()
        <-- de.unihalle.informatik.MiToBo_admin.ant.GetLastCvsTag.execute()
        <-- de.unihalle.informatik.MiToBo_admin.ant.MakePluginConfig.execute()
        <-- mtb_enhance.Correct_Gamma.run(ij.process.ImageProcessor)
        <-- mtb_fields.Create_GVF.BoundEnsure(double[], int, int)
        <-- mtb_fields.Create_GVF.printArray(double[], int, int)
        <-- mtb_fields.Create_GVF.run(ij.process.ImageProcessor)
        <-- mtb_fields.Create_GVF.writeUV(double[], double[], int, int)
        <-- mtb_io.Open_Image.actionPerformed(java.awt.event.ActionEvent)
        <-- mtb_io.Open_Image.open()
        <-- mtb_io.Save_Image.save()
        <-- mtb_morphology.Morph_3D.run(java.lang.String)
        <-- mtb_neurites.Neurit_Detector_2D.activeContours(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, java.util.Vector, int, double)
        <-- mtb_neurites.Neurit_Detector_2D.createResultDir(java.lang.String)
        <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
        <-- mtb_neurites.Neurit_Detector_2D.process()
        <-- mtb_neurites.Neurit_Detector_2D.run(java.lang.String)
        <-- mtb_regions.Segment_No_Edges3D.run(ij.process.ImageProcessor)
        <-- mtb_regions.Segment_No_Edges3D.setup(java.lang.String, ij.ImagePlus)
        PrintStream(java.lang.String) *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.saveProfileData(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.saveProfileList(java.util.LinkedList, java.lang.String)
        close() *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.saveProfileData(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.saveProfileList(java.util.LinkedList, java.lang.String)
        print(double) *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.saveProfileList(java.util.LinkedList, java.lang.String)
        print(java.lang.String) *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.saveProfileList(java.util.LinkedList, java.lang.String)
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.execute()
            <-- mtb_fields.Create_GVF.printArray(double[], int, int)
        println() *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.saveProfileList(java.util.LinkedList, java.lang.String)
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.solve()
            <-- mtb_fields.Create_GVF.printArray(double[], int, int)
            <-- mtb_fields.Create_GVF.writeUV(double[], double[], int, int)
        println(double) *
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.binning(int)
        println(int) *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
        println(java.lang.Object) *
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.save(java.lang.String)
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepListTest.testGetAllRequiredClasses()
        println(java.lang.String) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.applyToImageBatch(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.saveTable()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.actionPerformed(java.awt.event.ActionEvent)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.saveProfileData(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.saveProfileList(java.util.LinkedList, java.lang.String)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcLongestPathProfiles(ij.ImagePlus, ij.ImagePlus, ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcProfile(de.unihalle.informatik.MiToBo.datatypes.Region2D, de.unihalle.informatik.MiToBo.morphology.SkeletonTree, ij.process.ImageProcessor, ij.process.ImageProcessor)
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.Image3D(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.Image3DToStack()
            <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.setVoxels(int[])
            <-- de.unihalle.informatik.MiToBo.datatypes.TreeNode.printData()
            <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTree.initFromDirectory()
            <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTreeNodeData.printData()
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.deleteBorder(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.examine()
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.open()
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.open(int[])
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.saveFile(boolean)
            <-- de.unihalle.informatik.MiToBo.meta.CvsInfo.getCvsTag(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.meta.MTBMetaData.MTBMetaData()
            <-- de.unihalle.informatik.MiToBo.meta.MTBOpBasePlugin.run(ij.process.ImageProcessor)
            <-- de.unihalle.informatik.MiToBo.meta.xml.MTBxmlIO.saveToFile(org.w3c.dom.Document, java.lang.String)
            <-- de.unihalle.informatik.MiToBo.morphology.Morphology3D.dilate(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.morphology.StructuringElement)
            <-- de.unihalle.informatik.MiToBo.morphology.Morphology3D.erode(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.morphology.StructuringElement)
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.getPoints()
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.solve()
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.execute()
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.getDependencies(java.lang.String)
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepListTest.testGetAllRequiredClasses()
            <-- de.unihalle.informatik.MiToBo_admin.ant.GetLastCvsTag.execute()
            <-- de.unihalle.informatik.MiToBo_admin.ant.MakePluginConfig.execute()
            <-- mtb_enhance.Correct_Gamma.run(ij.process.ImageProcessor)
            <-- mtb_fields.Create_GVF.BoundEnsure(double[], int, int)
            <-- mtb_fields.Create_GVF.printArray(double[], int, int)
            <-- mtb_fields.Create_GVF.run(ij.process.ImageProcessor)
            <-- mtb_fields.Create_GVF.writeUV(double[], double[], int, int)
            <-- mtb_io.Open_Image.actionPerformed(java.awt.event.ActionEvent)
            <-- mtb_io.Open_Image.open()
            <-- mtb_io.Save_Image.save()
            <-- mtb_morphology.Morph_3D.run(java.lang.String)
            <-- mtb_neurites.Neurit_Detector_2D.activeContours(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, java.util.Vector, int, double)
            <-- mtb_neurites.Neurit_Detector_2D.createResultDir(java.lang.String)
            <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
            <-- mtb_neurites.Neurit_Detector_2D.process()
            <-- mtb_neurites.Neurit_Detector_2D.run(java.lang.String)
            <-- mtb_regions.Segment_No_Edges3D.run(ij.process.ImageProcessor)
            <-- mtb_regions.Segment_No_Edges3D.setup(java.lang.String, ij.ImagePlus)
    Reader *
        <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(java.lang.String)
        <-- de.unihalle.informatik.MiToBo.meta.CvsInfo.getCvsTag(java.lang.String)
        <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.execute()
        <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.readDependencyLogfile()
        <-- de.unihalle.informatik.MiToBo_admin.ant.GetLastCvsTag.execute()
        <-- de.unihalle.informatik.MiToBo_admin.ant.MakePluginConfig.execute()
        <-- mtb_neurites.Neurit_Detector_2D.process()
    Writer *
        <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.save(java.lang.String)
        <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.regionToFile(de.unihalle.informatik.MiToBo.datatypes.Region3D, java.lang.String)
        <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.execute()
        <-- de.unihalle.informatik.MiToBo_admin.ant.MakePluginConfig.execute()
        <-- mtb_fields.Create_GVF.writeUV(double[], double[], int, int)
        close() *
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.execute()
            <-- de.unihalle.informatik.MiToBo_admin.ant.MakePluginConfig.execute()
        write(java.lang.String) *
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.execute()
            <-- de.unihalle.informatik.MiToBo_admin.ant.MakePluginConfig.execute()
java.lang *
    ArrayIndexOutOfBoundsException *
        <-- mtb_fields.Create_GVF.writeUV(double[], double[], int, int)
    Boolean *
        <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.RankOperatorParams(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, int)
        <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.RankOperatorParams(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, int, boolean, boolean, boolean, boolean, boolean)
        <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.RankOperatorParams(de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, int)
        <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.RankOperatorParams(de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, int, boolean, boolean, boolean, boolean, boolean)
        <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.getUseDimCFlag()
        <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.getUseDimTFlag()
        <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.getUseDimXFlag()
        <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.getUseDimYFlag()
        <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.getUseDimZFlag()
        <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3DParams.LabelComponentsSequential3DParams(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, boolean)
        <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3DParams.LabelComponentsSequential3DParams(de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, boolean)
        <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3DParams.getDiagonalNeighborsFlag()
        booleanValue() *
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.getUseDimCFlag()
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.getUseDimTFlag()
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.getUseDimXFlag()
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.getUseDimYFlag()
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.getUseDimZFlag()
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3DParams.getDiagonalNeighborsFlag()
        valueOf(boolean) *
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.RankOperatorParams(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, int)
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.RankOperatorParams(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, int, boolean, boolean, boolean, boolean, boolean)
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.RankOperatorParams(de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, int)
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.RankOperatorParams(de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, int, boolean, boolean, boolean, boolean, boolean)
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3DParams.LabelComponentsSequential3DParams(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, boolean)
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3DParams.LabelComponentsSequential3DParams(de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, boolean)
    CharSequence *
        <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.execute()
        <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.getAllRequiredClasses(java.util.LinkedList, boolean)
        <-- de.unihalle.informatik.MiToBo_admin.ant.GetLastCvsTag.execute()
    Character *
        isLetter(char) *
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.execute()
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.getAllRequiredClasses(java.util.LinkedList, boolean)
        isLowerCase(char) *
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.getAllRequiredClasses(java.util.LinkedList, boolean)
        isWhitespace(char) *
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.execute()
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.getAllRequiredClasses(java.util.LinkedList, boolean)
    Class *
        <-- de.unihalle.informatik.MiToBo.apps.cells2D.CellSegmentAlgos.voronoiTesselation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$Subroutine.valueOf(java.lang.String)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.detectGranules_old(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.detectNuclei(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.meta.MTBOpParams.logToMetaDataObj_start(de.unihalle.informatik.MiToBo.meta.MTBOpBase)
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$Mode.valueOf(java.lang.String)
        <-- de.unihalle.informatik.MiToBo_admin.test.MiToBoAdminTests.suite()
        <-- mtb_enhance.Histogram_Equalize.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        <-- mtb_granules.Cell_Segment_2D.run(ij.process.ImageProcessor)
        <-- mtb_morphology.CalcOtsuThreshold_Image.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        <-- mtb_morphology.Dilate_Image.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        <-- mtb_morphology.Erode_Image.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        <-- mtb_morphology.Threshold_Image_Niblack.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
        <-- mtb_neurites.Neurit_Detector_2D.removeCellBody(de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        getName() *
            <-- de.unihalle.informatik.MiToBo.meta.MTBOpParams.logToMetaDataObj_start(de.unihalle.informatik.MiToBo.meta.MTBOpBase)
        getResourceAsStream(java.lang.String) *
            <-- de.unihalle.informatik.MiToBo.meta.CvsInfo.getCvsTag(java.lang.String)
    Cloneable *
        <-- de.unihalle.informatik.MiToBo.meta.MTBMetaData
    Double *
        <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(java.lang.String)
        <-- de.unihalle.informatik.MiToBo.morphology.HDomeTransform3DParams.HDomeTransform3DParams(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double)
        <-- de.unihalle.informatik.MiToBo.morphology.HDomeTransform3DParams.HDomeTransform3DParams(de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double)
        <-- de.unihalle.informatik.MiToBo.morphology.HDomeTransform3DParams.getH()
        <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.Resampler(Jama.Matrix, Jama.Matrix, double)
        <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.Resampler(java.util.Vector, double)
        <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.getPoints()
        <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.get_X_coords()
        <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.get_Y_coords()
        <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.rearrange(int)
        <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.resampling()
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu$OtsuParams.getOtsuThreshold()
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams.getEnhanceParamR()
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams.getScalingK()
        <-- mtb_demo.Demo_MTBOpBase_Plugin.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        <-- mtb_demo.Demo_MTBOpBase_Plugin.parameterDialog()
        <-- mtb_neurites.Neurit_Detector_2D.process()
        Double(double) *
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu$OtsuParams.setResultThresh(double)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams.ImgThreshNiblack$NiblackParams(de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$Mode, double, double, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams.ImgThreshNiblack$NiblackParams(de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack, de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$Mode, double, double, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        doubleValue() *
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.morphology.HDomeTransform3DParams.getH()
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.getPoints()
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.get_X_coords()
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.get_Y_coords()
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.rearrange(int)
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.resampling()
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu$OtsuParams.getOtsuThreshold()
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams.getEnhanceParamR()
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams.getScalingK()
            <-- mtb_demo.Demo_MTBOpBase_Plugin.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            <-- mtb_demo.Demo_MTBOpBase_Plugin.parameterDialog()
            <-- mtb_neurites.Neurit_Detector_2D.process()
        parseDouble(java.lang.String) *
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(java.lang.String)
        valueOf(double) *
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.morphology.HDomeTransform3DParams.HDomeTransform3DParams(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double)
            <-- de.unihalle.informatik.MiToBo.morphology.HDomeTransform3DParams.HDomeTransform3DParams(de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double)
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.Resampler(Jama.Matrix, Jama.Matrix, double)
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.Resampler(java.util.Vector, double)
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.rearrange(int)
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.resampling()
            <-- mtb_demo.Demo_MTBOpBase_Plugin.parameterDialog()
        valueOf(java.lang.String) *
            <-- mtb_neurites.Neurit_Detector_2D.process()
    Enum *
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$Subroutine
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$Subroutine.valueOf(java.lang.String)
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$Mode
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$Mode.valueOf(java.lang.String)
        Enum(java.lang.String, int) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$Subroutine.GranuleDetectorAlgos$Subroutine(java.lang.String, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$Mode.ImgThreshNiblack$Mode(java.lang.String, int)
        valueOf(java.lang.Class, java.lang.String) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$Subroutine.valueOf(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$Mode.valueOf(java.lang.String)
    Exception *
        <-- de.unihalle.informatik.MiToBo.meta.CvsInfo.getCvsTag(java.lang.String)
        <-- de.unihalle.informatik.MiToBo.meta.xml.MTBxmlIO.readFromFile(java.lang.String)
    IllegalArgumentException *
        <-- de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.distCityBlock(de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector, de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector)
        <-- de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.distEuklid(de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector, de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector)
        <-- de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.distEuklidSquared(de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector, de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.createMTBImage(ij.ImagePlus)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.createMTBImage(int, int, int, int, int, int)
        <-- mtb_demo.Demo_MTBOpBase_Plugin.setup(java.lang.String, ij.ImagePlus)
        <-- mtb_filters.Rank_Operator.setup(java.lang.String, ij.ImagePlus)
        <-- mtb_morphology.HDomeTransform_3D.setup(java.lang.String, ij.ImagePlus)
        <-- mtb_regions.Label_Components_Sequential_3D.setup(java.lang.String, ij.ImagePlus)
        <-- mtb_regions.Segment_No_Edges3D.setup(java.lang.String, ij.ImagePlus)
        IllegalArgumentException(java.lang.String) *
            <-- de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.distCityBlock(de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector, de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector)
            <-- de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.distEuklid(de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector, de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector)
            <-- de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.distEuklidSquared(de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector, de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.createMTBImage(ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.createMTBImage(int, int, int, int, int, int)
        getMessage() *
            <-- mtb_regions.Segment_No_Edges3D.setup(java.lang.String, ij.ImagePlus)
    IndexOutOfBoundsException *
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.incrPositionC()
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.incrPositionC(int)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.incrPositionT()
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.incrPositionT(int)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.incrPositionX()
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.incrPositionX(int)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.incrPositionY()
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.incrPositionY(int)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.incrPositionZ()
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.incrPositionZ(int)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.setPositionC(int)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.setPositionT(int)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.setPositionX(int)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.setPositionY(int)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.setPositionZ(int)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.setWindowPosition(int, int, int, int, int)
        IndexOutOfBoundsException(java.lang.String) *
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.incrPositionC()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.incrPositionC(int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.incrPositionT()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.incrPositionT(int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.incrPositionX()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.incrPositionX(int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.incrPositionY()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.incrPositionY(int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.incrPositionZ()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.incrPositionZ(int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.setPositionC(int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.setPositionT(int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.setPositionX(int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.setPositionY(int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.setPositionZ(int)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.setWindowPosition(int, int, int, int, int)
    Integer *
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.tableToString()
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.getMinimumGranuleSize()
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.resetSettings()
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcProfile(de.unihalle.informatik.MiToBo.datatypes.Region2D, de.unihalle.informatik.MiToBo.morphology.SkeletonTree, ij.process.ImageProcessor, ij.process.ImageProcessor)
        <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.RankOperatorParams(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, int)
        <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.RankOperatorParams(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, int, boolean, boolean, boolean, boolean, boolean)
        <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.RankOperatorParams(de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, int)
        <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.RankOperatorParams(de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, int, boolean, boolean, boolean, boolean, boolean)
        <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.getMaskRadius()
        <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.getMode()
        <-- de.unihalle.informatik.MiToBo.morphology.ImgDilate$ImgDilateParams.getMasksize()
        <-- de.unihalle.informatik.MiToBo.morphology.ImgErode$ImgErodeParams.ImgErode$ImgErodeParams(de.unihalle.informatik.MiToBo.morphology.ImgErode, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
        <-- de.unihalle.informatik.MiToBo.morphology.ImgErode$ImgErodeParams.ImgErode$ImgErodeParams(de.unihalle.informatik.MiToBo.morphology.ImgErode, de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
        <-- de.unihalle.informatik.MiToBo.morphology.ImgErode$ImgErodeParams.getMasksize()
        <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential.regionSegmentation(ij.process.ImageProcessor, boolean)
        <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3D.regionSegmentation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, boolean, int, int)
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams.getSlidingWindowSize()
        <-- mtb_neurites.Neurit_Detector_2D.process()
        Integer(int) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.morphology.ImgDilate$ImgDilateParams.ImgDilate$ImgDilateParams(de.unihalle.informatik.MiToBo.morphology.ImgDilate, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            <-- de.unihalle.informatik.MiToBo.morphology.ImgDilate$ImgDilateParams.ImgDilate$ImgDilateParams(de.unihalle.informatik.MiToBo.morphology.ImgDilate, de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams.ImgThreshNiblack$NiblackParams(de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$Mode, double, double, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams.ImgThreshNiblack$NiblackParams(de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack, de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$Mode, double, double, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.getAllRequiredClasses(java.util.LinkedList, boolean)
        intValue() *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.tableToString()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.getMinimumGranuleSize()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcProfile(de.unihalle.informatik.MiToBo.datatypes.Region2D, de.unihalle.informatik.MiToBo.morphology.SkeletonTree, ij.process.ImageProcessor, ij.process.ImageProcessor)
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.getMaskRadius()
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.getMode()
            <-- de.unihalle.informatik.MiToBo.morphology.ImgDilate$ImgDilateParams.getMasksize()
            <-- de.unihalle.informatik.MiToBo.morphology.ImgErode$ImgErodeParams.getMasksize()
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential.regionSegmentation(ij.process.ImageProcessor, boolean)
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3D.regionSegmentation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, boolean, int, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams.getSlidingWindowSize()
            <-- mtb_neurites.Neurit_Detector_2D.process()
        parseInt(java.lang.String) *
            <-- mtb_enhance.Correct_Gamma.run(ij.process.ImageProcessor)
        toString(int) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.tableToString()
            <-- mtb_enhance.Correct_Gamma.run(ij.process.ImageProcessor)
        valueOf(int) *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.resetSettings()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcProfile(de.unihalle.informatik.MiToBo.datatypes.Region2D, de.unihalle.informatik.MiToBo.morphology.SkeletonTree, ij.process.ImageProcessor, ij.process.ImageProcessor)
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.RankOperatorParams(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, int)
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.RankOperatorParams(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, int, boolean, boolean, boolean, boolean, boolean)
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.RankOperatorParams(de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, int)
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.RankOperatorParams(de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, int, boolean, boolean, boolean, boolean, boolean)
            <-- de.unihalle.informatik.MiToBo.morphology.ImgErode$ImgErodeParams.ImgErode$ImgErodeParams(de.unihalle.informatik.MiToBo.morphology.ImgErode, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            <-- de.unihalle.informatik.MiToBo.morphology.ImgErode$ImgErodeParams.ImgErode$ImgErodeParams(de.unihalle.informatik.MiToBo.morphology.ImgErode, de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential.regionSegmentation(ij.process.ImageProcessor, boolean)
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3D.regionSegmentation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, boolean, int, int)
        valueOf(java.lang.String) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.getMinimumGranuleSize()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
            <-- mtb_neurites.Neurit_Detector_2D.process()
    Math *
        abs(double) *
            <-- de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.distCityBlock(de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector, de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.applyNiblackThreshold_withLocalVarCheck(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, double, double, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        floor(double) *
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.deleteBorder(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
        log(double) *
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.logarithmize()
        pow(double, double) *
            <-- de.unihalle.informatik.MiToBo.enhance.GammaCorrection.correctGamma(ij.process.ImageProcessor, double, int)
            <-- de.unihalle.informatik.MiToBo.enhance.GammaCorrection3D.correctGamma(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.resampling()
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.standardization(java.awt.geom.Point2D$Double)
            <-- mtb_fields.Create_GVF.GVF_field(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            <-- mtb_fields.Create_GVF.GradAbs(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        round(double) *
            <-- de.unihalle.informatik.MiToBo.apps.cells2D.CellSegmentAlgos.voronoiTesselation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.datatypes.Region2D.toMTBImageByte(java.lang.String, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.Snake.getSnakePolygon()
            <-- de.unihalle.informatik.MiToBo.datatypes.Snake.toMTBImage(java.lang.String, int, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.datatypes.Snake.toMTBImageByte(java.lang.String, int, int)
            <-- de.unihalle.informatik.MiToBo.enhance.GammaCorrection.correctGamma(ij.process.ImageProcessor, double, int)
            <-- mtb_morphology.Threshold_Image.dialogItemChanged(ij.gui.GenericDialog, java.awt.AWTEvent)
            <-- mtb_neurites.Neurit_Detector_2D.drawSnakeRegion(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.Region2D)
            <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
            <-- mtb_regions.Label_Components_Recursive.run(ij.process.ImageProcessor)
            <-- mtb_regions.Label_Components_Sequential.run(ij.process.ImageProcessor)
            <-- mtb_regions.Label_Components_Sequential_3D.run(ij.process.ImageProcessor)
        sqrt(double) *
            <-- de.unihalle.informatik.MiToBo.datatypes.Point3D.distance(de.unihalle.informatik.MiToBo.datatypes.Point3D)
            <-- de.unihalle.informatik.MiToBo.datatypes.Point3D.distance(double, double, double)
            <-- de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.distEuklid(de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector, de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector)
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.resampling()
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.standardization(java.awt.geom.Point2D$Double)
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.NoEdgesSolver3D(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double, double, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.NoEdgesSolver3D(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double, double, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshMoments.calcThreshold(de.unihalle.informatik.MiToBo.datatypes.Histogram)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.applyNiblackThreshold(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, double, double, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.applyNiblackThresholdWholeImage(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.applyNiblackThreshold_withLocalVarCheck(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, double, double, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            <-- mtb_fields.Create_GVF.GradAbs(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- mtb_fields.Create_GVF.run(ij.process.ImageProcessor)
    NoSuchFieldError *
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.$SWITCH_TABLE$de$unihalle$informatik$MiToBo$apps$granules2D$GranuleDetectorAlgos$Subroutine()
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.$SWITCH_TABLE$de$unihalle$informatik$MiToBo$segmentation$thresholds$ImgThreshNiblack$Mode()
    NumberFormatException *
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
    Object *
        <-- de.unihalle.informatik.MiToBo.apps.cells2D.CellSegmentAlgos.voronoiTesselation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$GranuleDetectorParams.GranuleDetectorAlgos$GranuleDetectorParams(de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$Subroutine)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$GranuleDetectorParams.GranuleDetectorAlgos$GranuleDetectorParams(de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos, de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$Subroutine)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$GranuleDetectorParams.getInputImage()
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$GranuleDetectorParams.getResultImage()
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$GranuleDetectorParams.getSubroutine()
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$GranuleDetectorParams.setResultImage(de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$Subroutine.values()
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.detectGranules_old(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.detectNuclei(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.detectPbodies(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.getMetaParams()
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.applyToImage()
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.applyToImageBatch(java.lang.String)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.GranuleDetectorGUI$GranuleTableModel(de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI, int, int)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.clear()
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.data
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.getValueAt(int, int)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.insertData(java.util.Vector)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.setValueAt(java.lang.Object, int, int)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.tableToString()
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.actionPerformed(java.awt.event.ActionEvent)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupResultTable()
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorMain
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.enableAll(boolean)
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.resetSettings()
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.showMessage(java.lang.String)
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.saveProfileData(java.lang.String)
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.saveProfileList(java.util.LinkedList, java.lang.String)
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcLongestPathProfiles(ij.ImagePlus, ij.ImagePlus, ij.ImagePlus)
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcProfile(de.unihalle.informatik.MiToBo.datatypes.Region2D, de.unihalle.informatik.MiToBo.morphology.SkeletonTree, ij.process.ImageProcessor, ij.process.ImageProcessor)
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.getNeuritePathTrees(ij.process.ImageProcessor, ij.process.ImageProcessor, ij.process.ImageProcessor, java.util.Vector)
        <-- de.unihalle.informatik.MiToBo.datatypes.Contour2D
        <-- de.unihalle.informatik.MiToBo.datatypes.Contour2D.addInner(de.unihalle.informatik.MiToBo.datatypes.Contour2D)
        <-- de.unihalle.informatik.MiToBo.datatypes.Contour2D.addPixel(int, int)
        <-- de.unihalle.informatik.MiToBo.datatypes.Contour2D.getInner(int)
        <-- de.unihalle.informatik.MiToBo.datatypes.Contour2D.getPointAt(int)
        <-- de.unihalle.informatik.MiToBo.datatypes.Histogram
        <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(java.lang.String)
        <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.save(java.lang.String)
        <-- de.unihalle.informatik.MiToBo.datatypes.Image3D
        <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.Image3D(de.unihalle.informatik.MiToBo.datatypes.Image3D)
        <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.Image3D(java.lang.String)
        <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.Image3DToStack()
        <-- de.unihalle.informatik.MiToBo.datatypes.LevelSet
        <-- de.unihalle.informatik.MiToBo.datatypes.Point3D
        <-- de.unihalle.informatik.MiToBo.datatypes.Region2D
        <-- de.unihalle.informatik.MiToBo.datatypes.Region2D.addPixel(int, int)
        <-- de.unihalle.informatik.MiToBo.datatypes.Region2D.toMTBImageByte(java.lang.String, int, int)
        <-- de.unihalle.informatik.MiToBo.datatypes.Region3D
        <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.addPoint(de.unihalle.informatik.MiToBo.datatypes.Point3D)
        <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.addPoint(double, double, double)
        <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.calcCentre(java.util.Vector)
        <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.getSizeX()
        <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.getSizeY()
        <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.getSizeZ()
        <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.regionToFile(de.unihalle.informatik.MiToBo.datatypes.Region3D, java.lang.String)
        <-- de.unihalle.informatik.MiToBo.datatypes.Snake
        <-- de.unihalle.informatik.MiToBo.datatypes.Snake.getSnakePolygon()
        <-- de.unihalle.informatik.MiToBo.datatypes.Snake.toMTBImage(java.lang.String, int, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.datatypes.Snake.toMTBImageByte(java.lang.String, int, int)
        <-- de.unihalle.informatik.MiToBo.datatypes.Tree
        <-- de.unihalle.informatik.MiToBo.datatypes.TreeNode
        <-- de.unihalle.informatik.MiToBo.datatypes.TreeNode.addChild(de.unihalle.informatik.MiToBo.datatypes.TreeNode)
        <-- de.unihalle.informatik.MiToBo.datatypes.TreeNode.printData()
        <-- de.unihalle.informatik.MiToBo.datatypes.TreeNodeData
        <-- de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.createMTBImage(ij.ImagePlus)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.show()
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.MTBImageByte(ij.ImagePlus)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.MTBImageByte(int, int, int, int, int)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.duplicate()
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.getImagePlus()
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.MTBImageFloat(ij.ImagePlus)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.MTBImageFloat(int, int, int, int, int)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.duplicate()
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.getImagePlus()
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.getImagePlusRGB()
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageManipulator
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.MTBImageShort(ij.ImagePlus)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.MTBImageShort(int, int, int, int, int)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow
        <-- de.unihalle.informatik.MiToBo.enhance.GammaCorrection
        <-- de.unihalle.informatik.MiToBo.enhance.GammaCorrection3D
        <-- de.unihalle.informatik.MiToBo.enhance.HistogramEqualization$HistoEquParams.HistogramEqualization$HistoEquParams(de.unihalle.informatik.MiToBo.enhance.HistogramEqualization, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.enhance.HistogramEqualization$HistoEquParams.HistogramEqualization$HistoEquParams(de.unihalle.informatik.MiToBo.enhance.HistogramEqualization, de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.enhance.HistogramEqualization$HistoEquParams.getInputImage()
        <-- de.unihalle.informatik.MiToBo.enhance.HistogramEqualization$HistoEquParams.getResultImage()
        <-- de.unihalle.informatik.MiToBo.enhance.HistogramEqualization$HistoEquParams.setResultImage(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.fields.gradient.ImgGradient
        <-- de.unihalle.informatik.MiToBo.fields.gvf.ImgGVF
        <-- de.unihalle.informatik.MiToBo.filters.linear.SymDerivationX
        <-- de.unihalle.informatik.MiToBo.filters.linear.SymDerivationY
        <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.addStatusListener(loci.formats.StatusListener)
        <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.fireStatusEvent(int, int, java.lang.String)
        <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.getMetaParams()
        <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.getStatusListeners()
        <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.removeStatusListener(loci.formats.StatusListener)
        <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.RankOperatorParams(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, int)
        <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.RankOperatorParams(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, int, boolean, boolean, boolean, boolean, boolean)
        <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.RankOperatorParams(de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, int)
        <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.RankOperatorParams(de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, int, boolean, boolean, boolean, boolean, boolean)
        <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.getInputImage()
        <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.getMaskRadius()
        <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.getMetaParams()
        <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.getMode()
        <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.getResultImage()
        <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.getUseDimCFlag()
        <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.getUseDimTFlag()
        <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.getUseDimXFlag()
        <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.getUseDimYFlag()
        <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.getUseDimZFlag()
        <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.setResultImage(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTree.getFileList()
        <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTree.initFromDirectory()
        <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTree.traverseSubdir(java.lang.String, java.lang.String)
        <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTreeNodeData.addFile(java.lang.String)
        <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTreeNodeData.getSubtreeFileList()
        <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTreeNodeData.printData()
        <-- de.unihalle.informatik.MiToBo.io.files.ImageFilter.accept(java.io.File)
        <-- de.unihalle.informatik.MiToBo.io.files.ImageFilter.acceptStacks(java.io.File)
        <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen
        <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.ImgOpen(java.lang.String, java.lang.String)
        <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.open(int[])
        <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.setFile(java.lang.String, java.lang.String)
        <-- de.unihalle.informatik.MiToBo.io.files.ImgSave
        <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.lang.String, java.lang.String, ij.ImagePlus)
        <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.lang.String, java.lang.String, java.lang.String, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.saveFile(boolean)
        <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.setFile(java.lang.String, java.lang.String)
        <-- de.unihalle.informatik.MiToBo.meta.CvsInfo
        <-- de.unihalle.informatik.MiToBo.meta.MTBMetaData
        <-- de.unihalle.informatik.MiToBo.meta.MTBMetaData.clone()
        <-- de.unihalle.informatik.MiToBo.meta.MTBOpBase
        <-- de.unihalle.informatik.MiToBo.meta.MTBOpBasePlugin.run(ij.process.ImageProcessor)
        <-- de.unihalle.informatik.MiToBo.meta.MTBOpParams
        <-- de.unihalle.informatik.MiToBo.meta.MTBOpParams.getParameter(java.lang.String)
        <-- de.unihalle.informatik.MiToBo.meta.MTBOpParams.logToMetaDataObj_start(de.unihalle.informatik.MiToBo.meta.MTBOpBase)
        <-- de.unihalle.informatik.MiToBo.meta.MTBOpParams.setParameter(java.lang.String, java.lang.Object)
        <-- de.unihalle.informatik.MiToBo.meta.xml.MTBxmlIO
        <-- de.unihalle.informatik.MiToBo.morphology.ComponentPostprocess
        <-- de.unihalle.informatik.MiToBo.morphology.ComponentPostprocess.EraseSmallComponents(ij.process.ImageProcessor, int)
        <-- de.unihalle.informatik.MiToBo.morphology.ComponentPostprocess.LinkAdjacentComponents(ij.process.ImageProcessor, double)
        <-- de.unihalle.informatik.MiToBo.morphology.HDomeTransform3D.getMetaParams()
        <-- de.unihalle.informatik.MiToBo.morphology.HDomeTransform3D.hybridGrayscaleReconstruct(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.morphology.HDomeTransform3DParams.HDomeTransform3DParams(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double)
        <-- de.unihalle.informatik.MiToBo.morphology.HDomeTransform3DParams.HDomeTransform3DParams(de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double)
        <-- de.unihalle.informatik.MiToBo.morphology.HDomeTransform3DParams.getH()
        <-- de.unihalle.informatik.MiToBo.morphology.HDomeTransform3DParams.getInputImage()
        <-- de.unihalle.informatik.MiToBo.morphology.HDomeTransform3DParams.getMetaParams()
        <-- de.unihalle.informatik.MiToBo.morphology.HDomeTransform3DParams.getResultImage()
        <-- de.unihalle.informatik.MiToBo.morphology.HDomeTransform3DParams.setResultImage(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.morphology.ImgDilate$ImgDilateParams.ImgDilate$ImgDilateParams(de.unihalle.informatik.MiToBo.morphology.ImgDilate, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
        <-- de.unihalle.informatik.MiToBo.morphology.ImgDilate$ImgDilateParams.ImgDilate$ImgDilateParams(de.unihalle.informatik.MiToBo.morphology.ImgDilate, de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
        <-- de.unihalle.informatik.MiToBo.morphology.ImgDilate$ImgDilateParams.getInputImage()
        <-- de.unihalle.informatik.MiToBo.morphology.ImgDilate$ImgDilateParams.getMasksize()
        <-- de.unihalle.informatik.MiToBo.morphology.ImgDilate$ImgDilateParams.getResultImage()
        <-- de.unihalle.informatik.MiToBo.morphology.ImgDilate$ImgDilateParams.setResultImage(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.morphology.ImgDilate.getMetaParams()
        <-- de.unihalle.informatik.MiToBo.morphology.ImgErode$ImgErodeParams.ImgErode$ImgErodeParams(de.unihalle.informatik.MiToBo.morphology.ImgErode, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
        <-- de.unihalle.informatik.MiToBo.morphology.ImgErode$ImgErodeParams.ImgErode$ImgErodeParams(de.unihalle.informatik.MiToBo.morphology.ImgErode, de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
        <-- de.unihalle.informatik.MiToBo.morphology.ImgErode$ImgErodeParams.getInputImage()
        <-- de.unihalle.informatik.MiToBo.morphology.ImgErode$ImgErodeParams.getMasksize()
        <-- de.unihalle.informatik.MiToBo.morphology.ImgErode$ImgErodeParams.getResultImage()
        <-- de.unihalle.informatik.MiToBo.morphology.ImgErode$ImgErodeParams.setResultImage(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.morphology.ImgErode.getMetaParams()
        <-- de.unihalle.informatik.MiToBo.morphology.Morphology3D
        <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.expandPath(de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData, int, int)
        <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.appendPoint(int, int)
        <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.getAllPathPixels(java.util.Vector)
        <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.getFirstPixels(java.util.Vector, int, int)
        <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.getLongestPath(java.util.Vector)
        <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.getMaxLength()
        <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.getSpinesAlongPath(java.util.Vector, int)
        <-- de.unihalle.informatik.MiToBo.morphology.StructuringElement
        <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler
        <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.Resampler(Jama.Matrix, Jama.Matrix, double)
        <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.Resampler(java.util.Vector, double)
        <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.getPoints()
        <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.get_X_coords()
        <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.get_Y_coords()
        <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.rearrange(int)
        <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.resampling()
        <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.SnakeAlgos
        <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.SnakeAlgos.addAllPoints()
        <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.SnakeAlgos.calcSnake(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double[], double[], int, double)
        <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.SnakeExternalEnergy
        <-- de.unihalle.informatik.MiToBo.segmentation.levelset.LevelSetSolver
        <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsRecursive
        <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsRecursive.regionSegmentation(ij.process.ImageProcessor)
        <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential
        <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential.regionSegmentation(ij.process.ImageProcessor, boolean)
        <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3D.getMetaParams()
        <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3D.regionSegmentation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, boolean, int, int)
        <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3DParams.LabelComponentsSequential3DParams(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, boolean)
        <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3DParams.LabelComponentsSequential3DParams(de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, boolean)
        <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3DParams.getDiagonalNeighborsFlag()
        <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3DParams.getInputImage()
        <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3DParams.getMetaParams()
        <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3DParams.getResultingRegions(int, int)
        <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3DParams.setResultingRegions(java.util.Vector, int, int)
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshMoments
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu$OtsuParams.CalcGlobalThreshOtsu$OtsuParams(de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu$OtsuParams.CalcGlobalThreshOtsu$OtsuParams(de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu, de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu$OtsuParams.getInputImage()
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu$OtsuParams.getOtsuThreshold()
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu$OtsuParams.setResultThresh(double)
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThresh
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThresh.applyThreshold(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThresh.applyThreshold(ij.process.ImageProcessor, int)
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$Mode.values()
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams.ImgThreshNiblack$NiblackParams(de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$Mode, double, double, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams.ImgThreshNiblack$NiblackParams(de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack, de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$Mode, double, double, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams.getEnhanceParamR()
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams.getInputImage()
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams.getMask()
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams.getMode()
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams.getResultImage()
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams.getScalingK()
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams.getSlidingWindowSize()
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams.setResultImage(de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.applyNiblackThresholdMaskwise(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, double, double, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.getMetaParams()
        <-- de.unihalle.informatik.MiToBo.statistics.RegionSetStatistics
        <-- de.unihalle.informatik.MiToBo.statistics.RegionSetStatistics.calcAverageSize(java.util.Vector)
        <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.execute()
        <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.extractClassSection(java.lang.String)
        <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.extractPackageSection(java.lang.String)
        <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.getAllRequiredClasses(java.util.LinkedList, boolean)
        <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.getDependencies(java.lang.String)
        <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.readDependencyLogfile()
        <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepListTest.testExtractClassSection()
        <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepListTest.testGetAllRequiredClasses()
        <-- de.unihalle.informatik.MiToBo_admin.ant.GetLastCvsTag.execute()
        <-- de.unihalle.informatik.MiToBo_admin.ant.MakePluginConfig.execute()
        <-- de.unihalle.informatik.MiToBo_admin.test.MiToBoAdminTests
        <-- mtb_contours.Contour_on_Labeled_Components
        <-- mtb_contours.Contour_on_Labeled_Components.add_InnerContours(java.util.Vector, java.util.Vector)
        <-- mtb_contours.Contour_on_Labeled_Components.get_ContourImage(java.util.Vector)
        <-- mtb_contours.Contour_on_Labeled_Components.get_OuterContours(ij.process.ImageProcessor, java.util.Vector)
        <-- mtb_demo.Demo_MTBOpBase_Plugin.getMetaParams()
        <-- mtb_demo.Demo_MTBOpBase_Plugin.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        <-- mtb_demo.Demo_MTBOpBase_Plugin.parameterDialog()
        <-- mtb_demo.Demo_MTBOpBase_Plugin.run(ij.process.ImageProcessor)
        <-- mtb_enhance.Correct_Gamma
        <-- mtb_enhance.Histogram_Equalize.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        <-- mtb_fields.Create_GVF
        <-- mtb_fields.Create_GVF.writeUV(double[], double[], int, int)
        <-- mtb_filters.Rank_Operator.getMetaParams()
        <-- mtb_filters.Rank_Operator.parameterDialog()
        <-- mtb_filters.Rank_Operator.run(ij.process.ImageProcessor)
        <-- mtb_granules.Cell_Segment_2D
        <-- mtb_io.Save_Image.save()
        <-- mtb_morphology.CalcOtsuThreshold_Image.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        <-- mtb_morphology.CalcOtsuThreshold_Image.run(ij.process.ImageProcessor)
        <-- mtb_morphology.Dilate_Image.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        <-- mtb_morphology.Erode_Image.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        <-- mtb_morphology.HDomeTransform_3D.getMetaParams()
        <-- mtb_morphology.HDomeTransform_3D.run(ij.process.ImageProcessor)
        <-- mtb_morphology.Link_Components
        <-- mtb_morphology.Morph_3D
        <-- mtb_morphology.Morph_3D.run(java.lang.String)
        <-- mtb_morphology.Threshold_Image
        <-- mtb_morphology.Threshold_Image.dialogItemChanged(ij.gui.GenericDialog, java.awt.AWTEvent)
        <-- mtb_morphology.Threshold_Image_Niblack.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        <-- mtb_neurites.Neurit_Detector_2D
        <-- mtb_neurites.Neurit_Detector_2D.createResultDir(java.lang.String)
        <-- mtb_neurites.Neurit_Detector_2D.drawSnakeRegion(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.Region2D)
        <-- mtb_neurites.Neurit_Detector_2D.getControlPoints(de.unihalle.informatik.MiToBo.datatypes.Contour2D)
        <-- mtb_neurites.Neurit_Detector_2D.getSnakeRegion(java.awt.Polygon)
        <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
        <-- mtb_neurites.Neurit_Detector_2D.process()
        <-- mtb_neurites.Neurit_Detector_2D.removeCellBody(de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        <-- mtb_neurites.Neurit_Detector_2D.testRegions(de.unihalle.informatik.MiToBo.datatypes.Region2D, de.unihalle.informatik.MiToBo.datatypes.Region2D)
        <-- mtb_neurites.Neurit_Detector_2D.testRegions2(de.unihalle.informatik.MiToBo.datatypes.Region2D, de.unihalle.informatik.MiToBo.datatypes.Region2D)
        <-- mtb_regions.Label_Components_Recursive
        <-- mtb_regions.Label_Components_Recursive.run(ij.process.ImageProcessor)
        <-- mtb_regions.Label_Components_Sequential
        <-- mtb_regions.Label_Components_Sequential.run(ij.process.ImageProcessor)
        <-- mtb_regions.Label_Components_Sequential_3D.getMetaParams()
        <-- mtb_regions.Label_Components_Sequential_3D.run(ij.process.ImageProcessor)
        <-- mtb_regions.Segment_No_Edges3D
        Object() *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.GranuleDetectorControl$DetectorHeart(de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.GranuleDetectorControl(de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorMain.GranuleDetectorMain()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.NeuriteProfile(de.unihalle.informatik.MiToBo.datatypes.Region2D)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.NeuriteProfileExtraction()
            <-- de.unihalle.informatik.MiToBo.datatypes.Contour2D.Contour2D()
            <-- de.unihalle.informatik.MiToBo.datatypes.Contour2D.Contour2D(java.util.Vector)
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(de.unihalle.informatik.MiToBo.datatypes.Image3D)
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(de.unihalle.informatik.MiToBo.datatypes.Image3D, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(double[])
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(double[], int)
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(ij.ImageStack)
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(ij.ImageStack, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(ij.process.ImageProcessor)
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(ij.process.ImageProcessor, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(int[])
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(int[], int)
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.Image3D(de.unihalle.informatik.MiToBo.datatypes.Image3D)
            <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.Image3D(int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.Image3D(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.datatypes.LevelSet.LevelSet()
            <-- de.unihalle.informatik.MiToBo.datatypes.Point3D.Point3D()
            <-- de.unihalle.informatik.MiToBo.datatypes.Point3D.Point3D(de.unihalle.informatik.MiToBo.datatypes.Point3D)
            <-- de.unihalle.informatik.MiToBo.datatypes.Point3D.Point3D(double, double, double)
            <-- de.unihalle.informatik.MiToBo.datatypes.Region2D.Region2D()
            <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.Region3D()
            <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.Region3D(java.util.Vector)
            <-- de.unihalle.informatik.MiToBo.datatypes.Snake.Snake()
            <-- de.unihalle.informatik.MiToBo.datatypes.Snake.Snake(java.util.Vector, boolean)
            <-- de.unihalle.informatik.MiToBo.datatypes.Tree.Tree(de.unihalle.informatik.MiToBo.datatypes.TreeNodeData)
            <-- de.unihalle.informatik.MiToBo.datatypes.TreeNode.TreeNode(de.unihalle.informatik.MiToBo.datatypes.TreeNodeData)
            <-- de.unihalle.informatik.MiToBo.datatypes.TreeNodeData.TreeNodeData()
            <-- de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.FeatureVector(double[], int, double)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.MTBImage()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.MTBImage(ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.MTBImageWindow(int, int, int, int, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageManipulator)
            <-- de.unihalle.informatik.MiToBo.enhance.GammaCorrection.GammaCorrection()
            <-- de.unihalle.informatik.MiToBo.enhance.GammaCorrection3D.GammaCorrection3D()
            <-- de.unihalle.informatik.MiToBo.fields.gradient.ImgGradient.ImgGradient()
            <-- de.unihalle.informatik.MiToBo.fields.gvf.ImgGVF.ImgGVF()
            <-- de.unihalle.informatik.MiToBo.filters.linear.SymDerivationX.SymDerivationX()
            <-- de.unihalle.informatik.MiToBo.filters.linear.SymDerivationY.SymDerivationY()
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.ImgOpen()
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.ImgOpen(java.io.File)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.ImgOpen(java.lang.String, java.lang.String)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave()
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.io.File, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.io.File, ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.lang.String, java.lang.String, ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.lang.String, java.lang.String, java.lang.String, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.meta.CvsInfo.CvsInfo()
            <-- de.unihalle.informatik.MiToBo.meta.MTBMetaData.MTBMetaData()
            <-- de.unihalle.informatik.MiToBo.meta.MTBMetaData.MTBMetaData(de.unihalle.informatik.MiToBo.meta.MTBMetaData)
            <-- de.unihalle.informatik.MiToBo.meta.MTBOpBase.MTBOpBase()
            <-- de.unihalle.informatik.MiToBo.meta.MTBOpParams.MTBOpParams()
            <-- de.unihalle.informatik.MiToBo.meta.MTBOpParams.MTBOpParams(de.unihalle.informatik.MiToBo.meta.MTBMetaData)
            <-- de.unihalle.informatik.MiToBo.meta.xml.MTBxmlIO.MTBxmlIO()
            <-- de.unihalle.informatik.MiToBo.morphology.ComponentPostprocess.ComponentPostprocess()
            <-- de.unihalle.informatik.MiToBo.morphology.Morphology3D.Morphology3D()
            <-- de.unihalle.informatik.MiToBo.morphology.StructuringElement.StructuringElement(int[][][], int, int, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.Resampler()
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.Resampler(Jama.Matrix, Jama.Matrix, double)
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.Resampler(java.util.Vector, double)
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.SnakeAlgos.SnakeAlgos()
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.SnakeAlgos.SnakeAlgos(de.unihalle.informatik.MiToBo.datatypes.Snake)
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.LevelSetSolver.LevelSetSolver(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsRecursive.LabelComponentsRecursive()
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential.LabelComponentsSequential()
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshMoments.CalcGlobalThreshMoments()
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThresh.ImgThresh()
            <-- de.unihalle.informatik.MiToBo.statistics.RegionSetStatistics.RegionSetStatistics()
            <-- de.unihalle.informatik.MiToBo_admin.test.MiToBoAdminTests.MiToBoAdminTests()
            <-- mtb_contours.Contour_on_Labeled_Components.Contour_on_Labeled_Components()
            <-- mtb_enhance.Correct_Gamma.Correct_Gamma()
            <-- mtb_fields.Create_GVF.Create_GVF()
            <-- mtb_granules.Cell_Segment_2D.Cell_Segment_2D()
            <-- mtb_morphology.Link_Components.Link_Components()
            <-- mtb_morphology.Morph_3D.Morph_3D()
            <-- mtb_morphology.Threshold_Image.Threshold_Image()
            <-- mtb_neurites.Neurit_Detector_2D.Neurit_Detector_2D()
            <-- mtb_regions.Label_Components_Recursive.Label_Components_Recursive()
            <-- mtb_regions.Label_Components_Sequential.Label_Components_Sequential()
            <-- mtb_regions.Segment_No_Edges3D.Segment_No_Edges3D()
        getClass() *
            <-- de.unihalle.informatik.MiToBo.apps.cells2D.CellSegmentAlgos.voronoiTesselation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.detectGranules_old(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.detectNuclei(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.meta.MTBOpParams.logToMetaDataObj_start(de.unihalle.informatik.MiToBo.meta.MTBOpBase)
            <-- mtb_enhance.Histogram_Equalize.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            <-- mtb_granules.Cell_Segment_2D.run(ij.process.ImageProcessor)
            <-- mtb_morphology.CalcOtsuThreshold_Image.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            <-- mtb_morphology.Dilate_Image.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            <-- mtb_morphology.Erode_Image.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            <-- mtb_morphology.Threshold_Image_Niblack.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
            <-- mtb_neurites.Neurit_Detector_2D.removeCellBody(de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        toString() *
            <-- de.unihalle.informatik.MiToBo.meta.MTBOpParams.logToMetaDataObj_start(de.unihalle.informatik.MiToBo.meta.MTBOpBase)
    Object[] *
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.insertData(java.util.Vector)
    Object[][] *
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.GranuleDetectorGUI$GranuleTableModel(de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI, int, int)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.setValueAt(java.lang.Object, int, int)
    Runnable *
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.actionPerformed(java.awt.event.ActionEvent)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorMain
        <-- mtb_granules.Granule_Detector_2D
    String *
        <-- de.unihalle.informatik.MiToBo.apps.cells2D.CellSegmentAlgos.voronoiTesselation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$GranuleDetectorParams.GranuleDetectorAlgos$GranuleDetectorParams(de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$Subroutine)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$GranuleDetectorParams.GranuleDetectorAlgos$GranuleDetectorParams(de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos, de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$Subroutine)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$GranuleDetectorParams.getInputImage()
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$GranuleDetectorParams.getResultImage()
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$GranuleDetectorParams.getSubroutine()
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$GranuleDetectorParams.setResultImage(de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$Subroutine.GranuleDetectorAlgos$Subroutine(java.lang.String, int)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$Subroutine.static {}
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$Subroutine.valueOf(java.lang.String)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.currentFile
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.shortPath
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.applyToImage()
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.applyToImageBatch(java.lang.String)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.dirToWorkOn
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.run()
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.setDirToWorkOn(java.lang.String)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel$ResultTabFileFilter.accept(java.io.File)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel$ResultTabFileFilter.getDescription()
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.GranuleDetectorGUI$GranuleTableModel(de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI, int, int)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.getColumnName(int)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.header
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.saveTable()
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.tableToString()
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.actionPerformed(java.awt.event.ActionEvent)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.getMinimumGranuleSize()
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setStatus(java.lang.String)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupResultTable()
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.DirChanWindow()
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.SnakeWindow()
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.dir
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.file
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.getDirName()
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.resetSettings()
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.setStatus(java.lang.String, int)
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.showMessage(java.lang.String)
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.saveProfileData(java.lang.String)
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.saveProfileList(java.util.LinkedList, java.lang.String)
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.saveSkeletonImage(java.lang.String)
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.saveVoronoiImage(java.lang.String)
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcLongestPathProfiles(ij.ImagePlus, ij.ImagePlus, ij.ImagePlus)
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcProfile(de.unihalle.informatik.MiToBo.datatypes.Region2D, de.unihalle.informatik.MiToBo.morphology.SkeletonTree, ij.process.ImageProcessor, ij.process.ImageProcessor)
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.getNeuritePathTrees(ij.process.ImageProcessor, ij.process.ImageProcessor, ij.process.ImageProcessor, java.util.Vector)
        <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
        <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(java.lang.String)
        <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.save(java.lang.String)
        <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.Image3D(java.lang.String)
        <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.Image3DToStack()
        <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.setVoxels(int[])
        <-- de.unihalle.informatik.MiToBo.datatypes.Region2D.toMTBImageByte(java.lang.String, int, int)
        <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.regionToFile(de.unihalle.informatik.MiToBo.datatypes.Region3D, java.lang.String)
        <-- de.unihalle.informatik.MiToBo.datatypes.Snake.toMTBImage(java.lang.String, int, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.datatypes.Snake.toMTBImageByte(java.lang.String, int, int)
        <-- de.unihalle.informatik.MiToBo.datatypes.TreeNode.printData()
        <-- de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.distCityBlock(de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector, de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector)
        <-- de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.distEuklid(de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector, de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector)
        <-- de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector.distEuklidSquared(de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector, de.unihalle.informatik.MiToBo.datatypes.features.FeatureVector)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.createMTBImage(ij.ImagePlus)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.createMTBImage(int, int, int, int, int, int)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.show()
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.MTBImageByte(ij.ImagePlus)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.MTBImageByte(int, int, int, int, int)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.duplicate()
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.getImagePlus()
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.MTBImageFloat(ij.ImagePlus)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.MTBImageFloat(int, int, int, int, int)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageFloat.duplicate()
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.getImagePlus()
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.getImagePlusRGB()
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.MTBImageShort(ij.ImagePlus)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.MTBImageShort(int, int, int, int, int)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageShort.duplicate()
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.incrPositionC()
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.incrPositionC(int)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.incrPositionT()
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.incrPositionT(int)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.incrPositionX()
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.incrPositionX(int)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.incrPositionY()
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.incrPositionY(int)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.incrPositionZ()
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.incrPositionZ(int)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.setPositionC(int)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.setPositionT(int)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.setPositionX(int)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.setPositionY(int)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.setPositionZ(int)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageWindow.setWindowPosition(int, int, int, int, int)
        <-- de.unihalle.informatik.MiToBo.enhance.GammaCorrection.correctGamma(ij.process.ImageProcessor, double, int)
        <-- de.unihalle.informatik.MiToBo.enhance.HistogramEqualization$HistoEquParams.HistogramEqualization$HistoEquParams(de.unihalle.informatik.MiToBo.enhance.HistogramEqualization, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.enhance.HistogramEqualization$HistoEquParams.HistogramEqualization$HistoEquParams(de.unihalle.informatik.MiToBo.enhance.HistogramEqualization, de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.enhance.HistogramEqualization$HistoEquParams.getInputImage()
        <-- de.unihalle.informatik.MiToBo.enhance.HistogramEqualization$HistoEquParams.getResultImage()
        <-- de.unihalle.informatik.MiToBo.enhance.HistogramEqualization$HistoEquParams.setResultImage(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.enhance.HistogramEqualization.equalizeImageHisto(ij.process.ImageProcessor)
        <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.fireStatusEvent(int, int, java.lang.String)
        <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.rankOp(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, int, boolean, boolean, boolean, boolean, boolean)
        <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.RankOperatorParams(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, int)
        <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.RankOperatorParams(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, int, boolean, boolean, boolean, boolean, boolean)
        <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.RankOperatorParams(de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, int)
        <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.RankOperatorParams(de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, int, boolean, boolean, boolean, boolean, boolean)
        <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.getInputImage()
        <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.getMaskRadius()
        <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.getMode()
        <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.getResultImage()
        <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.getUseDimCFlag()
        <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.getUseDimTFlag()
        <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.getUseDimXFlag()
        <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.getUseDimYFlag()
        <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.getUseDimZFlag()
        <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.setResultImage(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTree.DirectoryTree(java.lang.String)
        <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTree.getFileList()
        <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTree.initFromDirectory()
        <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTree.mainpath
        <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTree.traverseSubdir(java.lang.String, java.lang.String)
        <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTreeNodeData.DirectoryTreeNodeData(java.lang.String)
        <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTreeNodeData.addFile(java.lang.String)
        <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTreeNodeData.getPath()
        <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTreeNodeData.getSubtreeFileList()
        <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTreeNodeData.path
        <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTreeNodeData.printData()
        <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTreeNodeData.setPath(java.lang.String)
        <-- de.unihalle.informatik.MiToBo.io.files.ImageFilter.ImageFilter()
        <-- de.unihalle.informatik.MiToBo.io.files.ImageFilter.accept(java.io.File)
        <-- de.unihalle.informatik.MiToBo.io.files.ImageFilter.acceptStacks(java.io.File)
        <-- de.unihalle.informatik.MiToBo.io.files.ImageFilter.ext
        <-- de.unihalle.informatik.MiToBo.io.files.ImageFilter.getDescription()
        <-- de.unihalle.informatik.MiToBo.io.files.ImageFilter.getExtension(java.io.File)
        <-- de.unihalle.informatik.MiToBo.io.files.ImageFilter.getName(java.io.File)
        <-- de.unihalle.informatik.MiToBo.io.files.ImageFilter.gif
        <-- de.unihalle.informatik.MiToBo.io.files.ImageFilter.jpeg
        <-- de.unihalle.informatik.MiToBo.io.files.ImageFilter.jpg
        <-- de.unihalle.informatik.MiToBo.io.files.ImageFilter.name
        <-- de.unihalle.informatik.MiToBo.io.files.ImageFilter.png
        <-- de.unihalle.informatik.MiToBo.io.files.ImageFilter.tif
        <-- de.unihalle.informatik.MiToBo.io.files.ImageFilter.tiff
        <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.ImgOpen(java.lang.String, java.lang.String)
        <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.deleteBorder(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
        <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.examine()
        <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.open()
        <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.open(int[])
        <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.setFile(java.lang.String, java.lang.String)
        <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave()
        <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.io.File, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.io.File, ij.ImagePlus)
        <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.lang.String, java.lang.String, ij.ImagePlus)
        <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.lang.String, java.lang.String, java.lang.String, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.gif
        <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.jpeg
        <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.jpg
        <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.png
        <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.saveFile(boolean)
        <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.setFile(java.lang.String, java.lang.String)
        <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.tif
        <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.tiff
        <-- de.unihalle.informatik.MiToBo.meta.CvsInfo.getCvsTag()
        <-- de.unihalle.informatik.MiToBo.meta.CvsInfo.getCvsTag(java.lang.String)
        <-- de.unihalle.informatik.MiToBo.meta.MTBMetaData.MTBMetaData()
        <-- de.unihalle.informatik.MiToBo.meta.MTBMetaData.addNewTag(java.lang.String)
        <-- de.unihalle.informatik.MiToBo.meta.MTBMetaData.readFromFile(java.lang.String)
        <-- de.unihalle.informatik.MiToBo.meta.MTBMetaData.setAttributeValue(java.lang.String, java.lang.String)
        <-- de.unihalle.informatik.MiToBo.meta.MTBMetaData.setTagText(java.lang.String)
        <-- de.unihalle.informatik.MiToBo.meta.MTBMetaData.writeToFile(java.lang.String)
        <-- de.unihalle.informatik.MiToBo.meta.MTBOpBasePlugin.run(ij.process.ImageProcessor)
        <-- de.unihalle.informatik.MiToBo.meta.MTBOpBasePlugin.setup(java.lang.String, ij.ImagePlus)
        <-- de.unihalle.informatik.MiToBo.meta.MTBOpParams.getParameter(java.lang.String)
        <-- de.unihalle.informatik.MiToBo.meta.MTBOpParams.logToMetaDataObj_start(de.unihalle.informatik.MiToBo.meta.MTBOpBase)
        <-- de.unihalle.informatik.MiToBo.meta.MTBOpParams.setParameter(java.lang.String, java.lang.Object)
        <-- de.unihalle.informatik.MiToBo.meta.xml.MTBxmlIO.readFromFile(java.lang.String)
        <-- de.unihalle.informatik.MiToBo.meta.xml.MTBxmlIO.saveToFile(org.w3c.dom.Document, java.lang.String)
        <-- de.unihalle.informatik.MiToBo.morphology.ComponentPostprocess.EraseSmallComponents(ij.process.ImageProcessor, int)
        <-- de.unihalle.informatik.MiToBo.morphology.ComponentPostprocess.LinkAdjacentComponents(ij.process.ImageProcessor, double)
        <-- de.unihalle.informatik.MiToBo.morphology.HDomeTransform3DParams.HDomeTransform3DParams(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double)
        <-- de.unihalle.informatik.MiToBo.morphology.HDomeTransform3DParams.HDomeTransform3DParams(de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double)
        <-- de.unihalle.informatik.MiToBo.morphology.HDomeTransform3DParams.getH()
        <-- de.unihalle.informatik.MiToBo.morphology.HDomeTransform3DParams.getInputImage()
        <-- de.unihalle.informatik.MiToBo.morphology.HDomeTransform3DParams.getResultImage()
        <-- de.unihalle.informatik.MiToBo.morphology.HDomeTransform3DParams.setResultImage(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.morphology.ImgDilate$ImgDilateParams.ImgDilate$ImgDilateParams(de.unihalle.informatik.MiToBo.morphology.ImgDilate, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
        <-- de.unihalle.informatik.MiToBo.morphology.ImgDilate$ImgDilateParams.ImgDilate$ImgDilateParams(de.unihalle.informatik.MiToBo.morphology.ImgDilate, de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
        <-- de.unihalle.informatik.MiToBo.morphology.ImgDilate$ImgDilateParams.getInputImage()
        <-- de.unihalle.informatik.MiToBo.morphology.ImgDilate$ImgDilateParams.getMasksize()
        <-- de.unihalle.informatik.MiToBo.morphology.ImgDilate$ImgDilateParams.getResultImage()
        <-- de.unihalle.informatik.MiToBo.morphology.ImgDilate$ImgDilateParams.setResultImage(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.morphology.ImgDilate.applyMask(ij.process.ImageProcessor, int)
        <-- de.unihalle.informatik.MiToBo.morphology.ImgErode$ImgErodeParams.ImgErode$ImgErodeParams(de.unihalle.informatik.MiToBo.morphology.ImgErode, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
        <-- de.unihalle.informatik.MiToBo.morphology.ImgErode$ImgErodeParams.ImgErode$ImgErodeParams(de.unihalle.informatik.MiToBo.morphology.ImgErode, de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
        <-- de.unihalle.informatik.MiToBo.morphology.ImgErode$ImgErodeParams.getInputImage()
        <-- de.unihalle.informatik.MiToBo.morphology.ImgErode$ImgErodeParams.getMasksize()
        <-- de.unihalle.informatik.MiToBo.morphology.ImgErode$ImgErodeParams.getResultImage()
        <-- de.unihalle.informatik.MiToBo.morphology.ImgErode$ImgErodeParams.setResultImage(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.morphology.ImgErode.applyMask(ij.process.ImageProcessor, int)
        <-- de.unihalle.informatik.MiToBo.morphology.Morphology3D.dilate(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.morphology.StructuringElement)
        <-- de.unihalle.informatik.MiToBo.morphology.Morphology3D.erode(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.morphology.StructuringElement)
        <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.SkeletonTree(int, int, ij.ImagePlus)
        <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.getPoints()
        <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.solve()
        <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsRecursive.regionSegmentation(ij.process.ImageProcessor)
        <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential.regionSegmentation(ij.process.ImageProcessor, boolean)
        <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3DParams.LabelComponentsSequential3DParams(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, boolean)
        <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3DParams.LabelComponentsSequential3DParams(de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, boolean)
        <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3DParams.getDiagonalNeighborsFlag()
        <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3DParams.getInputImage()
        <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3DParams.getResultingRegions(int, int)
        <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3DParams.setResultingRegions(java.util.Vector, int, int)
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu$OtsuParams.CalcGlobalThreshOtsu$OtsuParams(de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu$OtsuParams.CalcGlobalThreshOtsu$OtsuParams(de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu, de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu$OtsuParams.getInputImage()
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu$OtsuParams.getOtsuThreshold()
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu$OtsuParams.setResultThresh(double)
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThresh.applyThreshold(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThresh.applyThreshold(ij.process.ImageProcessor, int)
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$Mode.ImgThreshNiblack$Mode(java.lang.String, int)
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$Mode.static {}
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$Mode.valueOf(java.lang.String)
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams.ImgThreshNiblack$NiblackParams(de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$Mode, double, double, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams.ImgThreshNiblack$NiblackParams(de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack, de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$Mode, double, double, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams.getEnhanceParamR()
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams.getInputImage()
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams.getMask()
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams.getMode()
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams.getResultImage()
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams.getScalingK()
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams.getSlidingWindowSize()
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams.setResultImage(de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.applyNiblackThresholdWholeImage(ij.process.ImageProcessor, double, double, ij.ImagePlus)
        <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.destdir
        <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.execute()
        <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.exportfile
        <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.extractClassSection(java.lang.String)
        <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.extractPackageSection(java.lang.String)
        <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.getAllRequiredClasses(java.util.LinkedList, boolean)
        <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.getDependencies(java.lang.String)
        <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.getExportfile()
        <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.logfile
        <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.readDependencyLogfile()
        <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.setDestdir(java.lang.String)
        <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.setExportfile(java.lang.String)
        <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.setLogfile(java.lang.String)
        <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepListTest.testExtractClassSection()
        <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepListTest.testGetAllRequiredClasses()
        <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepListTest.testSetExportFile()
        <-- de.unihalle.informatik.MiToBo_admin.ant.GetLastCvsTag.execute()
        <-- de.unihalle.informatik.MiToBo_admin.ant.GetLastCvsTag.logfile
        <-- de.unihalle.informatik.MiToBo_admin.ant.GetLastCvsTag.setLogfile(java.lang.String)
        <-- de.unihalle.informatik.MiToBo_admin.ant.MakePluginConfig.destdir
        <-- de.unihalle.informatik.MiToBo_admin.ant.MakePluginConfig.execute()
        <-- de.unihalle.informatik.MiToBo_admin.ant.MakePluginConfig.exportfile
        <-- de.unihalle.informatik.MiToBo_admin.ant.MakePluginConfig.setDestdir(java.lang.String)
        <-- de.unihalle.informatik.MiToBo_admin.ant.MakePluginConfig.setExportfile(java.lang.String)
        <-- mtb_contours.Contour_on_Labeled_Components.add_InnerContours(java.util.Vector, java.util.Vector)
        <-- mtb_contours.Contour_on_Labeled_Components.get_ContourImage(java.util.Vector)
        <-- mtb_contours.Contour_on_Labeled_Components.setup(java.lang.String, ij.ImagePlus)
        <-- mtb_demo.Demo_MTBOpBase_Plugin.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        <-- mtb_demo.Demo_MTBOpBase_Plugin.parameterDialog()
        <-- mtb_demo.Demo_MTBOpBase_Plugin.run(ij.process.ImageProcessor)
        <-- mtb_demo.Demo_MTBOpBase_Plugin.setup(java.lang.String, ij.ImagePlus)
        <-- mtb_enhance.Correct_Gamma.run(ij.process.ImageProcessor)
        <-- mtb_enhance.Correct_Gamma.setup(java.lang.String, ij.ImagePlus)
        <-- mtb_enhance.Histogram_Equalize.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        <-- mtb_enhance.Histogram_Equalize.setup(java.lang.String, ij.ImagePlus)
        <-- mtb_fields.Create_GVF.BoundEnsure(double[], int, int)
        <-- mtb_fields.Create_GVF.printArray(double[], int, int)
        <-- mtb_fields.Create_GVF.run(ij.process.ImageProcessor)
        <-- mtb_fields.Create_GVF.setup(java.lang.String, ij.ImagePlus)
        <-- mtb_fields.Create_GVF.writeUV(double[], double[], int, int)
        <-- mtb_filters.Rank_Operator.main(java.lang.String[])
        <-- mtb_filters.Rank_Operator.parameterDialog()
        <-- mtb_filters.Rank_Operator.run(ij.process.ImageProcessor)
        <-- mtb_filters.Rank_Operator.setup(java.lang.String, ij.ImagePlus)
        <-- mtb_filters.Rank_Operator.statusUpdated(loci.formats.StatusEvent)
        <-- mtb_granules.Cell_Segment_2D.run(ij.process.ImageProcessor)
        <-- mtb_granules.Cell_Segment_2D.setup(java.lang.String, ij.ImagePlus)
        <-- mtb_granules.Granule_Detector_2D.run(java.lang.String)
        <-- mtb_io.Open_Image.actionPerformed(java.awt.event.ActionEvent)
        <-- mtb_io.Open_Image.channelWindow()
        <-- mtb_io.Open_Image.currentDir
        <-- mtb_io.Open_Image.open()
        <-- mtb_io.Open_Image.run(java.lang.String)
        <-- mtb_io.Open_Image.static {}
        <-- mtb_io.Save_Image.currentDir
        <-- mtb_io.Save_Image.save()
        <-- mtb_io.Save_Image.setup(java.lang.String, ij.ImagePlus)
        <-- mtb_io.Save_Image.static {}
        <-- mtb_morphology.CalcOtsuThreshold_Image.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        <-- mtb_morphology.CalcOtsuThreshold_Image.setup(java.lang.String, ij.ImagePlus)
        <-- mtb_morphology.Dilate_Image.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        <-- mtb_morphology.Dilate_Image.setup(java.lang.String, ij.ImagePlus)
        <-- mtb_morphology.Erode_Image.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        <-- mtb_morphology.Erode_Image.setup(java.lang.String, ij.ImagePlus)
        <-- mtb_morphology.HDomeTransform_3D.parameterDialog()
        <-- mtb_morphology.HDomeTransform_3D.run(ij.process.ImageProcessor)
        <-- mtb_morphology.HDomeTransform_3D.setup(java.lang.String, ij.ImagePlus)
        <-- mtb_morphology.Link_Components.setup(java.lang.String, ij.ImagePlus)
        <-- mtb_morphology.Morph_3D.run(java.lang.String)
        <-- mtb_morphology.Threshold_Image.setup(java.lang.String, ij.ImagePlus)
        <-- mtb_morphology.Threshold_Image.thresholdSetupDialog()
        <-- mtb_morphology.Threshold_Image_Niblack.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        <-- mtb_morphology.Threshold_Image_Niblack.setup(java.lang.String, ij.ImagePlus)
        <-- mtb_neurites.Neurit_Detector_2D.activeContours(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, java.util.Vector, int, double)
        <-- mtb_neurites.Neurit_Detector_2D.createResultDir(java.lang.String)
        <-- mtb_neurites.Neurit_Detector_2D.file_name_noExtension
        <-- mtb_neurites.Neurit_Detector_2D.files
        <-- mtb_neurites.Neurit_Detector_2D.getDate()
        <-- mtb_neurites.Neurit_Detector_2D.getSnakeRegion(java.awt.Polygon)
        <-- mtb_neurites.Neurit_Detector_2D.imageDir
        <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
        <-- mtb_neurites.Neurit_Detector_2D.process()
        <-- mtb_neurites.Neurit_Detector_2D.removeCellBody(de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        <-- mtb_neurites.Neurit_Detector_2D.resultDir
        <-- mtb_neurites.Neurit_Detector_2D.result_bin_init
        <-- mtb_neurites.Neurit_Detector_2D.result_bin_linked
        <-- mtb_neurites.Neurit_Detector_2D.result_profiles
        <-- mtb_neurites.Neurit_Detector_2D.result_snakes
        <-- mtb_neurites.Neurit_Detector_2D.run(java.lang.String)
        <-- mtb_neurites.Neurit_Detector_2D.setResultDirs()
        <-- mtb_regions.Label_Components_Recursive.run(ij.process.ImageProcessor)
        <-- mtb_regions.Label_Components_Recursive.setup(java.lang.String, ij.ImagePlus)
        <-- mtb_regions.Label_Components_Sequential.chooseNeighborhoodDialog()
        <-- mtb_regions.Label_Components_Sequential.m_title
        <-- mtb_regions.Label_Components_Sequential.run(ij.process.ImageProcessor)
        <-- mtb_regions.Label_Components_Sequential.setup(java.lang.String, ij.ImagePlus)
        <-- mtb_regions.Label_Components_Sequential_3D.parameterDialog()
        <-- mtb_regions.Label_Components_Sequential_3D.run(ij.process.ImageProcessor)
        <-- mtb_regions.Label_Components_Sequential_3D.setup(java.lang.String, ij.ImagePlus)
        <-- mtb_regions.Label_Components_Sequential_3D.statusUpdated(loci.formats.StatusEvent)
        <-- mtb_regions.Segment_No_Edges3D.run(ij.process.ImageProcessor)
        <-- mtb_regions.Segment_No_Edges3D.setup(java.lang.String, ij.ImagePlus)
        String() *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        charAt(int) *
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.execute()
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.extractClassSection(java.lang.String)
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.getAllRequiredClasses(java.util.LinkedList, boolean)
        contains(java.lang.CharSequence) *
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.execute()
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.getAllRequiredClasses(java.util.LinkedList, boolean)
            <-- de.unihalle.informatik.MiToBo_admin.ant.GetLastCvsTag.execute()
        endsWith(java.lang.String) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel$ResultTabFileFilter.accept(java.io.File)
            <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTree.initFromDirectory()
            <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTree.traverseSubdir(java.lang.String, java.lang.String)
        equals(java.lang.Object) *
            <-- de.unihalle.informatik.MiToBo.io.files.ImageFilter.accept(java.io.File)
            <-- de.unihalle.informatik.MiToBo.io.files.ImageFilter.acceptStacks(java.io.File)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.saveFile(boolean)
        equalsIgnoreCase(java.lang.String) *
            <-- mtb_morphology.Morph_3D.run(java.lang.String)
        lastIndexOf(int) *
            <-- de.unihalle.informatik.MiToBo.io.files.ImageFilter.getExtension(java.io.File)
            <-- de.unihalle.informatik.MiToBo.io.files.ImageFilter.getName(java.io.File)
        lastIndexOf(java.lang.String) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.applyToImageBatch(java.lang.String)
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.execute()
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.getAllRequiredClasses(java.util.LinkedList, boolean)
        length() *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.applyToImageBatch(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.io.files.ImageFilter.getExtension(java.io.File)
            <-- de.unihalle.informatik.MiToBo.io.files.ImageFilter.getName(java.io.File)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.open(int[])
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.execute()
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.getAllRequiredClasses(java.util.LinkedList, boolean)
            <-- de.unihalle.informatik.MiToBo_admin.ant.GetLastCvsTag.execute()
        replace(java.lang.CharSequence, java.lang.CharSequence) *
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.execute()
        split(java.lang.String) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.execute()
            <-- de.unihalle.informatik.MiToBo_admin.ant.GetLastCvsTag.execute()
            <-- de.unihalle.informatik.MiToBo_admin.ant.MakePluginConfig.execute()
        startsWith(java.lang.String) *
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.execute()
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.extractClassSection(java.lang.String)
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.extractPackageSection(java.lang.String)
            <-- de.unihalle.informatik.MiToBo_admin.ant.GetLastCvsTag.execute()
            <-- de.unihalle.informatik.MiToBo_admin.ant.MakePluginConfig.execute()
        substring(int) *
            <-- de.unihalle.informatik.MiToBo.io.files.ImageFilter.getExtension(java.io.File)
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.getAllRequiredClasses(java.util.LinkedList, boolean)
        substring(int, int) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.applyToImageBatch(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.io.files.ImageFilter.getName(java.io.File)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.open(int[])
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.execute()
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.getAllRequiredClasses(java.util.LinkedList, boolean)
            <-- de.unihalle.informatik.MiToBo_admin.ant.GetLastCvsTag.execute()
        toLowerCase() *
            <-- de.unihalle.informatik.MiToBo.io.files.ImageFilter.getExtension(java.io.File)
        trim() *
            <-- de.unihalle.informatik.MiToBo_admin.ant.GetLastCvsTag.execute()
        valueOf(double) *
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.save(java.lang.String)
            <-- mtb_fields.Create_GVF.printArray(double[], int, int)
            <-- mtb_fields.Create_GVF.writeUV(double[], double[], int, int)
        valueOf(int) *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.setStatus(java.lang.String, int)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.saveProfileData(java.lang.String)
        valueOf(java.lang.Object) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.tableToString()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
            <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTree.getFileList()
            <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTree.initFromDirectory()
            <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTree.traverseSubdir(java.lang.String, java.lang.String)
            <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTreeNodeData.getSubtreeFileList()
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.ImgOpen(java.lang.String, java.lang.String)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.open(int[])
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.setFile(java.lang.String, java.lang.String)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.lang.String, java.lang.String, ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.lang.String, java.lang.String, java.lang.String, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.saveFile(boolean)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.setFile(java.lang.String, java.lang.String)
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.execute()
            <-- de.unihalle.informatik.MiToBo_admin.ant.GetLastCvsTag.execute()
            <-- de.unihalle.informatik.MiToBo_admin.ant.MakePluginConfig.execute()
            <-- mtb_fields.Create_GVF.writeUV(double[], double[], int, int)
            <-- mtb_filters.Rank_Operator.run(ij.process.ImageProcessor)
            <-- mtb_morphology.HDomeTransform_3D.run(ij.process.ImageProcessor)
            <-- mtb_morphology.Morph_3D.run(java.lang.String)
            <-- mtb_neurites.Neurit_Detector_2D.createResultDir(java.lang.String)
            <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
            <-- mtb_neurites.Neurit_Detector_2D.process()
            <-- mtb_regions.Label_Components_Sequential.run(ij.process.ImageProcessor)
            <-- mtb_regions.Label_Components_Sequential_3D.run(ij.process.ImageProcessor)
    StringBuffer *
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.saveTable()
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.tableToString()
        <-- mtb_fields.Create_GVF.writeUV(double[], double[], int, int)
        StringBuffer() *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.tableToString()
            <-- mtb_fields.Create_GVF.writeUV(double[], double[], int, int)
        append(java.lang.String) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.tableToString()
        insert(int, java.lang.String) *
            <-- mtb_fields.Create_GVF.writeUV(double[], double[], int, int)
        length() *
            <-- mtb_fields.Create_GVF.writeUV(double[], double[], int, int)
        toString() *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.saveTable()
            <-- mtb_fields.Create_GVF.writeUV(double[], double[], int, int)
    StringBuilder *
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.applyToImageBatch(java.lang.String)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.saveTable()
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.tableToString()
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setStatus(java.lang.String)
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.setStatus(java.lang.String, int)
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.saveProfileData(java.lang.String)
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.saveProfileList(java.util.LinkedList, java.lang.String)
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcProfile(de.unihalle.informatik.MiToBo.datatypes.Region2D, de.unihalle.informatik.MiToBo.morphology.SkeletonTree, ij.process.ImageProcessor, ij.process.ImageProcessor)
        <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
        <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.save(java.lang.String)
        <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.Image3DToStack()
        <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.regionToFile(de.unihalle.informatik.MiToBo.datatypes.Region3D, java.lang.String)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.createMTBImage(ij.ImagePlus)
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.createMTBImage(int, int, int, int, int, int)
        <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTree.getFileList()
        <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTree.initFromDirectory()
        <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTree.traverseSubdir(java.lang.String, java.lang.String)
        <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTreeNodeData.getSubtreeFileList()
        <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTreeNodeData.printData()
        <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.ImgOpen(java.lang.String, java.lang.String)
        <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.deleteBorder(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
        <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.examine()
        <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.open()
        <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.open(int[])
        <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.setFile(java.lang.String, java.lang.String)
        <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.lang.String, java.lang.String, ij.ImagePlus)
        <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.lang.String, java.lang.String, java.lang.String, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.saveFile(boolean)
        <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.setFile(java.lang.String, java.lang.String)
        <-- de.unihalle.informatik.MiToBo.meta.CvsInfo.getCvsTag(java.lang.String)
        <-- de.unihalle.informatik.MiToBo.meta.xml.MTBxmlIO.saveToFile(org.w3c.dom.Document, java.lang.String)
        <-- de.unihalle.informatik.MiToBo.morphology.Morphology3D.dilate(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.morphology.StructuringElement)
        <-- de.unihalle.informatik.MiToBo.morphology.Morphology3D.erode(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.morphology.StructuringElement)
        <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.solve()
        <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3DParams.getResultingRegions(int, int)
        <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3DParams.setResultingRegions(java.util.Vector, int, int)
        <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.execute()
        <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.extractClassSection(java.lang.String)
        <-- de.unihalle.informatik.MiToBo_admin.ant.GetLastCvsTag.execute()
        <-- de.unihalle.informatik.MiToBo_admin.ant.MakePluginConfig.execute()
        <-- mtb_enhance.Correct_Gamma.run(ij.process.ImageProcessor)
        <-- mtb_fields.Create_GVF.printArray(double[], int, int)
        <-- mtb_fields.Create_GVF.writeUV(double[], double[], int, int)
        <-- mtb_filters.Rank_Operator.run(ij.process.ImageProcessor)
        <-- mtb_io.Save_Image.save()
        <-- mtb_morphology.CalcOtsuThreshold_Image.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        <-- mtb_morphology.HDomeTransform_3D.run(ij.process.ImageProcessor)
        <-- mtb_morphology.Morph_3D.run(java.lang.String)
        <-- mtb_neurites.Neurit_Detector_2D.createResultDir(java.lang.String)
        <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
        <-- mtb_neurites.Neurit_Detector_2D.process()
        <-- mtb_regions.Label_Components_Sequential.run(ij.process.ImageProcessor)
        <-- mtb_regions.Label_Components_Sequential_3D.run(ij.process.ImageProcessor)
        <-- mtb_regions.Segment_No_Edges3D.run(ij.process.ImageProcessor)
        StringBuilder() *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.tableToString()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.createMTBImage(ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.createMTBImage(int, int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.execute()
            <-- de.unihalle.informatik.MiToBo_admin.ant.GetLastCvsTag.execute()
            <-- de.unihalle.informatik.MiToBo_admin.ant.MakePluginConfig.execute()
            <-- mtb_morphology.CalcOtsuThreshold_Image.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        StringBuilder(java.lang.String) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.applyToImageBatch(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.saveTable()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.tableToString()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setStatus(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.setStatus(java.lang.String, int)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.saveProfileData(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.saveProfileList(java.util.LinkedList, java.lang.String)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcProfile(de.unihalle.informatik.MiToBo.datatypes.Region2D, de.unihalle.informatik.MiToBo.morphology.SkeletonTree, ij.process.ImageProcessor, ij.process.ImageProcessor)
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.save(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.Image3DToStack()
            <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.regionToFile(de.unihalle.informatik.MiToBo.datatypes.Region3D, java.lang.String)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.createMTBImage(ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.createMTBImage(int, int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTree.getFileList()
            <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTree.initFromDirectory()
            <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTree.traverseSubdir(java.lang.String, java.lang.String)
            <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTreeNodeData.getSubtreeFileList()
            <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTreeNodeData.printData()
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.ImgOpen(java.lang.String, java.lang.String)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.deleteBorder(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.examine()
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.open()
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.open(int[])
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.setFile(java.lang.String, java.lang.String)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.lang.String, java.lang.String, ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.lang.String, java.lang.String, java.lang.String, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.saveFile(boolean)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.setFile(java.lang.String, java.lang.String)
            <-- de.unihalle.informatik.MiToBo.meta.CvsInfo.getCvsTag(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.meta.xml.MTBxmlIO.saveToFile(org.w3c.dom.Document, java.lang.String)
            <-- de.unihalle.informatik.MiToBo.morphology.Morphology3D.dilate(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.morphology.StructuringElement)
            <-- de.unihalle.informatik.MiToBo.morphology.Morphology3D.erode(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.morphology.StructuringElement)
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.solve()
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3DParams.getResultingRegions(int, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3DParams.setResultingRegions(java.util.Vector, int, int)
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.execute()
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.extractClassSection(java.lang.String)
            <-- de.unihalle.informatik.MiToBo_admin.ant.GetLastCvsTag.execute()
            <-- de.unihalle.informatik.MiToBo_admin.ant.MakePluginConfig.execute()
            <-- mtb_enhance.Correct_Gamma.run(ij.process.ImageProcessor)
            <-- mtb_fields.Create_GVF.printArray(double[], int, int)
            <-- mtb_fields.Create_GVF.writeUV(double[], double[], int, int)
            <-- mtb_filters.Rank_Operator.run(ij.process.ImageProcessor)
            <-- mtb_io.Save_Image.save()
            <-- mtb_morphology.CalcOtsuThreshold_Image.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            <-- mtb_morphology.HDomeTransform_3D.run(ij.process.ImageProcessor)
            <-- mtb_morphology.Morph_3D.run(java.lang.String)
            <-- mtb_neurites.Neurit_Detector_2D.createResultDir(java.lang.String)
            <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
            <-- mtb_neurites.Neurit_Detector_2D.process()
            <-- mtb_regions.Label_Components_Sequential.run(ij.process.ImageProcessor)
            <-- mtb_regions.Label_Components_Sequential_3D.run(ij.process.ImageProcessor)
            <-- mtb_regions.Segment_No_Edges3D.run(ij.process.ImageProcessor)
        append(double) *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.saveProfileData(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcProfile(de.unihalle.informatik.MiToBo.datatypes.Region2D, de.unihalle.informatik.MiToBo.morphology.SkeletonTree, ij.process.ImageProcessor, ij.process.ImageProcessor)
            <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.regionToFile(de.unihalle.informatik.MiToBo.datatypes.Region3D, java.lang.String)
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.solve()
            <-- mtb_enhance.Correct_Gamma.run(ij.process.ImageProcessor)
            <-- mtb_morphology.HDomeTransform_3D.run(ij.process.ImageProcessor)
            <-- mtb_neurites.Neurit_Detector_2D.process()
            <-- mtb_regions.Segment_No_Edges3D.run(ij.process.ImageProcessor)
        append(int) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.saveProfileData(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.Image3DToStack()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.createMTBImage(ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.createMTBImage(int, int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.deleteBorder(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.open()
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.open(int[])
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.saveFile(boolean)
            <-- de.unihalle.informatik.MiToBo.morphology.Morphology3D.dilate(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.morphology.StructuringElement)
            <-- de.unihalle.informatik.MiToBo.morphology.Morphology3D.erode(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.morphology.StructuringElement)
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.solve()
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3DParams.getResultingRegions(int, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3DParams.setResultingRegions(java.util.Vector, int, int)
            <-- mtb_neurites.Neurit_Detector_2D.createResultDir(java.lang.String)
            <-- mtb_neurites.Neurit_Detector_2D.process()
            <-- mtb_regions.Label_Components_Sequential.run(ij.process.ImageProcessor)
        append(java.lang.Object) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.tableToString()
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.saveFile(boolean)
            <-- mtb_fields.Create_GVF.writeUV(double[], double[], int, int)
            <-- mtb_io.Save_Image.save()
            <-- mtb_morphology.CalcOtsuThreshold_Image.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            <-- mtb_neurites.Neurit_Detector_2D.process()
        append(java.lang.String) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.applyToImageBatch(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.saveTable()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.tableToString()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setStatus(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.setStatus(java.lang.String, int)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.saveProfileData(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.saveProfileList(java.util.LinkedList, java.lang.String)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcProfile(de.unihalle.informatik.MiToBo.datatypes.Region2D, de.unihalle.informatik.MiToBo.morphology.SkeletonTree, ij.process.ImageProcessor, ij.process.ImageProcessor)
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.save(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.regionToFile(de.unihalle.informatik.MiToBo.datatypes.Region3D, java.lang.String)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.createMTBImage(ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.createMTBImage(int, int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTree.getFileList()
            <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTree.initFromDirectory()
            <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTree.traverseSubdir(java.lang.String, java.lang.String)
            <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTreeNodeData.getSubtreeFileList()
            <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTreeNodeData.printData()
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.ImgOpen(java.lang.String, java.lang.String)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.deleteBorder(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.examine()
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.open()
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.open(int[])
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.setFile(java.lang.String, java.lang.String)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.lang.String, java.lang.String, ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.lang.String, java.lang.String, java.lang.String, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.saveFile(boolean)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.setFile(java.lang.String, java.lang.String)
            <-- de.unihalle.informatik.MiToBo.meta.CvsInfo.getCvsTag(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.meta.xml.MTBxmlIO.saveToFile(org.w3c.dom.Document, java.lang.String)
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.solve()
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3DParams.getResultingRegions(int, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3DParams.setResultingRegions(java.util.Vector, int, int)
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.execute()
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.extractClassSection(java.lang.String)
            <-- de.unihalle.informatik.MiToBo_admin.ant.GetLastCvsTag.execute()
            <-- de.unihalle.informatik.MiToBo_admin.ant.MakePluginConfig.execute()
            <-- mtb_fields.Create_GVF.printArray(double[], int, int)
            <-- mtb_fields.Create_GVF.writeUV(double[], double[], int, int)
            <-- mtb_filters.Rank_Operator.run(ij.process.ImageProcessor)
            <-- mtb_morphology.CalcOtsuThreshold_Image.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            <-- mtb_morphology.HDomeTransform_3D.run(ij.process.ImageProcessor)
            <-- mtb_morphology.Morph_3D.run(java.lang.String)
            <-- mtb_neurites.Neurit_Detector_2D.createResultDir(java.lang.String)
            <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
            <-- mtb_neurites.Neurit_Detector_2D.process()
            <-- mtb_regions.Label_Components_Sequential.run(ij.process.ImageProcessor)
            <-- mtb_regions.Label_Components_Sequential_3D.run(ij.process.ImageProcessor)
            <-- mtb_regions.Segment_No_Edges3D.run(ij.process.ImageProcessor)
        append(long) *
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.solve()
            <-- mtb_regions.Segment_No_Edges3D.run(ij.process.ImageProcessor)
        toString() *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.applyToImageBatch(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.saveTable()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.tableToString()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setStatus(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.setStatus(java.lang.String, int)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.saveProfileData(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.saveProfileList(java.util.LinkedList, java.lang.String)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcProfile(de.unihalle.informatik.MiToBo.datatypes.Region2D, de.unihalle.informatik.MiToBo.morphology.SkeletonTree, ij.process.ImageProcessor, ij.process.ImageProcessor)
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.save(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.Image3DToStack()
            <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.regionToFile(de.unihalle.informatik.MiToBo.datatypes.Region3D, java.lang.String)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.createMTBImage(ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.createMTBImage(int, int, int, int, int, int)
            <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTree.getFileList()
            <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTree.initFromDirectory()
            <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTree.traverseSubdir(java.lang.String, java.lang.String)
            <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTreeNodeData.getSubtreeFileList()
            <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTreeNodeData.printData()
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.ImgOpen(java.lang.String, java.lang.String)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.deleteBorder(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.examine()
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.open()
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.open(int[])
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.setFile(java.lang.String, java.lang.String)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.lang.String, java.lang.String, ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.lang.String, java.lang.String, java.lang.String, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.saveFile(boolean)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.setFile(java.lang.String, java.lang.String)
            <-- de.unihalle.informatik.MiToBo.meta.CvsInfo.getCvsTag(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.meta.xml.MTBxmlIO.saveToFile(org.w3c.dom.Document, java.lang.String)
            <-- de.unihalle.informatik.MiToBo.morphology.Morphology3D.dilate(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.morphology.StructuringElement)
            <-- de.unihalle.informatik.MiToBo.morphology.Morphology3D.erode(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.morphology.StructuringElement)
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.solve()
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3DParams.getResultingRegions(int, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3DParams.setResultingRegions(java.util.Vector, int, int)
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.execute()
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.extractClassSection(java.lang.String)
            <-- de.unihalle.informatik.MiToBo_admin.ant.GetLastCvsTag.execute()
            <-- de.unihalle.informatik.MiToBo_admin.ant.MakePluginConfig.execute()
            <-- mtb_enhance.Correct_Gamma.run(ij.process.ImageProcessor)
            <-- mtb_fields.Create_GVF.printArray(double[], int, int)
            <-- mtb_fields.Create_GVF.writeUV(double[], double[], int, int)
            <-- mtb_filters.Rank_Operator.run(ij.process.ImageProcessor)
            <-- mtb_io.Save_Image.save()
            <-- mtb_morphology.CalcOtsuThreshold_Image.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            <-- mtb_morphology.HDomeTransform_3D.run(ij.process.ImageProcessor)
            <-- mtb_morphology.Morph_3D.run(java.lang.String)
            <-- mtb_neurites.Neurit_Detector_2D.createResultDir(java.lang.String)
            <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
            <-- mtb_neurites.Neurit_Detector_2D.process()
            <-- mtb_regions.Label_Components_Sequential.run(ij.process.ImageProcessor)
            <-- mtb_regions.Label_Components_Sequential_3D.run(ij.process.ImageProcessor)
            <-- mtb_regions.Segment_No_Edges3D.run(ij.process.ImageProcessor)
    System *
        arraycopy(java.lang.Object, int, java.lang.Object, int, int) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$Subroutine.values()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageDouble.duplicate()
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.duplicate()
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$Mode.values()
        currentTimeMillis() *
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.solve()
            <-- mtb_regions.Segment_No_Edges3D.run(ij.process.ImageProcessor)
        err *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.saveTable()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.saveProfileData(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.saveProfileList(java.util.LinkedList, java.lang.String)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcLongestPathProfiles(ij.ImagePlus, ij.ImagePlus, ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.save(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.Image3D(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.Image3DToStack()
            <-- de.unihalle.informatik.MiToBo.meta.CvsInfo.getCvsTag(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.meta.MTBMetaData.MTBMetaData()
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.execute()
            <-- de.unihalle.informatik.MiToBo_admin.ant.GetLastCvsTag.execute()
            <-- de.unihalle.informatik.MiToBo_admin.ant.MakePluginConfig.execute()
            <-- mtb_regions.Segment_No_Edges3D.setup(java.lang.String, ij.ImagePlus)
        getProperty(java.lang.String) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.GranuleDetectorGUI$GranuleTableModel(de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI, int, int)
            <-- mtb_io.Open_Image.static {}
            <-- mtb_io.Save_Image.static {}
        in *
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.execute()
        out *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.applyToImageBatch(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.actionPerformed(java.awt.event.ActionEvent)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcProfile(de.unihalle.informatik.MiToBo.datatypes.Region2D, de.unihalle.informatik.MiToBo.morphology.SkeletonTree, ij.process.ImageProcessor, ij.process.ImageProcessor)
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.binning(int)
            <-- de.unihalle.informatik.MiToBo.datatypes.Image3D.setVoxels(int[])
            <-- de.unihalle.informatik.MiToBo.datatypes.TreeNode.printData()
            <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTree.initFromDirectory()
            <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTreeNodeData.printData()
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.deleteBorder(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.examine()
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.open()
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.open(int[])
            <-- de.unihalle.informatik.MiToBo.io.files.ImgSave.saveFile(boolean)
            <-- de.unihalle.informatik.MiToBo.meta.MTBOpBasePlugin.run(ij.process.ImageProcessor)
            <-- de.unihalle.informatik.MiToBo.meta.xml.MTBxmlIO.saveToFile(org.w3c.dom.Document, java.lang.String)
            <-- de.unihalle.informatik.MiToBo.morphology.Morphology3D.dilate(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.morphology.StructuringElement)
            <-- de.unihalle.informatik.MiToBo.morphology.Morphology3D.erode(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.morphology.StructuringElement)
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.getPoints()
            <-- de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.solve()
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.execute()
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.getDependencies(java.lang.String)
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepListTest.testGetAllRequiredClasses()
            <-- de.unihalle.informatik.MiToBo_admin.ant.GetLastCvsTag.execute()
            <-- de.unihalle.informatik.MiToBo_admin.ant.MakePluginConfig.execute()
            <-- mtb_enhance.Correct_Gamma.run(ij.process.ImageProcessor)
            <-- mtb_fields.Create_GVF.BoundEnsure(double[], int, int)
            <-- mtb_fields.Create_GVF.printArray(double[], int, int)
            <-- mtb_fields.Create_GVF.run(ij.process.ImageProcessor)
            <-- mtb_fields.Create_GVF.writeUV(double[], double[], int, int)
            <-- mtb_io.Open_Image.actionPerformed(java.awt.event.ActionEvent)
            <-- mtb_io.Open_Image.open()
            <-- mtb_io.Save_Image.save()
            <-- mtb_morphology.Morph_3D.run(java.lang.String)
            <-- mtb_neurites.Neurit_Detector_2D.activeContours(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, java.util.Vector, int, double)
            <-- mtb_neurites.Neurit_Detector_2D.createResultDir(java.lang.String)
            <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
            <-- mtb_neurites.Neurit_Detector_2D.process()
            <-- mtb_neurites.Neurit_Detector_2D.run(java.lang.String)
            <-- mtb_regions.Segment_No_Edges3D.run(ij.process.ImageProcessor)
    Thread *
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.actionPerformed(java.awt.event.ActionEvent)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.batchDetector
        Thread(java.lang.Runnable) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.actionPerformed(java.awt.event.ActionEvent)
        interrupt() *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.actionPerformed(java.awt.event.ActionEvent)
        start() *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.actionPerformed(java.awt.event.ActionEvent)
    Throwable *
        <-- de.unihalle.informatik.MiToBo.meta.xml.MTBxmlIO.saveToFile(org.w3c.dom.Document, java.lang.String)
        printStackTrace() *
            <-- de.unihalle.informatik.MiToBo.meta.xml.MTBxmlIO.saveToFile(org.w3c.dom.Document, java.lang.String)
java.text *
    NumberFormat *
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        format(double) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        getInstance() *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        setMaximumFractionDigits(int) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
    SimpleDateFormat *
        SimpleDateFormat(java.lang.String) *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.getDirName()
            <-- mtb_neurites.Neurit_Detector_2D.getDate()
        format(java.util.Date) *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.getDirName()
            <-- mtb_neurites.Neurit_Detector_2D.getDate()
java.util *
    Arrays *
        sort(double[]) *
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.rankedValueAt(int, int, int, int, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double[])
    Date *
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.getDirName()
        <-- mtb_neurites.Neurit_Detector_2D.getDate()
        Date() *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.getDirName()
            <-- mtb_neurites.Neurit_Detector_2D.getDate()
    HashMap *
        HashMap() *
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential.regionSegmentation(ij.process.ImageProcessor, boolean)
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3D.regionSegmentation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, boolean, int, int)
        clear() *
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential.regionSegmentation(ij.process.ImageProcessor, boolean)
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3D.regionSegmentation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, boolean, int, int)
        containsKey(java.lang.Object) *
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential.regionSegmentation(ij.process.ImageProcessor, boolean)
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3D.regionSegmentation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, boolean, int, int)
        get(java.lang.Object) *
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential.regionSegmentation(ij.process.ImageProcessor, boolean)
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3D.regionSegmentation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, boolean, int, int)
        put(java.lang.Object, java.lang.Object) *
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential.regionSegmentation(ij.process.ImageProcessor, boolean)
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3D.regionSegmentation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, boolean, int, int)
    Hashtable *
        <-- de.unihalle.informatik.MiToBo.meta.MTBOpParams.MTBOpParams()
        <-- de.unihalle.informatik.MiToBo.meta.MTBOpParams.MTBOpParams(de.unihalle.informatik.MiToBo.meta.MTBMetaData)
        <-- de.unihalle.informatik.MiToBo.meta.MTBOpParams.getParameter(java.lang.String)
        <-- de.unihalle.informatik.MiToBo.meta.MTBOpParams.paramTable
        <-- de.unihalle.informatik.MiToBo.meta.MTBOpParams.setParameter(java.lang.String, java.lang.Object)
        <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.ExtractClassDepList()
        <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.classesDone
        <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.getAllRequiredClasses(java.util.LinkedList, boolean)
        Hashtable() *
            <-- de.unihalle.informatik.MiToBo.meta.MTBOpParams.MTBOpParams()
            <-- de.unihalle.informatik.MiToBo.meta.MTBOpParams.MTBOpParams(de.unihalle.informatik.MiToBo.meta.MTBMetaData)
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.ExtractClassDepList()
        containsKey(java.lang.Object) *
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.getAllRequiredClasses(java.util.LinkedList, boolean)
        get(java.lang.Object) *
            <-- de.unihalle.informatik.MiToBo.meta.MTBOpParams.getParameter(java.lang.String)
        put(java.lang.Object, java.lang.Object) *
            <-- de.unihalle.informatik.MiToBo.meta.MTBOpParams.setParameter(java.lang.String, java.lang.Object)
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.getAllRequiredClasses(java.util.LinkedList, boolean)
    Iterator *
        <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential.regionSegmentation(ij.process.ImageProcessor, boolean)
        <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3D.regionSegmentation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, boolean, int, int)
        <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.execute()
        <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepListTest.testGetAllRequiredClasses()
        hasNext() *
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential.regionSegmentation(ij.process.ImageProcessor, boolean)
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3D.regionSegmentation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, boolean, int, int)
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.execute()
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepListTest.testGetAllRequiredClasses()
        next() *
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential.regionSegmentation(ij.process.ImageProcessor, boolean)
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3D.regionSegmentation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, boolean, int, int)
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.execute()
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepListTest.testGetAllRequiredClasses()
    LinkedHashSet *
        <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential.regionSegmentation(ij.process.ImageProcessor, boolean)
        <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3D.regionSegmentation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, boolean, int, int)
        LinkedHashSet() *
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential.regionSegmentation(ij.process.ImageProcessor, boolean)
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3D.regionSegmentation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, boolean, int, int)
        add(java.lang.Object) *
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential.regionSegmentation(ij.process.ImageProcessor, boolean)
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3D.regionSegmentation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, boolean, int, int)
        iterator() *
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential.regionSegmentation(ij.process.ImageProcessor, boolean)
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3D.regionSegmentation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, boolean, int, int)
    LinkedList *
        <-- de.unihalle.informatik.MiToBo.apps.cells2D.CellSegmentAlgos.getMetaParams()
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.getMetaParams()
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.saveProfileList(java.util.LinkedList, java.lang.String)
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcLongestPathProfiles(ij.ImagePlus, ij.ImagePlus, ij.ImagePlus)
        <-- de.unihalle.informatik.MiToBo.enhance.HistogramEqualization.getMetaParams()
        <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.getMetaParams()
        <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.getMetaParams()
        <-- de.unihalle.informatik.MiToBo.meta.MTBOpBase.getMetaParams()
        <-- de.unihalle.informatik.MiToBo.meta.MTBOpBasePlugin.getMetaParams()
        <-- de.unihalle.informatik.MiToBo.meta.MTBOpParams.logToMetaDataObj_start(de.unihalle.informatik.MiToBo.meta.MTBOpBase)
        <-- de.unihalle.informatik.MiToBo.morphology.HDomeTransform3D.getMetaParams()
        <-- de.unihalle.informatik.MiToBo.morphology.HDomeTransform3DParams.getMetaParams()
        <-- de.unihalle.informatik.MiToBo.morphology.ImgDilate.getMetaParams()
        <-- de.unihalle.informatik.MiToBo.morphology.ImgErode.getMetaParams()
        <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3D.getMetaParams()
        <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3DParams.getMetaParams()
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu.getMetaParams()
        <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.getMetaParams()
        <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.extractClassSection(java.lang.String)
        <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.extractPackageSection(java.lang.String)
        <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.getAllRequiredClasses(java.util.LinkedList, boolean)
        <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.getDependencies(java.lang.String)
        <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.inputFileContents
        <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.readDependencyLogfile()
        <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepListTest.testExtractClassSection()
        <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepListTest.testGetAllRequiredClasses()
        <-- mtb_demo.Demo_MTBOpBase_Plugin.getMetaParams()
        <-- mtb_filters.Rank_Operator.getMetaParams()
        <-- mtb_granules.Granule_Detector_2D.getMetaParams()
        <-- mtb_morphology.CalcOtsuThreshold_Image.getMetaParams()
        <-- mtb_morphology.HDomeTransform_3D.getMetaParams()
        <-- mtb_neurites.Neurit_Detector_2D.process()
        <-- mtb_regions.Label_Components_Sequential_3D.getMetaParams()
        LinkedList() *
            <-- de.unihalle.informatik.MiToBo.apps.cells2D.CellSegmentAlgos.getMetaParams()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.getMetaParams()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcLongestPathProfiles(ij.ImagePlus, ij.ImagePlus, ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.enhance.HistogramEqualization.getMetaParams()
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.getMetaParams()
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.getMetaParams()
            <-- de.unihalle.informatik.MiToBo.meta.MTBOpBasePlugin.getMetaParams()
            <-- de.unihalle.informatik.MiToBo.morphology.HDomeTransform3D.getMetaParams()
            <-- de.unihalle.informatik.MiToBo.morphology.HDomeTransform3DParams.getMetaParams()
            <-- de.unihalle.informatik.MiToBo.morphology.ImgDilate.getMetaParams()
            <-- de.unihalle.informatik.MiToBo.morphology.ImgErode.getMetaParams()
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3D.getMetaParams()
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3DParams.getMetaParams()
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu.getMetaParams()
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.getMetaParams()
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.execute()
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.extractClassSection(java.lang.String)
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.extractPackageSection(java.lang.String)
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.readDependencyLogfile()
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepListTest.testExtractClassSection()
            <-- mtb_demo.Demo_MTBOpBase_Plugin.getMetaParams()
            <-- mtb_filters.Rank_Operator.getMetaParams()
            <-- mtb_granules.Granule_Detector_2D.getMetaParams()
            <-- mtb_morphology.CalcOtsuThreshold_Image.getMetaParams()
            <-- mtb_morphology.HDomeTransform_3D.getMetaParams()
            <-- mtb_regions.Label_Components_Sequential_3D.getMetaParams()
        add(java.lang.Object) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.getMetaParams()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcLongestPathProfiles(ij.ImagePlus, ij.ImagePlus, ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.getMetaParams()
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.getMetaParams()
            <-- de.unihalle.informatik.MiToBo.morphology.HDomeTransform3D.getMetaParams()
            <-- de.unihalle.informatik.MiToBo.morphology.HDomeTransform3DParams.getMetaParams()
            <-- de.unihalle.informatik.MiToBo.morphology.ImgDilate.getMetaParams()
            <-- de.unihalle.informatik.MiToBo.morphology.ImgErode.getMetaParams()
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3D.getMetaParams()
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3DParams.getMetaParams()
            <-- de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.getMetaParams()
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.execute()
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.extractClassSection(java.lang.String)
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.extractPackageSection(java.lang.String)
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.readDependencyLogfile()
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepListTest.testExtractClassSection()
            <-- mtb_demo.Demo_MTBOpBase_Plugin.getMetaParams()
            <-- mtb_filters.Rank_Operator.getMetaParams()
            <-- mtb_morphology.HDomeTransform_3D.getMetaParams()
            <-- mtb_regions.Label_Components_Sequential_3D.getMetaParams()
        equals(java.lang.Object) *
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepListTest.testExtractClassSection()
        get(int) *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.saveProfileList(java.util.LinkedList, java.lang.String)
            <-- de.unihalle.informatik.MiToBo.meta.MTBOpParams.logToMetaDataObj_start(de.unihalle.informatik.MiToBo.meta.MTBOpBase)
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.execute()
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.extractClassSection(java.lang.String)
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.extractPackageSection(java.lang.String)
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.getAllRequiredClasses(java.util.LinkedList, boolean)
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.getDependencies(java.lang.String)
            <-- mtb_neurites.Neurit_Detector_2D.process()
        size() *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.saveProfileList(java.util.LinkedList, java.lang.String)
            <-- de.unihalle.informatik.MiToBo.meta.MTBOpParams.logToMetaDataObj_start(de.unihalle.informatik.MiToBo.meta.MTBOpBase)
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.execute()
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.extractClassSection(java.lang.String)
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.extractPackageSection(java.lang.String)
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.getAllRequiredClasses(java.util.LinkedList, boolean)
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.getDependencies(java.lang.String)
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepListTest.testExtractClassSection()
            <-- mtb_neurites.Neurit_Detector_2D.process()
    Properties *
        <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.createMTBImage(ij.ImagePlus)
        containsKey(java.lang.Object) *
            <-- de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.createMTBImage(ij.ImagePlus)
    Random *
        Random() *
            <-- de.unihalle.informatik.MiToBo.apps.cells2D.CellSegmentAlgos.voronoiTesselation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcProfile(de.unihalle.informatik.MiToBo.datatypes.Region2D, de.unihalle.informatik.MiToBo.morphology.SkeletonTree, ij.process.ImageProcessor, ij.process.ImageProcessor)
            <-- mtb_regions.Label_Components_Recursive.run(ij.process.ImageProcessor)
            <-- mtb_regions.Label_Components_Sequential.run(ij.process.ImageProcessor)
            <-- mtb_regions.Label_Components_Sequential_3D.run(ij.process.ImageProcessor)
        nextInt() *
            <-- de.unihalle.informatik.MiToBo.apps.cells2D.CellSegmentAlgos.voronoiTesselation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcProfile(de.unihalle.informatik.MiToBo.datatypes.Region2D, de.unihalle.informatik.MiToBo.morphology.SkeletonTree, ij.process.ImageProcessor, ij.process.ImageProcessor)
            <-- mtb_regions.Label_Components_Recursive.run(ij.process.ImageProcessor)
            <-- mtb_regions.Label_Components_Sequential.run(ij.process.ImageProcessor)
            <-- mtb_regions.Label_Components_Sequential_3D.run(ij.process.ImageProcessor)
    StringTokenizer *
        StringTokenizer(java.lang.String, java.lang.String) *
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(java.lang.String)
        hasMoreTokens() *
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(java.lang.String)
        nextToken() *
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(java.lang.String)
    TreeSet *
        <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.ExtractClassDepList()
        <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.allDeps
        <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.execute()
        <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.getAllRequiredClasses(java.util.LinkedList, boolean)
        <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.getDependencies()
        <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepListTest.testGetAllRequiredClasses()
        TreeSet() *
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.ExtractClassDepList()
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.execute()
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepListTest.testGetAllRequiredClasses()
        add(java.lang.Object) *
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.execute()
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.getAllRequiredClasses(java.util.LinkedList, boolean)
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepListTest.testGetAllRequiredClasses()
        equals(java.lang.Object) *
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepListTest.testGetAllRequiredClasses()
        iterator() *
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.execute()
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepListTest.testGetAllRequiredClasses()
    Vector *
        <-- de.unihalle.informatik.MiToBo.apps.cells2D.CellSegmentAlgos.voronoiTesselation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.applyToImageBatch(java.lang.String)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.run()
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.insertData(java.util.Vector)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.showResultData(java.util.Vector)
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.coreButs
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.enableAll(boolean)
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.neuritButs
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.neuritChan
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.resetSettings()
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.saveProfileData(java.lang.String)
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcLongestPathProfiles(ij.ImagePlus, ij.ImagePlus, ij.ImagePlus)
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcProfile(de.unihalle.informatik.MiToBo.datatypes.Region2D, de.unihalle.informatik.MiToBo.morphology.SkeletonTree, ij.process.ImageProcessor, ij.process.ImageProcessor)
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.getNeuritePathTrees(ij.process.ImageProcessor, ij.process.ImageProcessor, ij.process.ImageProcessor, java.util.Vector)
        <-- de.unihalle.informatik.MiToBo.datatypes.Contour2D.Contour2D()
        <-- de.unihalle.informatik.MiToBo.datatypes.Contour2D.Contour2D(java.util.Vector)
        <-- de.unihalle.informatik.MiToBo.datatypes.Contour2D.addInner(de.unihalle.informatik.MiToBo.datatypes.Contour2D)
        <-- de.unihalle.informatik.MiToBo.datatypes.Contour2D.addPixel(int, int)
        <-- de.unihalle.informatik.MiToBo.datatypes.Contour2D.countInner()
        <-- de.unihalle.informatik.MiToBo.datatypes.Contour2D.getAllInner()
        <-- de.unihalle.informatik.MiToBo.datatypes.Contour2D.getInner(int)
        <-- de.unihalle.informatik.MiToBo.datatypes.Contour2D.getPointAt(int)
        <-- de.unihalle.informatik.MiToBo.datatypes.Contour2D.getPoints()
        <-- de.unihalle.informatik.MiToBo.datatypes.Contour2D.inner
        <-- de.unihalle.informatik.MiToBo.datatypes.Contour2D.points
        <-- de.unihalle.informatik.MiToBo.datatypes.Contour2D.setInner(java.util.Vector)
        <-- de.unihalle.informatik.MiToBo.datatypes.Region2D.Region2D()
        <-- de.unihalle.informatik.MiToBo.datatypes.Region2D.addPixel(int, int)
        <-- de.unihalle.informatik.MiToBo.datatypes.Region2D.getPoints()
        <-- de.unihalle.informatik.MiToBo.datatypes.Region2D.points
        <-- de.unihalle.informatik.MiToBo.datatypes.Region2D.toMTBImageByte(java.lang.String, int, int)
        <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.Region3D()
        <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.Region3D(java.util.Vector)
        <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.addPoint(de.unihalle.informatik.MiToBo.datatypes.Point3D)
        <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.addPoint(double, double, double)
        <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.calcCentre(java.util.Vector)
        <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.getPoints()
        <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.getSizeX()
        <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.getSizeY()
        <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.getSizeZ()
        <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.points
        <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.regionToFile(de.unihalle.informatik.MiToBo.datatypes.Region3D, java.lang.String)
        <-- de.unihalle.informatik.MiToBo.datatypes.Snake.Snake()
        <-- de.unihalle.informatik.MiToBo.datatypes.Snake.Snake(java.util.Vector, boolean)
        <-- de.unihalle.informatik.MiToBo.datatypes.Snake.getPoints()
        <-- de.unihalle.informatik.MiToBo.datatypes.Snake.getSnakePolygon()
        <-- de.unihalle.informatik.MiToBo.datatypes.Snake.points
        <-- de.unihalle.informatik.MiToBo.datatypes.Snake.setPoints(java.util.Vector)
        <-- de.unihalle.informatik.MiToBo.datatypes.Snake.toMTBImage(java.lang.String, int, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        <-- de.unihalle.informatik.MiToBo.datatypes.Snake.toMTBImageByte(java.lang.String, int, int)
        <-- de.unihalle.informatik.MiToBo.datatypes.TreeNode.TreeNode(de.unihalle.informatik.MiToBo.datatypes.TreeNodeData)
        <-- de.unihalle.informatik.MiToBo.datatypes.TreeNode.addChild(de.unihalle.informatik.MiToBo.datatypes.TreeNode)
        <-- de.unihalle.informatik.MiToBo.datatypes.TreeNode.childs
        <-- de.unihalle.informatik.MiToBo.datatypes.TreeNode.getChilds()
        <-- de.unihalle.informatik.MiToBo.datatypes.TreeNode.printData()
        <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.RankOperator()
        <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.addStatusListener(loci.formats.StatusListener)
        <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.fireStatusEvent(int, int, java.lang.String)
        <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.getStatusListeners()
        <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.m_statusListeners
        <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.removeStatusListener(loci.formats.StatusListener)
        <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTree.getFileList()
        <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTreeNodeData.DirectoryTreeNodeData(java.lang.String)
        <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTreeNodeData.addFile(java.lang.String)
        <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTreeNodeData.files
        <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTreeNodeData.getFileList()
        <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTreeNodeData.getSubtreeFileList()
        <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTreeNodeData.printData()
        <-- de.unihalle.informatik.MiToBo.morphology.ComponentPostprocess.EraseSmallComponents(ij.process.ImageProcessor, int)
        <-- de.unihalle.informatik.MiToBo.morphology.ComponentPostprocess.LinkAdjacentComponents(ij.process.ImageProcessor, double)
        <-- de.unihalle.informatik.MiToBo.morphology.ComponentPostprocess.endPointHash
        <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.expandPath(de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData, int, int)
        <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.getAllPixels()
        <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.getLongestPath()
        <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.getSpinesAlongPath(int)
        <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.SkeletonTreeNodeData(int, int)
        <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.appendPoint(int, int)
        <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.getAllPathPixels(java.util.Vector)
        <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.getFirstPixels(java.util.Vector, int, int)
        <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.getLongestPath(java.util.Vector)
        <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.getMaxLength()
        <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.getPoints()
        <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.getSpinesAlongPath(java.util.Vector, int)
        <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.pathPoints
        <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.Resampler(Jama.Matrix, Jama.Matrix, double)
        <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.Resampler(java.util.Vector, double)
        <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.getPoints()
        <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.get_X_coords()
        <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.get_Y_coords()
        <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.get_size()
        <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.org_x
        <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.org_y
        <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.rearrange(int)
        <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.resampling()
        <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.SnakeAlgos.SnakeAlgos(de.unihalle.informatik.MiToBo.datatypes.Snake)
        <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.SnakeAlgos.addAllPoints()
        <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.SnakeAlgos.calcSnake(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double[], double[], int, double)
        <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.SnakeAlgos.snakePoints
        <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsRecursive.regionSegmentation(ij.process.ImageProcessor)
        <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential.regionSegmentation(ij.process.ImageProcessor, boolean)
        <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3D.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3D.regionSegmentation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, boolean, int, int)
        <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3DParams.getResultingRegions(int, int)
        <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3DParams.setResultingRegions(java.util.Vector, int, int)
        <-- de.unihalle.informatik.MiToBo.statistics.RegionSetStatistics.calcAverageSize(java.util.Vector)
        <-- mtb_contours.Contour_on_Labeled_Components.add_InnerContours(java.util.Vector, java.util.Vector)
        <-- mtb_contours.Contour_on_Labeled_Components.get_ContourImage(java.util.Vector)
        <-- mtb_contours.Contour_on_Labeled_Components.get_Contours(ij.process.ImageProcessor, java.util.Vector)
        <-- mtb_contours.Contour_on_Labeled_Components.get_ContoursOnRegions(ij.process.ImageProcessor, java.util.Vector)
        <-- mtb_contours.Contour_on_Labeled_Components.get_OuterContours(ij.process.ImageProcessor, java.util.Vector)
        <-- mtb_contours.Contour_on_Labeled_Components.run(ij.process.ImageProcessor)
        <-- mtb_filters.Rank_Operator.parameterDialog()
        <-- mtb_morphology.Threshold_Image.dialogItemChanged(ij.gui.GenericDialog, java.awt.AWTEvent)
        <-- mtb_neurites.Neurit_Detector_2D.activeContours(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, java.util.Vector, int, double)
        <-- mtb_neurites.Neurit_Detector_2D.drawSnakeRegion(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.Region2D)
        <-- mtb_neurites.Neurit_Detector_2D.getControlPoints(de.unihalle.informatik.MiToBo.datatypes.Contour2D)
        <-- mtb_neurites.Neurit_Detector_2D.getSnakeRegion(java.awt.Polygon)
        <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
        <-- mtb_neurites.Neurit_Detector_2D.process()
        <-- mtb_neurites.Neurit_Detector_2D.removeCellBody(de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        <-- mtb_neurites.Neurit_Detector_2D.testRegions(de.unihalle.informatik.MiToBo.datatypes.Region2D, de.unihalle.informatik.MiToBo.datatypes.Region2D)
        <-- mtb_neurites.Neurit_Detector_2D.testRegions2(de.unihalle.informatik.MiToBo.datatypes.Region2D, de.unihalle.informatik.MiToBo.datatypes.Region2D)
        <-- mtb_regions.Label_Components_Recursive.run(ij.process.ImageProcessor)
        <-- mtb_regions.Label_Components_Sequential.run(ij.process.ImageProcessor)
        <-- mtb_regions.Label_Components_Sequential_3D.run(ij.process.ImageProcessor)
        Vector() *
            <-- de.unihalle.informatik.MiToBo.apps.cells2D.CellSegmentAlgos.voronoiTesselation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.applyToImageBatch(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.resetSettings()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcProfile(de.unihalle.informatik.MiToBo.datatypes.Region2D, de.unihalle.informatik.MiToBo.morphology.SkeletonTree, ij.process.ImageProcessor, ij.process.ImageProcessor)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.getNeuritePathTrees(ij.process.ImageProcessor, ij.process.ImageProcessor, ij.process.ImageProcessor, java.util.Vector)
            <-- de.unihalle.informatik.MiToBo.datatypes.Contour2D.Contour2D()
            <-- de.unihalle.informatik.MiToBo.datatypes.Contour2D.Contour2D(java.util.Vector)
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.datatypes.Region2D.Region2D()
            <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.Region3D()
            <-- de.unihalle.informatik.MiToBo.datatypes.TreeNode.TreeNode(de.unihalle.informatik.MiToBo.datatypes.TreeNodeData)
            <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTree.getFileList()
            <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTreeNodeData.DirectoryTreeNodeData(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTreeNodeData.getSubtreeFileList()
            <-- de.unihalle.informatik.MiToBo.morphology.ComponentPostprocess.LinkAdjacentComponents(ij.process.ImageProcessor, double)
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.expandPath(de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData, int, int)
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.getAllPixels()
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.getLongestPath()
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.getSpinesAlongPath(int)
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.SkeletonTreeNodeData(int, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.Resampler(Jama.Matrix, Jama.Matrix, double)
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.Resampler(java.util.Vector, double)
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.getPoints()
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.rearrange(int)
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.resampling()
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.SnakeAlgos.addAllPoints()
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsRecursive.regionSegmentation(ij.process.ImageProcessor)
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential.regionSegmentation(ij.process.ImageProcessor, boolean)
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3D.regionSegmentation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, boolean, int, int)
            <-- mtb_contours.Contour_on_Labeled_Components.add_InnerContours(java.util.Vector, java.util.Vector)
            <-- mtb_contours.Contour_on_Labeled_Components.get_OuterContours(ij.process.ImageProcessor, java.util.Vector)
            <-- mtb_neurites.Neurit_Detector_2D.getControlPoints(de.unihalle.informatik.MiToBo.datatypes.Contour2D)
        Vector(int) *
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.RankOperator()
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.getPoints()
            <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
        add(int, java.lang.Object) *
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.rearrange(int)
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.resampling()
        add(java.lang.Object) *
            <-- de.unihalle.informatik.MiToBo.apps.cells2D.CellSegmentAlgos.voronoiTesselation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.applyToImageBatch(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcProfile(de.unihalle.informatik.MiToBo.datatypes.Region2D, de.unihalle.informatik.MiToBo.morphology.SkeletonTree, ij.process.ImageProcessor, ij.process.ImageProcessor)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.getNeuritePathTrees(ij.process.ImageProcessor, ij.process.ImageProcessor, ij.process.ImageProcessor, java.util.Vector)
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.addStatusListener(loci.formats.StatusListener)
            <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTree.getFileList()
            <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTreeNodeData.addFile(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTreeNodeData.getSubtreeFileList()
            <-- de.unihalle.informatik.MiToBo.morphology.ComponentPostprocess.LinkAdjacentComponents(ij.process.ImageProcessor, double)
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.expandPath(de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData, int, int)
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.appendPoint(int, int)
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.getAllPathPixels(java.util.Vector)
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.getFirstPixels(java.util.Vector, int, int)
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.getLongestPath(java.util.Vector)
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.Resampler(Jama.Matrix, Jama.Matrix, double)
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.Resampler(java.util.Vector, double)
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential.regionSegmentation(ij.process.ImageProcessor, boolean)
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3D.regionSegmentation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, boolean, int, int)
        addElement(java.lang.Object) *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.resetSettings()
            <-- de.unihalle.informatik.MiToBo.datatypes.Contour2D.addInner(de.unihalle.informatik.MiToBo.datatypes.Contour2D)
            <-- de.unihalle.informatik.MiToBo.datatypes.Contour2D.addPixel(int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.datatypes.Region2D.addPixel(int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.addPoint(de.unihalle.informatik.MiToBo.datatypes.Point3D)
            <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.addPoint(double, double, double)
            <-- de.unihalle.informatik.MiToBo.datatypes.TreeNode.addChild(de.unihalle.informatik.MiToBo.datatypes.TreeNode)
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.getPoints()
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.SnakeAlgos.addAllPoints()
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsRecursive.regionSegmentation(ij.process.ImageProcessor)
            <-- mtb_contours.Contour_on_Labeled_Components.add_InnerContours(java.util.Vector, java.util.Vector)
            <-- mtb_contours.Contour_on_Labeled_Components.get_OuterContours(ij.process.ImageProcessor, java.util.Vector)
            <-- mtb_neurites.Neurit_Detector_2D.getControlPoints(de.unihalle.informatik.MiToBo.datatypes.Contour2D)
            <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
        clear() *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcProfile(de.unihalle.informatik.MiToBo.datatypes.Region2D, de.unihalle.informatik.MiToBo.morphology.SkeletonTree, ij.process.ImageProcessor, ij.process.ImageProcessor)
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential.regionSegmentation(ij.process.ImageProcessor, boolean)
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3D.regionSegmentation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, boolean, int, int)
        contains(java.lang.Object) *
            <-- mtb_neurites.Neurit_Detector_2D.testRegions(de.unihalle.informatik.MiToBo.datatypes.Region2D, de.unihalle.informatik.MiToBo.datatypes.Region2D)
            <-- mtb_neurites.Neurit_Detector_2D.testRegions2(de.unihalle.informatik.MiToBo.datatypes.Region2D, de.unihalle.informatik.MiToBo.datatypes.Region2D)
        elementAt(int) *
            <-- de.unihalle.informatik.MiToBo.apps.cells2D.CellSegmentAlgos.voronoiTesselation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.enableAll(boolean)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.resetSettings()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.saveProfileData(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcLongestPathProfiles(ij.ImagePlus, ij.ImagePlus, ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcProfile(de.unihalle.informatik.MiToBo.datatypes.Region2D, de.unihalle.informatik.MiToBo.morphology.SkeletonTree, ij.process.ImageProcessor, ij.process.ImageProcessor)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.getNeuritePathTrees(ij.process.ImageProcessor, ij.process.ImageProcessor, ij.process.ImageProcessor, java.util.Vector)
            <-- de.unihalle.informatik.MiToBo.datatypes.Contour2D.getInner(int)
            <-- de.unihalle.informatik.MiToBo.datatypes.Contour2D.getPointAt(int)
            <-- de.unihalle.informatik.MiToBo.datatypes.Region2D.toMTBImageByte(java.lang.String, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.calcCentre(java.util.Vector)
            <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.getSizeX()
            <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.getSizeY()
            <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.getSizeZ()
            <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.regionToFile(de.unihalle.informatik.MiToBo.datatypes.Region3D, java.lang.String)
            <-- de.unihalle.informatik.MiToBo.datatypes.Snake.getSnakePolygon()
            <-- de.unihalle.informatik.MiToBo.datatypes.Snake.toMTBImage(java.lang.String, int, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.datatypes.Snake.toMTBImageByte(java.lang.String, int, int)
            <-- de.unihalle.informatik.MiToBo.morphology.ComponentPostprocess.EraseSmallComponents(ij.process.ImageProcessor, int)
            <-- de.unihalle.informatik.MiToBo.morphology.ComponentPostprocess.LinkAdjacentComponents(ij.process.ImageProcessor, double)
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.expandPath(de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData, int, int)
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.getAllPathPixels(java.util.Vector)
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.getFirstPixels(java.util.Vector, int, int)
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.getLongestPath(java.util.Vector)
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.getMaxLength()
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.getSpinesAlongPath(java.util.Vector, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.Resampler(java.util.Vector, double)
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.getPoints()
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.get_X_coords()
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.get_Y_coords()
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.rearrange(int)
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.resampling()
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.SnakeAlgos.addAllPoints()
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.SnakeAlgos.calcSnake(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double[], double[], int, double)
            <-- de.unihalle.informatik.MiToBo.statistics.RegionSetStatistics.calcAverageSize(java.util.Vector)
            <-- mtb_contours.Contour_on_Labeled_Components.add_InnerContours(java.util.Vector, java.util.Vector)
            <-- mtb_contours.Contour_on_Labeled_Components.get_ContourImage(java.util.Vector)
            <-- mtb_contours.Contour_on_Labeled_Components.get_OuterContours(ij.process.ImageProcessor, java.util.Vector)
            <-- mtb_neurites.Neurit_Detector_2D.drawSnakeRegion(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.Region2D)
            <-- mtb_neurites.Neurit_Detector_2D.getSnakeRegion(java.awt.Polygon)
            <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
            <-- mtb_neurites.Neurit_Detector_2D.removeCellBody(de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            <-- mtb_neurites.Neurit_Detector_2D.testRegions(de.unihalle.informatik.MiToBo.datatypes.Region2D, de.unihalle.informatik.MiToBo.datatypes.Region2D)
            <-- mtb_neurites.Neurit_Detector_2D.testRegions2(de.unihalle.informatik.MiToBo.datatypes.Region2D, de.unihalle.informatik.MiToBo.datatypes.Region2D)
            <-- mtb_regions.Label_Components_Recursive.run(ij.process.ImageProcessor)
            <-- mtb_regions.Label_Components_Sequential.run(ij.process.ImageProcessor)
            <-- mtb_regions.Label_Components_Sequential_3D.run(ij.process.ImageProcessor)
        get(int) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.applyToImageBatch(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.insertData(java.util.Vector)
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.datatypes.TreeNode.printData()
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.fireStatusEvent(int, int, java.lang.String)
            <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTree.getFileList()
            <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTreeNodeData.getSubtreeFileList()
            <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTreeNodeData.printData()
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential.regionSegmentation(ij.process.ImageProcessor, boolean)
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3D.regionSegmentation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, boolean, int, int)
            <-- mtb_filters.Rank_Operator.parameterDialog()
            <-- mtb_morphology.Threshold_Image.dialogItemChanged(ij.gui.GenericDialog, java.awt.AWTEvent)
            <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
        remove(int) *
            <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
        remove(java.lang.Object) *
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.removeStatusListener(loci.formats.StatusListener)
        removeAllElements() *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
        removeElementAt(int) *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcLongestPathProfiles(ij.ImagePlus, ij.ImagePlus, ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.resampling()
            <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
        set(int, java.lang.Object) *
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential.regionSegmentation(ij.process.ImageProcessor, boolean)
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3D.regionSegmentation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, boolean, int, int)
        setElementAt(java.lang.Object, int) *
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.SnakeAlgos.calcSnake(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double[], double[], int, double)
        setSize(int) *
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.resampling()
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.SnakeAlgos.calcSnake(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double[], double[], int, double)
        size() *
            <-- de.unihalle.informatik.MiToBo.apps.cells2D.CellSegmentAlgos.voronoiTesselation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl$DetectorHeart.apply(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorControl.applyToImageBatch(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.insertData(java.util.Vector)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.enableAll(boolean)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.resetSettings()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcLongestPathProfiles(ij.ImagePlus, ij.ImagePlus, ij.ImagePlus)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcProfile(de.unihalle.informatik.MiToBo.datatypes.Region2D, de.unihalle.informatik.MiToBo.morphology.SkeletonTree, ij.process.ImageProcessor, ij.process.ImageProcessor)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.getNeuritePathTrees(ij.process.ImageProcessor, ij.process.ImageProcessor, ij.process.ImageProcessor, java.util.Vector)
            <-- de.unihalle.informatik.MiToBo.datatypes.Contour2D.Contour2D(java.util.Vector)
            <-- de.unihalle.informatik.MiToBo.datatypes.Contour2D.countInner()
            <-- de.unihalle.informatik.MiToBo.datatypes.Histogram.Histogram(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.datatypes.Region2D.toMTBImageByte(java.lang.String, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.Region3D(java.util.Vector)
            <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.calcCentre(java.util.Vector)
            <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.getSizeX()
            <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.getSizeY()
            <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.getSizeZ()
            <-- de.unihalle.informatik.MiToBo.datatypes.Region3D.regionToFile(de.unihalle.informatik.MiToBo.datatypes.Region3D, java.lang.String)
            <-- de.unihalle.informatik.MiToBo.datatypes.Snake.getSnakePolygon()
            <-- de.unihalle.informatik.MiToBo.datatypes.Snake.toMTBImage(java.lang.String, int, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            <-- de.unihalle.informatik.MiToBo.datatypes.Snake.toMTBImageByte(java.lang.String, int, int)
            <-- de.unihalle.informatik.MiToBo.datatypes.TreeNode.printData()
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.fireStatusEvent(int, int, java.lang.String)
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.getStatusListeners()
            <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTree.getFileList()
            <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTreeNodeData.getSubtreeFileList()
            <-- de.unihalle.informatik.MiToBo.io.dirs.DirectoryTreeNodeData.printData()
            <-- de.unihalle.informatik.MiToBo.morphology.ComponentPostprocess.EraseSmallComponents(ij.process.ImageProcessor, int)
            <-- de.unihalle.informatik.MiToBo.morphology.ComponentPostprocess.LinkAdjacentComponents(ij.process.ImageProcessor, double)
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTree.expandPath(de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData, int, int)
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.getAllPathPixels(java.util.Vector)
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.getFirstPixels(java.util.Vector, int, int)
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.getLongestPath(java.util.Vector)
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.getMaxLength()
            <-- de.unihalle.informatik.MiToBo.morphology.SkeletonTreeNodeData.getSpinesAlongPath(java.util.Vector, int)
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.Resampler(java.util.Vector, double)
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.getPoints()
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.get_X_coords()
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.get_Y_coords()
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.get_size()
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.resampling()
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.SnakeAlgos.addAllPoints()
            <-- de.unihalle.informatik.MiToBo.segmentation.contours.snakes.SnakeAlgos.calcSnake(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double[], double[], int, double)
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential.regionSegmentation(ij.process.ImageProcessor, boolean)
            <-- de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3D.regionSegmentation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, boolean, int, int)
            <-- de.unihalle.informatik.MiToBo.statistics.RegionSetStatistics.calcAverageSize(java.util.Vector)
            <-- mtb_contours.Contour_on_Labeled_Components.add_InnerContours(java.util.Vector, java.util.Vector)
            <-- mtb_contours.Contour_on_Labeled_Components.get_ContourImage(java.util.Vector)
            <-- mtb_contours.Contour_on_Labeled_Components.get_OuterContours(ij.process.ImageProcessor, java.util.Vector)
            <-- mtb_neurites.Neurit_Detector_2D.drawSnakeRegion(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.Region2D)
            <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
            <-- mtb_neurites.Neurit_Detector_2D.removeCellBody(de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            <-- mtb_regions.Label_Components_Recursive.run(ij.process.ImageProcessor)
            <-- mtb_regions.Label_Components_Sequential.run(ij.process.ImageProcessor)
            <-- mtb_regions.Label_Components_Sequential_3D.run(ij.process.ImageProcessor)
        toArray() *
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.getStatusListeners()
java.util.concurrent *
    ConcurrentLinkedQueue *
        ConcurrentLinkedQueue() *
            <-- de.unihalle.informatik.MiToBo.morphology.HDomeTransform3D.hybridGrayscaleReconstruct(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        add(java.lang.Object) *
            <-- de.unihalle.informatik.MiToBo.morphology.HDomeTransform3D.hybridGrayscaleReconstruct(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        isEmpty() *
            <-- de.unihalle.informatik.MiToBo.morphology.HDomeTransform3D.hybridGrayscaleReconstruct(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
        poll() *
            <-- de.unihalle.informatik.MiToBo.morphology.HDomeTransform3D.hybridGrayscaleReconstruct(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
javax.swing *
    AbstractButton *
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
        <-- mtb_io.Open_Image.channelWindow()
    BorderFactory *
        createLineBorder(java.awt.Color, int) *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.DirChanWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.SnakeWindow()
        createLoweredBevelBorder() *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
        createTitledBorder(javax.swing.border.Border, java.lang.String) *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.DirChanWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.SnakeWindow()
    ButtonGroup *
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.alg_1g
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.alg_2g
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.alg_3g
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.alg_4g
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.detectMode(int)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.getKernelChannel()
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.kernelChannel
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.coreGroup
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.snakeGroup
        ButtonGroup() *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
            <-- mtb_io.Open_Image.channelWindow()
        add(javax.swing.AbstractButton) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
            <-- mtb_io.Open_Image.channelWindow()
        getSelection() *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.detectMode(int)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.getKernelChannel()
        setSelected(javax.swing.ButtonModel, boolean) *
            <-- mtb_io.Open_Image.channelWindow()
    ButtonModel *
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.detectMode(int)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.getKernelChannel()
        <-- mtb_io.Open_Image.channelWindow()
    Icon *
        <-- mtb_io.Save_Image.save()
    JButton *
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.SnakeSetButton
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.cancel
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.enableAll(boolean)
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.resetSettings()
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.run
        JButton(java.lang.String) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupResultTable()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.DirChanWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
        addActionListener(java.awt.event.ActionListener) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupResultTable()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.DirChanWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
        setActionCommand(java.lang.String) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupResultTable()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.DirChanWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
        setEnabled(boolean) *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.enableAll(boolean)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.resetSettings()
        setMaximumSize(java.awt.Dimension) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
        setMinimumSize(java.awt.Dimension) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
        setPreferredSize(java.awt.Dimension) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
        setSize(java.awt.Dimension) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupResultTable()
    JCheckBox *
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.chs0
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.chs1
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.chs2
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.chs3
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.chs4
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.getCopyChannels()
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.showMaskOnly
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.showResultBox
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.showResultImage()
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.showResultMask()
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.enableAll(boolean)
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.resetSettings()
        JCheckBox(java.lang.String) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
        addActionListener(java.awt.event.ActionListener) *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
        isSelected() *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.getCopyChannels()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.showResultImage()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.showResultMask()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
        setActionCommand(java.lang.String) *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
        setEnabled(boolean) *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.enableAll(boolean)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.resetSettings()
        setSelected(boolean) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.enableAll(boolean)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.resetSettings()
        setSize(int, int) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
    JFileChooser *
        <-- mtb_io.Open_Image.fc
        JFileChooser() *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.saveTable()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.actionPerformed(java.awt.event.ActionEvent)
        JFileChooser(java.lang.String) *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
            <-- mtb_io.Open_Image.open()
            <-- mtb_io.Save_Image.save()
        addChoosableFileFilter(javax.swing.filechooser.FileFilter) *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
            <-- mtb_io.Open_Image.open()
            <-- mtb_io.Save_Image.save()
        getCurrentDirectory() *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.saveTable()
            <-- mtb_io.Open_Image.open()
            <-- mtb_io.Save_Image.save()
        getSelectedFile() *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.saveTable()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.actionPerformed(java.awt.event.ActionEvent)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
            <-- mtb_io.Open_Image.open()
            <-- mtb_io.Save_Image.save()
        setAcceptAllFileFilterUsed(boolean) *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
            <-- mtb_io.Open_Image.open()
            <-- mtb_io.Save_Image.save()
        setApproveButtonText(java.lang.String) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.saveTable()
        setCurrentDirectory(java.io.File) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.saveTable()
        setDialogTitle(java.lang.String) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.saveTable()
        setFileFilter(javax.swing.filechooser.FileFilter) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.saveTable()
        setFileSelectionMode(int) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.saveTable()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.actionPerformed(java.awt.event.ActionEvent)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
        setSelectedFile(java.io.File) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.saveTable()
        showOpenDialog(java.awt.Component) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.saveTable()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.actionPerformed(java.awt.event.ActionEvent)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
            <-- mtb_io.Open_Image.open()
        showSaveDialog(java.awt.Component) *
            <-- mtb_io.Save_Image.save()
    JFrame *
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.actionPerformed(java.awt.event.ActionEvent)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupResultTable()
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.showResultData(java.util.Vector)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.tabFrame
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.DirChanWindow()
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.DirFrame
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
        <-- mtb_io.Open_Image
        <-- mtb_io.Save_Image
        JFrame() *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.GranuleDetectorGUI()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupResultTable()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.DirChanWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.NeuritDetector2DGUI()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.SnakeWindow()
            <-- mtb_io.Open_Image.Open_Image()
            <-- mtb_io.Save_Image.Save_Image()
        JFrame(java.lang.String) *
            <-- mtb_io.Open_Image.channelWindow()
        add(java.awt.Component) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupResultTable()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.DirChanWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.SnakeWindow()
            <-- mtb_io.Open_Image.channelWindow()
        dispose() *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
        getHeight() *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.DirChanWindow()
        getWidth() *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.DirChanWindow()
        pack() *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.DirChanWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.SnakeWindow()
        setDefaultCloseOperation(int) *
            <-- mtb_io.Open_Image.channelWindow()
        setJMenuBar(javax.swing.JMenuBar) *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.SnakeWindow()
        setLocation(int, int) *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.DirChanWindow()
        setLocationRelativeTo(java.awt.Component) *
            <-- mtb_io.Open_Image.channelWindow()
        setResizable(boolean) *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.DirChanWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.SnakeWindow()
        setSize(int, int) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupResultTable()
            <-- mtb_io.Open_Image.channelWindow()
        setTitle(java.lang.String) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupResultTable()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.DirChanWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.SnakeWindow()
        setVisible(boolean) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.actionPerformed(java.awt.event.ActionEvent)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupResultTable()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.showResultData(java.util.Vector)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.DirChanWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.SnakeWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
            <-- mtb_io.Open_Image.channelWindow()
        toFront() *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.DirChanWindow()
        validate() *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupResultTable()
    JLabel *
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setStatus(java.lang.String)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.status
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.resetSettings()
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.setStatus(java.lang.String, int)
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.status
        JLabel(java.lang.String) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.DirChanWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
        setSize(int, int) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
        setText(java.lang.String) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setStatus(java.lang.String)
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.resetSettings()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.setStatus(java.lang.String, int)
    JMenu *
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.SnakeWindow()
        JMenu(java.lang.String) *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.SnakeWindow()
        add(javax.swing.JMenuItem) *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.SnakeWindow()
    JMenuBar *
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.SnakeWindow()
        JMenuBar() *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.SnakeWindow()
        add(javax.swing.JMenu) *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.SnakeWindow()
    JMenuItem *
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.SnakeWindow()
        JMenuItem(java.lang.String) *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.SnakeWindow()
        addActionListener(java.awt.event.ActionListener) *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
        setActionCommand(java.lang.String) *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
    JOptionPane *
        showMessageDialog(java.awt.Component, java.lang.Object, java.lang.String, int) *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.showMessage(java.lang.String)
            <-- mtb_io.Save_Image.save()
        showOptionDialog(java.awt.Component, java.lang.Object, java.lang.String, int, int, javax.swing.Icon, java.lang.Object[], java.lang.Object) *
            <-- mtb_io.Save_Image.save()
    JPanel *
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.cPanel
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.chanPanel
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.nPanel
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.ncPanel
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.setPanel
        JPanel() *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupResultTable()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.DirChanWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.SnakeWindow()
            <-- mtb_io.Open_Image.channelWindow()
        add(java.awt.Component) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupResultTable()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.DirChanWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.SnakeWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
            <-- mtb_io.Open_Image.channelWindow()
        add(java.awt.Component, java.lang.Object) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupResultTable()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
        removeAll() *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
        setBorder(javax.swing.border.Border) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.DirChanWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.SnakeWindow()
        setLayout(java.awt.LayoutManager) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupResultTable()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.DirChanWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.SnakeWindow()
        setMaximumSize(java.awt.Dimension) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
        setPreferredSize(java.awt.Dimension) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
        setSize(int, int) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
        setSize(java.awt.Dimension) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
        updateUI() *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
    JProgressBar *
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.progBar
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.resetSettings()
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.setStatus(java.lang.String, int)
        JProgressBar(int, int) *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
        getValue() *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.setStatus(java.lang.String, int)
        setForeground(java.awt.Color) *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
        setToolTipText(java.lang.String) *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.resetSettings()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.setStatus(java.lang.String, int)
        setValue(int) *
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.resetSettings()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.setStatus(java.lang.String, int)
    JRadioButton *
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.a1_0
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.a1_1
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.a1_2
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.a2_0
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.a2_1
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.a2_2
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.a3_0
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.a3_1
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.a3_2
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.a4_0
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.a4_1
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.a4_2
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.actionPerformed(java.awt.event.ActionEvent)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.ch0
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.ch1
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.ch2
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.ch3
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.ch4
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.detectMode(int)
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.getKernelChannel()
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.enableAll(boolean)
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.resetSettings()
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.snakeNo
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.snakeYes
        JRadioButton(java.lang.String) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
            <-- mtb_io.Open_Image.channelWindow()
        addActionListener(java.awt.event.ActionListener) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
            <-- mtb_io.Open_Image.channelWindow()
        getModel() *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.detectMode(int)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.getKernelChannel()
            <-- mtb_io.Open_Image.channelWindow()
        setActionCommand(java.lang.String) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
            <-- mtb_io.Open_Image.channelWindow()
        setEnabled(boolean) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.actionPerformed(java.awt.event.ActionEvent)
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.enableAll(boolean)
        setSelected(boolean) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.resetSettings()
        setSize(int, int) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
    JScrollPane *
        JScrollPane(java.awt.Component) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupResultTable()
    JTable *
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.resultTab
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupResultTable()
        JTable(javax.swing.table.TableModel) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupResultTable()
    JTextField *
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.entry_minGranuleSize
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.getMinimumGranuleSize()
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.DirChanWindow()
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.chanText
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.textfield
        JTextField(int) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.DirChanWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
            <-- mtb_io.Open_Image.channelWindow()
        addActionListener(java.awt.event.ActionListener) *
            <-- mtb_io.Open_Image.channelWindow()
        getText() *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.getMinimumGranuleSize()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
        setSize(int, int) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
        setText(java.lang.String) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
            <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
            <-- mtb_io.Open_Image.channelWindow()
        setToolTipText(java.lang.String) *
            <-- mtb_io.Open_Image.channelWindow()
    JToolBar *
        JToolBar(java.lang.String) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupResultTable()
        add(java.awt.Component) *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupResultTable()
javax.swing.border *
    Border *
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupMainControlWindow()
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.DirChanWindow()
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.SnakeWindow()
    TitledBorder *
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.DirChanWindow()
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.MainWindow()
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.SnakeWindow()
javax.swing.filechooser *
    FileFilter *
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel$ResultTabFileFilter
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.saveTable()
        <-- de.unihalle.informatik.MiToBo.apps.neurites2D.NeuritDetector2DGUI.actionPerformed(java.awt.event.ActionEvent)
        <-- de.unihalle.informatik.MiToBo.io.files.ImageFilter
        <-- mtb_io.Open_Image.open()
        <-- mtb_io.Save_Image.save()
        FileFilter() *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel$ResultTabFileFilter.GranuleDetectorGUI$GranuleTableModel$ResultTabFileFilter(de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel)
            <-- de.unihalle.informatik.MiToBo.io.files.ImageFilter.ImageFilter()
javax.swing.table *
    AbstractTableModel *
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel
        AbstractTableModel() *
            <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI$GranuleTableModel.GranuleDetectorGUI$GranuleTableModel(de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI, int, int)
    TableModel *
        <-- de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorGUI.setupResultTable()
javax.xml.parsers *
    DocumentBuilder *
        <-- de.unihalle.informatik.MiToBo.meta.MTBMetaData.MTBMetaData()
        <-- de.unihalle.informatik.MiToBo.meta.xml.MTBxmlIO.readFromFile(java.lang.String)
        getDOMImplementation() *
            <-- de.unihalle.informatik.MiToBo.meta.MTBMetaData.MTBMetaData()
        parse(java.io.File) *
            <-- de.unihalle.informatik.MiToBo.meta.xml.MTBxmlIO.readFromFile(java.lang.String)
    DocumentBuilderFactory *
        <-- de.unihalle.informatik.MiToBo.meta.MTBMetaData.MTBMetaData()
        <-- de.unihalle.informatik.MiToBo.meta.xml.MTBxmlIO.readFromFile(java.lang.String)
        newDocumentBuilder() *
            <-- de.unihalle.informatik.MiToBo.meta.MTBMetaData.MTBMetaData()
            <-- de.unihalle.informatik.MiToBo.meta.xml.MTBxmlIO.readFromFile(java.lang.String)
        newInstance() *
            <-- de.unihalle.informatik.MiToBo.meta.MTBMetaData.MTBMetaData()
            <-- de.unihalle.informatik.MiToBo.meta.xml.MTBxmlIO.readFromFile(java.lang.String)
    ParserConfigurationException *
        <-- de.unihalle.informatik.MiToBo.meta.MTBMetaData.MTBMetaData()
javax.xml.transform *
    Result *
        <-- de.unihalle.informatik.MiToBo.meta.xml.MTBxmlIO.saveToFile(org.w3c.dom.Document, java.lang.String)
    Source *
        <-- de.unihalle.informatik.MiToBo.meta.xml.MTBxmlIO.saveToFile(org.w3c.dom.Document, java.lang.String)
    Transformer *
        <-- de.unihalle.informatik.MiToBo.meta.xml.MTBxmlIO.saveToFile(org.w3c.dom.Document, java.lang.String)
        transform(javax.xml.transform.Source, javax.xml.transform.Result) *
            <-- de.unihalle.informatik.MiToBo.meta.xml.MTBxmlIO.saveToFile(org.w3c.dom.Document, java.lang.String)
    TransformerConfigurationException *
        <-- de.unihalle.informatik.MiToBo.meta.xml.MTBxmlIO.saveToFile(org.w3c.dom.Document, java.lang.String)
        getException() *
            <-- de.unihalle.informatik.MiToBo.meta.xml.MTBxmlIO.saveToFile(org.w3c.dom.Document, java.lang.String)
        getMessage() *
            <-- de.unihalle.informatik.MiToBo.meta.xml.MTBxmlIO.saveToFile(org.w3c.dom.Document, java.lang.String)
    TransformerException *
        <-- de.unihalle.informatik.MiToBo.meta.xml.MTBxmlIO.saveToFile(org.w3c.dom.Document, java.lang.String)
        getException() *
            <-- de.unihalle.informatik.MiToBo.meta.xml.MTBxmlIO.saveToFile(org.w3c.dom.Document, java.lang.String)
        getMessage() *
            <-- de.unihalle.informatik.MiToBo.meta.xml.MTBxmlIO.saveToFile(org.w3c.dom.Document, java.lang.String)
    TransformerFactory *
        <-- de.unihalle.informatik.MiToBo.meta.xml.MTBxmlIO.saveToFile(org.w3c.dom.Document, java.lang.String)
        newInstance() *
            <-- de.unihalle.informatik.MiToBo.meta.xml.MTBxmlIO.saveToFile(org.w3c.dom.Document, java.lang.String)
        newTransformer() *
            <-- de.unihalle.informatik.MiToBo.meta.xml.MTBxmlIO.saveToFile(org.w3c.dom.Document, java.lang.String)
javax.xml.transform.dom *
    DOMSource *
        DOMSource(org.w3c.dom.Node) *
            <-- de.unihalle.informatik.MiToBo.meta.xml.MTBxmlIO.saveToFile(org.w3c.dom.Document, java.lang.String)
javax.xml.transform.stream *
    StreamResult *
        StreamResult(java.io.OutputStream) *
            <-- de.unihalle.informatik.MiToBo.meta.xml.MTBxmlIO.saveToFile(org.w3c.dom.Document, java.lang.String)
junit.framework *
    Test *
        <-- de.unihalle.informatik.MiToBo_admin.test.MiToBoAdminTests.suite()
    TestCase *
        <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepListTest
        TestCase() *
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepListTest.ExtractClassDepListTest()
    TestSuite *
        TestSuite() *
            <-- de.unihalle.informatik.MiToBo_admin.test.MiToBoAdminTests.suite()
        addTestSuite(java.lang.Class) *
            <-- de.unihalle.informatik.MiToBo_admin.test.MiToBoAdminTests.suite()
loci.formats *
    ChannelSeparator *
        ChannelSeparator(loci.formats.IFormatReader) *
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.examine()
    FormatException *
        <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.examine()
        <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.open()
        <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.open(int[])
        getMessage() *
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.examine()
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.open()
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.open(int[])
    IFormatReader *
        <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.examine()
    ImageReader *
        <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.examine()
    StatusEvent *
        <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.fireStatusEvent(int, int, java.lang.String)
        <-- mtb_filters.Rank_Operator.statusUpdated(loci.formats.StatusEvent)
        <-- mtb_regions.Label_Components_Sequential_3D.statusUpdated(loci.formats.StatusEvent)
        StatusEvent(int, int, java.lang.String) *
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.fireStatusEvent(int, int, java.lang.String)
        getProgressMaximum() *
            <-- mtb_filters.Rank_Operator.statusUpdated(loci.formats.StatusEvent)
            <-- mtb_regions.Label_Components_Sequential_3D.statusUpdated(loci.formats.StatusEvent)
        getProgressValue() *
            <-- mtb_filters.Rank_Operator.statusUpdated(loci.formats.StatusEvent)
            <-- mtb_regions.Label_Components_Sequential_3D.statusUpdated(loci.formats.StatusEvent)
        getStatusMessage() *
            <-- mtb_filters.Rank_Operator.statusUpdated(loci.formats.StatusEvent)
            <-- mtb_regions.Label_Components_Sequential_3D.statusUpdated(loci.formats.StatusEvent)
    StatusListener *
        <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.addStatusListener(loci.formats.StatusListener)
        <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.fireStatusEvent(int, int, java.lang.String)
        <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.getStatusListeners()
        <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.removeStatusListener(loci.formats.StatusListener)
        <-- mtb_filters.Rank_Operator
        <-- mtb_filters.Rank_Operator.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        <-- mtb_regions.Label_Components_Sequential_3D
        statusUpdated(loci.formats.StatusEvent) *
            <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.fireStatusEvent(int, int, java.lang.String)
    StatusListener[] *
        <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.getStatusListeners()
    StatusReporter *
        <-- de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator
loci.plugins.util *
    ImagePlusReader *
        <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.ImgOpen()
        <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.ImgOpen(java.io.File)
        <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.ImgOpen(java.lang.String, java.lang.String)
        <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.examine()
        <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.iReader
        <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.open()
        <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.open(int[])
        ImagePlusReader(loci.formats.IFormatReader) *
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.examine()
        getImageCount() *
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.examine()
        getSizeX() *
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.examine()
        getSizeY() *
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.examine()
        makeImageReader() *
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.examine()
        openProcessors(int) *
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.open()
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.open(int[])
        setId(java.lang.String) *
            <-- de.unihalle.informatik.MiToBo.io.files.ImgOpen.examine()
mtb_contours
    Contour_on_Labeled_Components
        --> ij.plugin.filter.PlugInFilter *
        --> java.lang.Object *
        Contour_on_Labeled_Components()
            --> java.lang.Object.Object() *
        add_InnerContours(java.util.Vector, java.util.Vector)
            --> de.unihalle.informatik.MiToBo.datatypes.Contour2D
            --> de.unihalle.informatik.MiToBo.datatypes.Contour2D.getLength()
            --> de.unihalle.informatik.MiToBo.datatypes.Contour2D.getPoints()
            --> de.unihalle.informatik.MiToBo.datatypes.Contour2D.setInner(java.util.Vector)
            --> de.unihalle.informatik.MiToBo.datatypes.Region2D
            --> de.unihalle.informatik.MiToBo.datatypes.Region2D.getArea()
            --> de.unihalle.informatik.MiToBo.datatypes.Region2D.getPoints()
            --> de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential.LabelComponentsSequential()
            --> de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential.regionSegmentation(ij.process.ImageProcessor, boolean)
            --> ij.ImagePlus *
            --> ij.ImagePlus.getProcessor() *
            --> ij.gui.NewImage.createByteImage(java.lang.String, int, int, int, int) *
            --> ij.process.ImageProcessor *
            --> ij.process.ImageProcessor.putPixel(int, int, int) *
            --> ij.process.ImageProcessor.setPixels(java.lang.Object) *
            --> java.awt.Polygon.Polygon(int[], int[], int) *
            --> java.awt.Polygon.contains(int, int) *
            --> java.awt.geom.Point2D$Double *
            --> java.awt.geom.Point2D$Double.getX() *
            --> java.awt.geom.Point2D$Double.getY() *
            --> java.lang.Object *
            --> java.lang.String *
            --> java.util.Vector *
            --> java.util.Vector.Vector() *
            --> java.util.Vector.addElement(java.lang.Object) *
            --> java.util.Vector.elementAt(int) *
            --> java.util.Vector.size() *
            <-- mtb_contours.Contour_on_Labeled_Components.get_Contours(ij.process.ImageProcessor, java.util.Vector)
            --> mtb_contours.Contour_on_Labeled_Components.get_OuterContours(ij.process.ImageProcessor, java.util.Vector)
            --> mtb_contours.Contour_on_Labeled_Components.height
            --> mtb_contours.Contour_on_Labeled_Components.width
        findNextPoint(java.awt.Point, int)
            --> I[] *
            --> java.awt.Point *
            --> java.awt.Point.getX() *
            --> java.awt.Point.getY() *
            --> java.awt.Point.setLocation(int, int) *
            --> mtb_contours.Contour_on_Labeled_Components.height
            --> mtb_contours.Contour_on_Labeled_Components.pixels
            <-- mtb_contours.Contour_on_Labeled_Components.traceContour(int, int)
            --> mtb_contours.Contour_on_Labeled_Components.width
        get_ContourImage(java.util.Vector)
            --> de.unihalle.informatik.MiToBo.datatypes.Contour2D
            --> de.unihalle.informatik.MiToBo.datatypes.Contour2D.countInner()
            --> de.unihalle.informatik.MiToBo.datatypes.Contour2D.getInner(int)
            --> de.unihalle.informatik.MiToBo.datatypes.Contour2D.getPoints()
            --> ij.ImagePlus *
            --> ij.ImagePlus.getProcessor() *
            --> ij.gui.NewImage.createByteImage(java.lang.String, int, int, int, int) *
            --> ij.process.ImageProcessor *
            --> ij.process.ImageProcessor.putPixel(int, int, int) *
            --> java.awt.geom.Point2D$Double *
            --> java.awt.geom.Point2D$Double.getX() *
            --> java.awt.geom.Point2D$Double.getY() *
            --> java.lang.Object *
            --> java.lang.String *
            --> java.util.Vector *
            --> java.util.Vector.elementAt(int) *
            --> java.util.Vector.size() *
            --> mtb_contours.Contour_on_Labeled_Components.height
            <-- mtb_contours.Contour_on_Labeled_Components.run(ij.process.ImageProcessor)
            --> mtb_contours.Contour_on_Labeled_Components.width
        get_Contours(ij.process.ImageProcessor, java.util.Vector)
            --> ij.process.ImageProcessor *
            --> ij.process.ImageProcessor.getHeight() *
            --> ij.process.ImageProcessor.getWidth() *
            --> java.util.Vector *
            --> mtb_contours.Contour_on_Labeled_Components.add_InnerContours(java.util.Vector, java.util.Vector)
            --> mtb_contours.Contour_on_Labeled_Components.get_OuterContours(ij.process.ImageProcessor, java.util.Vector)
            --> mtb_contours.Contour_on_Labeled_Components.height
            <-- mtb_contours.Contour_on_Labeled_Components.run(ij.process.ImageProcessor)
            --> mtb_contours.Contour_on_Labeled_Components.width
        get_ContoursOnRegions(ij.process.ImageProcessor, java.util.Vector)
            --> ij.process.ImageProcessor *
            --> ij.process.ImageProcessor.getHeight() *
            --> ij.process.ImageProcessor.getWidth() *
            --> java.util.Vector *
            --> mtb_contours.Contour_on_Labeled_Components.get_OuterContours(ij.process.ImageProcessor, java.util.Vector)
            --> mtb_contours.Contour_on_Labeled_Components.height
            --> mtb_contours.Contour_on_Labeled_Components.width
            <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
        get_OuterContours(ij.process.ImageProcessor, java.util.Vector)
            --> B[] *
            --> de.unihalle.informatik.MiToBo.datatypes.Contour2D
            --> de.unihalle.informatik.MiToBo.datatypes.Contour2D.Contour2D()
            --> de.unihalle.informatik.MiToBo.datatypes.Region2D
            --> de.unihalle.informatik.MiToBo.datatypes.Region2D.getPoints()
            --> ij.process.ImageProcessor *
            --> ij.process.ImageProcessor.getPixels() *
            --> java.awt.geom.Point2D$Double *
            --> java.awt.geom.Point2D$Double.getX() *
            --> java.awt.geom.Point2D$Double.getY() *
            --> java.lang.Object *
            --> java.util.Vector *
            --> java.util.Vector.Vector() *
            --> java.util.Vector.addElement(java.lang.Object) *
            --> java.util.Vector.elementAt(int) *
            --> java.util.Vector.size() *
            <-- mtb_contours.Contour_on_Labeled_Components.add_InnerContours(java.util.Vector, java.util.Vector)
            <-- mtb_contours.Contour_on_Labeled_Components.get_Contours(ij.process.ImageProcessor, java.util.Vector)
            <-- mtb_contours.Contour_on_Labeled_Components.get_ContoursOnRegions(ij.process.ImageProcessor, java.util.Vector)
            --> mtb_contours.Contour_on_Labeled_Components.pixels
            --> mtb_contours.Contour_on_Labeled_Components.traceContour(int, int)
        height
            <-- mtb_contours.Contour_on_Labeled_Components.add_InnerContours(java.util.Vector, java.util.Vector)
            <-- mtb_contours.Contour_on_Labeled_Components.findNextPoint(java.awt.Point, int)
            <-- mtb_contours.Contour_on_Labeled_Components.get_ContourImage(java.util.Vector)
            <-- mtb_contours.Contour_on_Labeled_Components.get_Contours(ij.process.ImageProcessor, java.util.Vector)
            <-- mtb_contours.Contour_on_Labeled_Components.get_ContoursOnRegions(ij.process.ImageProcessor, java.util.Vector)
            <-- mtb_contours.Contour_on_Labeled_Components.run(ij.process.ImageProcessor)
        pixels
            <-- mtb_contours.Contour_on_Labeled_Components.findNextPoint(java.awt.Point, int)
            <-- mtb_contours.Contour_on_Labeled_Components.get_OuterContours(ij.process.ImageProcessor, java.util.Vector)
        run(ij.process.ImageProcessor)
            --> de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential.LabelComponentsSequential()
            --> de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential.regionSegmentation(ij.process.ImageProcessor, boolean)
            --> ij.ImagePlus *
            --> ij.ImagePlus.show() *
            --> ij.process.ImageProcessor *
            --> ij.process.ImageProcessor.getHeight() *
            --> ij.process.ImageProcessor.getWidth() *
            --> java.util.Vector *
            --> mtb_contours.Contour_on_Labeled_Components.get_ContourImage(java.util.Vector)
            --> mtb_contours.Contour_on_Labeled_Components.get_Contours(ij.process.ImageProcessor, java.util.Vector)
            --> mtb_contours.Contour_on_Labeled_Components.height
            --> mtb_contours.Contour_on_Labeled_Components.width
        setup(java.lang.String, ij.ImagePlus)
            --> ij.ImagePlus *
            --> java.lang.String *
        traceContour(int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.Contour2D
            --> de.unihalle.informatik.MiToBo.datatypes.Contour2D.Contour2D()
            --> de.unihalle.informatik.MiToBo.datatypes.Contour2D.addPixel(int, int)
            --> java.awt.Point *
            --> java.awt.Point.Point(int, int) *
            --> java.awt.Point.getX() *
            --> java.awt.Point.getY() *
            --> mtb_contours.Contour_on_Labeled_Components.findNextPoint(java.awt.Point, int)
            <-- mtb_contours.Contour_on_Labeled_Components.get_OuterContours(ij.process.ImageProcessor, java.util.Vector)
        width
            <-- mtb_contours.Contour_on_Labeled_Components.add_InnerContours(java.util.Vector, java.util.Vector)
            <-- mtb_contours.Contour_on_Labeled_Components.findNextPoint(java.awt.Point, int)
            <-- mtb_contours.Contour_on_Labeled_Components.get_ContourImage(java.util.Vector)
            <-- mtb_contours.Contour_on_Labeled_Components.get_Contours(ij.process.ImageProcessor, java.util.Vector)
            <-- mtb_contours.Contour_on_Labeled_Components.get_ContoursOnRegions(ij.process.ImageProcessor, java.util.Vector)
            <-- mtb_contours.Contour_on_Labeled_Components.run(ij.process.ImageProcessor)
mtb_demo
    Demo_MTBOpBase_Plugin
        --> de.unihalle.informatik.MiToBo.meta.MTBOpBase
        --> ij.plugin.filter.PlugInFilter *
        Demo_MTBOpBase_Plugin()
            --> de.unihalle.informatik.MiToBo.meta.MTBOpBase.MTBOpBase()
        getMetaParams()
            --> java.lang.Object *
            --> java.util.LinkedList *
            --> java.util.LinkedList.LinkedList() *
            --> java.util.LinkedList.add(java.lang.Object) *
        m_img
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            <-- mtb_demo.Demo_MTBOpBase_Plugin.run(ij.process.ImageProcessor)
            <-- mtb_demo.Demo_MTBOpBase_Plugin.setup(java.lang.String, ij.ImagePlus)
        operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams.getParameter(java.lang.String)
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams.setParameter(java.lang.String, java.lang.Object)
            --> java.lang.Double *
            --> java.lang.Double.doubleValue() *
            --> java.lang.Object *
            --> java.lang.String *
            --> mtb_demo.Demo_MTBOpBase_Plugin.threshold(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double)
        parameterDialog()
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams.MTBOpParams()
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams.getParameter(java.lang.String)
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams.setParameter(java.lang.String, java.lang.Object)
            --> ij.IJ.showMessage(java.lang.String) *
            --> ij.IJ.showStatus(java.lang.String) *
            --> ij.gui.GenericDialog.GenericDialog(java.lang.String) *
            --> ij.gui.GenericDialog.addNumericField(java.lang.String, double, int) *
            --> ij.gui.GenericDialog.getNextNumber() *
            --> ij.gui.GenericDialog.showDialog() *
            --> ij.gui.GenericDialog.wasOKed() *
            --> java.lang.Double *
            --> java.lang.Double.doubleValue() *
            --> java.lang.Double.valueOf(double) *
            --> java.lang.Object *
            --> java.lang.String *
            <-- mtb_demo.Demo_MTBOpBase_Plugin.run(ij.process.ImageProcessor)
        run(ij.process.ImageProcessor)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.setMetaData(de.unihalle.informatik.MiToBo.meta.MTBMetaData)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.show()
            --> de.unihalle.informatik.MiToBo.meta.MTBMetaData
            --> de.unihalle.informatik.MiToBo.meta.MTBMetaData.MTBMetaData()
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams.getParameter(java.lang.String)
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams.setMetaDataObject(de.unihalle.informatik.MiToBo.meta.MTBMetaData)
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams.setParameter(java.lang.String, java.lang.Object)
            --> ij.process.ImageProcessor *
            --> java.lang.Object *
            --> java.lang.String *
            --> mtb_demo.Demo_MTBOpBase_Plugin.m_img
            --> mtb_demo.Demo_MTBOpBase_Plugin.parameterDialog()
            --> mtb_demo.Demo_MTBOpBase_Plugin.runOp(de.unihalle.informatik.MiToBo.meta.MTBOpParams) *
        runOp(de.unihalle.informatik.MiToBo.meta.MTBOpParams) *
            <-- mtb_demo.Demo_MTBOpBase_Plugin.run(ij.process.ImageProcessor)
        setup(java.lang.String, ij.ImagePlus)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.createMTBImage(ij.ImagePlus)
            --> ij.ImagePlus *
            --> java.lang.IllegalArgumentException *
            --> java.lang.String *
            --> mtb_demo.Demo_MTBOpBase_Plugin.m_img
        threshold(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.duplicate()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeC()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeT()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeX()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeY()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeZ()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getValueDouble(int, int, int, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.putValueDouble(int, int, int, int, int, double)
            <-- mtb_demo.Demo_MTBOpBase_Plugin.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
mtb_enhance
    Correct_Gamma
        --> ij.gui.DialogListener *
        --> ij.plugin.filter.PlugInFilter *
        --> java.lang.Object *
        Correct_Gamma()
            --> java.lang.Object.Object() *
        dialogItemChanged(ij.gui.GenericDialog, java.awt.AWTEvent)
            --> ij.gui.GenericDialog *
            --> ij.gui.GenericDialog.getNextNumber() *
            --> ij.gui.GenericDialog.invalidNumber() *
            --> java.awt.AWTEvent *
        img
            --> ij.ImagePlus *
            <-- mtb_enhance.Correct_Gamma.run(ij.process.ImageProcessor)
            <-- mtb_enhance.Correct_Gamma.setup(java.lang.String, ij.ImagePlus)
        run(ij.process.ImageProcessor)
            --> de.unihalle.informatik.MiToBo.enhance.GammaCorrection.GammaCorrection()
            --> de.unihalle.informatik.MiToBo.enhance.GammaCorrection.correctGamma(ij.process.ImageProcessor, double, int)
            --> ij.ImagePlus *
            --> ij.ImagePlus.getProcessor() *
            --> ij.ImagePlus.getStack() *
            --> ij.ImagePlus.getStackSize() *
            --> ij.ImagePlus.getType() *
            --> ij.ImageStack *
            --> ij.ImageStack.getProcessor(int) *
            --> ij.gui.DialogListener *
            --> ij.gui.GenericDialog.GenericDialog(java.lang.String) *
            --> ij.gui.GenericDialog.addChoice(java.lang.String, java.lang.String[], java.lang.String) *
            --> ij.gui.GenericDialog.addDialogListener(ij.gui.DialogListener) *
            --> ij.gui.GenericDialog.addMessage(java.lang.String) *
            --> ij.gui.GenericDialog.addNumericField(java.lang.String, double, int) *
            --> ij.gui.GenericDialog.getNextChoiceIndex() *
            --> ij.gui.GenericDialog.getNextNumber() *
            --> ij.gui.GenericDialog.showDialog() *
            --> ij.gui.GenericDialog.wasCanceled() *
            --> ij.process.ImageProcessor *
            --> ij.process.ImageProcessor.insert(ij.process.ImageProcessor, int, int) *
            --> java.io.PrintStream *
            --> java.io.PrintStream.println(java.lang.String) *
            --> java.lang.Integer.parseInt(java.lang.String) *
            --> java.lang.Integer.toString(int) *
            --> java.lang.String *
            --> java.lang.StringBuilder *
            --> java.lang.StringBuilder.StringBuilder(java.lang.String) *
            --> java.lang.StringBuilder.append(double) *
            --> java.lang.StringBuilder.toString() *
            --> java.lang.System.out *
            --> mtb_enhance.Correct_Gamma.img
        setup(java.lang.String, ij.ImagePlus)
            --> ij.ImagePlus *
            --> java.lang.String *
            --> mtb_enhance.Correct_Gamma.img
    Histogram_Equalize
        --> de.unihalle.informatik.MiToBo.meta.MTBOpBasePlugin
        Histogram_Equalize()
            --> de.unihalle.informatik.MiToBo.meta.MTBOpBasePlugin.MTBOpBasePlugin()
        mtbInput *
            <-- mtb_enhance.Histogram_Equalize.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.enhance.HistogramEqualization
            --> de.unihalle.informatik.MiToBo.enhance.HistogramEqualization$HistoEquParams.HistogramEqualization$HistoEquParams(de.unihalle.informatik.MiToBo.enhance.HistogramEqualization, de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> de.unihalle.informatik.MiToBo.enhance.HistogramEqualization$HistoEquParams.getResultImage()
            --> de.unihalle.informatik.MiToBo.enhance.HistogramEqualization.HistogramEqualization()
            --> de.unihalle.informatik.MiToBo.enhance.HistogramEqualization.runOp(de.unihalle.informatik.MiToBo.meta.MTBOpParams) *
            --> de.unihalle.informatik.MiToBo.meta.MTBMetaData
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams.getMetaDataObject()
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams.setParameter(java.lang.String, java.lang.Object)
            --> java.lang.Class *
            --> java.lang.Object *
            --> java.lang.Object.getClass() *
            --> java.lang.String *
            --> mtb_enhance.Histogram_Equalize.mtbInput *
        setup(java.lang.String, ij.ImagePlus)
            --> de.unihalle.informatik.MiToBo.meta.MTBOpBasePlugin.setup(java.lang.String, ij.ImagePlus)
            --> ij.ImagePlus *
            --> java.lang.String *
mtb_fields
    Create_GVF
        --> ij.plugin.filter.PlugInFilter *
        --> java.lang.Object *
        Abl_X(double[], int, int)
            <-- mtb_fields.Create_GVF.GVF_field(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
        Abl_Y(double[], int, int)
            <-- mtb_fields.Create_GVF.GVF_field(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
        BoundEnsure(double[], int, int)
            --> java.io.PrintStream *
            --> java.io.PrintStream.println(java.lang.String) *
            --> java.lang.String *
            --> java.lang.System.out *
            <-- mtb_fields.Create_GVF.GVF_field(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
        BoundExpand(double[], int, int)
            <-- mtb_fields.Create_GVF.GVF_field(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
        BoundShrink(double[], int, int)
            <-- mtb_fields.Create_GVF.GVF_field(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
        Create_GVF()
            --> java.lang.Object.Object() *
        GVF_field(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeX()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeY()
            --> ij.IJ.showProgress(double) *
            --> java.lang.Math.pow(double, double) *
            --> mtb_fields.Create_GVF.Abl_X(double[], int, int)
            --> mtb_fields.Create_GVF.Abl_Y(double[], int, int)
            --> mtb_fields.Create_GVF.BoundEnsure(double[], int, int)
            --> mtb_fields.Create_GVF.BoundExpand(double[], int, int)
            --> mtb_fields.Create_GVF.BoundShrink(double[], int, int)
            --> mtb_fields.Create_GVF.GradAbs(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> mtb_fields.Create_GVF.NormGrad(double[])
            --> mtb_fields.Create_GVF.U
            --> mtb_fields.Create_GVF.V
            --> mtb_fields.Create_GVF.myX
            --> mtb_fields.Create_GVF.myY
            <-- mtb_fields.Create_GVF.run(ij.process.ImageProcessor)
            <-- mtb_neurites.Neurit_Detector_2D.getExtEnergy(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, int)
        GradAbs(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeX()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeY()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getValueDouble(int, int)
            --> java.lang.Math.pow(double, double) *
            --> java.lang.Math.sqrt(double) *
            <-- mtb_fields.Create_GVF.GVF_field(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
        NormGrad(double[])
            <-- mtb_fields.Create_GVF.GVF_field(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
        U
            <-- mtb_fields.Create_GVF.GVF_field(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            <-- mtb_fields.Create_GVF.get_U()
        V
            <-- mtb_fields.Create_GVF.GVF_field(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            <-- mtb_fields.Create_GVF.get_V()
        get_U()
            --> mtb_fields.Create_GVF.U
            <-- mtb_neurites.Neurit_Detector_2D.getExtEnergy(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, int)
        get_V()
            --> mtb_fields.Create_GVF.V
            <-- mtb_neurites.Neurit_Detector_2D.getExtEnergy(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, int)
        myX
            <-- mtb_fields.Create_GVF.GVF_field(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
        myY
            <-- mtb_fields.Create_GVF.GVF_field(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
        printArray(double[], int, int)
            --> java.io.PrintStream *
            --> java.io.PrintStream.print(java.lang.String) *
            --> java.io.PrintStream.println() *
            --> java.io.PrintStream.println(java.lang.String) *
            --> java.lang.String *
            --> java.lang.String.valueOf(double) *
            --> java.lang.StringBuilder *
            --> java.lang.StringBuilder.StringBuilder(java.lang.String) *
            --> java.lang.StringBuilder.append(java.lang.String) *
            --> java.lang.StringBuilder.toString() *
            --> java.lang.System.out *
        run(ij.process.ImageProcessor)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.createMTBImage(ij.ImagePlus)
            --> ij.ImagePlus *
            --> ij.ImagePlus.ImagePlus(java.lang.String, ij.process.ImageProcessor) *
            --> ij.gui.GenericDialog.GenericDialog(java.lang.String) *
            --> ij.gui.GenericDialog.addMessage(java.lang.String) *
            --> ij.gui.GenericDialog.addNumericField(java.lang.String, double, int) *
            --> ij.gui.GenericDialog.getNextNumber() *
            --> ij.gui.GenericDialog.showDialog() *
            --> ij.gui.GenericDialog.wasCanceled() *
            --> ij.process.ImageProcessor *
            --> ij.process.ImageProcessor.getHeight() *
            --> ij.process.ImageProcessor.getWidth() *
            --> java.io.PrintStream *
            --> java.io.PrintStream.println(java.lang.String) *
            --> java.lang.Math.sqrt(double) *
            --> java.lang.String *
            --> java.lang.System.out *
            --> mtb_fields.Create_GVF.GVF_field(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
        setup(java.lang.String, ij.ImagePlus)
            --> ij.ImagePlus *
            --> java.lang.String *
        writeUV(double[], double[], int, int)
            --> ij.IJ.showProgress(double) *
            --> ij.io.SaveDialog.SaveDialog(java.lang.String, java.lang.String, java.lang.String) *
            --> ij.io.SaveDialog.getDirectory() *
            --> ij.io.SaveDialog.getFileName() *
            --> java.io.BufferedWriter.BufferedWriter(java.io.Writer) *
            --> java.io.BufferedWriter.close() *
            --> java.io.BufferedWriter.write(java.lang.String) *
            --> java.io.File *
            --> java.io.File.File(java.lang.String) *
            --> java.io.FileWriter.FileWriter(java.io.File) *
            --> java.io.IOException *
            --> java.io.PrintStream *
            --> java.io.PrintStream.println() *
            --> java.io.PrintStream.println(java.lang.String) *
            --> java.io.Writer *
            --> java.lang.ArrayIndexOutOfBoundsException *
            --> java.lang.Object *
            --> java.lang.String *
            --> java.lang.String.valueOf(double) *
            --> java.lang.String.valueOf(java.lang.Object) *
            --> java.lang.StringBuffer *
            --> java.lang.StringBuffer.StringBuffer() *
            --> java.lang.StringBuffer.insert(int, java.lang.String) *
            --> java.lang.StringBuffer.length() *
            --> java.lang.StringBuffer.toString() *
            --> java.lang.StringBuilder *
            --> java.lang.StringBuilder.StringBuilder(java.lang.String) *
            --> java.lang.StringBuilder.append(java.lang.Object) *
            --> java.lang.StringBuilder.append(java.lang.String) *
            --> java.lang.StringBuilder.toString() *
            --> java.lang.System.out *
mtb_filters
    Rank_Operator
        --> de.unihalle.informatik.MiToBo.meta.MTBOpBase
        --> ij.plugin.filter.PlugInFilter *
        --> loci.formats.StatusListener *
        Rank_Operator()
            --> de.unihalle.informatik.MiToBo.meta.MTBOpBase.MTBOpBase()
        getMetaParams()
            --> java.lang.Object *
            --> java.util.LinkedList *
            --> java.util.LinkedList.LinkedList() *
            --> java.util.LinkedList.add(java.lang.Object) *
        m_img
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            <-- mtb_filters.Rank_Operator.parameterDialog()
            <-- mtb_filters.Rank_Operator.run(ij.process.ImageProcessor)
            <-- mtb_filters.Rank_Operator.setup(java.lang.String, ij.ImagePlus)
        main(java.lang.String[])
            --> java.lang.String *
        operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            --> de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.RankOperator()
            --> de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.addStatusListener(loci.formats.StatusListener)
            --> de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperator.runOp(de.unihalle.informatik.MiToBo.meta.MTBOpParams) *
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams
            --> loci.formats.StatusListener *
        parameterDialog()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeC()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeT()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeX()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeY()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeZ()
            --> de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams
            --> de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.RankOperatorParams(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, int, boolean, boolean, boolean, boolean, boolean)
            --> ij.IJ.showMessage(java.lang.String) *
            --> ij.IJ.showStatus(java.lang.String) *
            --> ij.gui.GenericDialog.GenericDialog(java.lang.String) *
            --> ij.gui.GenericDialog.addCheckboxGroup(int, int, java.lang.String[], boolean[]) *
            --> ij.gui.GenericDialog.addChoice(java.lang.String, java.lang.String[], java.lang.String) *
            --> ij.gui.GenericDialog.addMessage(java.lang.String) *
            --> ij.gui.GenericDialog.addNumericField(java.lang.String, double, int) *
            --> ij.gui.GenericDialog.getCheckboxes() *
            --> ij.gui.GenericDialog.getNextChoiceIndex() *
            --> ij.gui.GenericDialog.getNextNumber() *
            --> ij.gui.GenericDialog.showDialog() *
            --> ij.gui.GenericDialog.wasOKed() *
            --> java.awt.Checkbox *
            --> java.awt.Checkbox.getState() *
            --> java.awt.Checkbox.setEnabled(boolean) *
            --> java.lang.Object *
            --> java.lang.String *
            --> java.util.Vector *
            --> java.util.Vector.get(int) *
            --> mtb_filters.Rank_Operator.m_img
            <-- mtb_filters.Rank_Operator.run(ij.process.ImageProcessor)
        run(ij.process.ImageProcessor)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getImagePlus()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getMetaData()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.setMetaData(de.unihalle.informatik.MiToBo.meta.MTBMetaData)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.show()
            --> de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams
            --> de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.getInputImage()
            --> de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.getMode()
            --> de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.getResultImage()
            --> de.unihalle.informatik.MiToBo.filters.nonlinear.RankOperatorParams.setMetaDataObject(de.unihalle.informatik.MiToBo.meta.MTBMetaData) *
            --> de.unihalle.informatik.MiToBo.meta.MTBMetaData
            --> de.unihalle.informatik.MiToBo.meta.MTBMetaData.clone()
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams
            --> ij.IJ.showStatus(java.lang.String) *
            --> ij.ImagePlus *
            --> ij.ImagePlus.getTitle() *
            --> ij.ImagePlus.setTitle(java.lang.String) *
            --> ij.process.ImageProcessor *
            --> java.lang.Object *
            --> java.lang.String *
            --> java.lang.String.valueOf(java.lang.Object) *
            --> java.lang.StringBuilder *
            --> java.lang.StringBuilder.StringBuilder(java.lang.String) *
            --> java.lang.StringBuilder.append(java.lang.String) *
            --> java.lang.StringBuilder.toString() *
            --> mtb_filters.Rank_Operator.m_img
            --> mtb_filters.Rank_Operator.parameterDialog()
            --> mtb_filters.Rank_Operator.runOp(de.unihalle.informatik.MiToBo.meta.MTBOpParams) *
        runOp(de.unihalle.informatik.MiToBo.meta.MTBOpParams) *
            <-- mtb_filters.Rank_Operator.run(ij.process.ImageProcessor)
        setup(java.lang.String, ij.ImagePlus)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.createMTBImage(ij.ImagePlus)
            --> ij.ImagePlus *
            --> java.lang.IllegalArgumentException *
            --> java.lang.String *
            --> mtb_filters.Rank_Operator.m_img
        statusUpdated(loci.formats.StatusEvent)
            --> ij.IJ.showProgress(int, int) *
            --> ij.IJ.showStatus(java.lang.String) *
            --> java.lang.String *
            --> loci.formats.StatusEvent *
            --> loci.formats.StatusEvent.getProgressMaximum() *
            --> loci.formats.StatusEvent.getProgressValue() *
            --> loci.formats.StatusEvent.getStatusMessage() *
mtb_granules
    Cell_Segment_2D
        --> ij.plugin.filter.PlugInFilter *
        --> java.lang.Object *
        Cell_Segment_2D()
            --> java.lang.Object.Object() *
        img
            --> ij.ImagePlus *
            <-- mtb_granules.Cell_Segment_2D.run(ij.process.ImageProcessor)
            <-- mtb_granules.Cell_Segment_2D.setup(java.lang.String, ij.ImagePlus)
        run(ij.process.ImageProcessor)
            --> de.unihalle.informatik.MiToBo.apps.cells2D.CellSegmentAlgos.CellSegmentAlgos()
            --> de.unihalle.informatik.MiToBo.apps.cells2D.CellSegmentAlgos.voronoiTesselation(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$GranuleDetectorParams.GranuleDetectorAlgos$GranuleDetectorParams(de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$Subroutine)
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$GranuleDetectorParams.getResultImage()
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$Subroutine
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos$Subroutine.DETECT_NUCLEI
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.GranuleDetectorAlgos()
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorAlgos.runOp(de.unihalle.informatik.MiToBo.meta.MTBOpParams) *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.createMTBImage(ij.ImagePlus)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.show()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.show() *
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams
            --> ij.ImagePlus *
            --> ij.ImagePlus.getHeight() *
            --> ij.ImagePlus.getProcessor() *
            --> ij.ImagePlus.getStack() *
            --> ij.ImagePlus.getWidth() *
            --> ij.ImageStack *
            --> ij.ImageStack.getProcessor(int) *
            --> ij.ImageStack.getSize() *
            --> ij.gui.NewImage.createShortImage(java.lang.String, int, int, int, int) *
            --> ij.process.ImageProcessor *
            --> ij.process.ImageProcessor.copyBits(ij.process.ImageProcessor, int, int, int) *
            --> java.lang.Class *
            --> java.lang.Object.getClass() *
            --> java.lang.String *
            --> mtb_granules.Cell_Segment_2D.img
        setup(java.lang.String, ij.ImagePlus)
            --> ij.ImagePlus *
            --> java.lang.String *
            --> mtb_granules.Cell_Segment_2D.img
    Granule_Detector_2D
        --> de.unihalle.informatik.MiToBo.meta.MTBOpBase
        --> ij.plugin.PlugIn *
        --> java.lang.Runnable *
        Granule_Detector_2D()
            --> de.unihalle.informatik.MiToBo.meta.MTBOpBase.MTBOpBase()
        detector
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorMain
            <-- mtb_granules.Granule_Detector_2D.run()
        getMetaParams()
            --> java.util.LinkedList *
            --> java.util.LinkedList.LinkedList() *
        operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams
            --> mtb_granules.Granule_Detector_2D.run()
        run()
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorMain
            --> de.unihalle.informatik.MiToBo.apps.granules2D.GranuleDetectorMain.GranuleDetectorMain()
            --> mtb_granules.Granule_Detector_2D.detector
            <-- mtb_granules.Granule_Detector_2D.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        run(java.lang.String)
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams.MTBOpParams()
            --> java.lang.String *
            --> mtb_granules.Granule_Detector_2D.runOp(de.unihalle.informatik.MiToBo.meta.MTBOpParams) *
        runOp(de.unihalle.informatik.MiToBo.meta.MTBOpParams) *
            <-- mtb_granules.Granule_Detector_2D.run(java.lang.String)
mtb_io
    Open_Image
        --> ij.plugin.PlugIn *
        --> java.awt.event.ActionListener *
        --> javax.swing.JFrame *
        Open_Image()
            --> javax.swing.JFrame.JFrame() *
        actionPerformed(java.awt.event.ActionEvent)
            --> java.awt.event.ActionEvent *
            --> java.awt.event.ActionEvent.getActionCommand() *
            --> java.io.PrintStream *
            --> java.io.PrintStream.println(java.lang.String) *
            --> java.lang.String *
            --> java.lang.System.out *
        channelWindow()
            --> java.awt.Component *
            --> java.awt.event.ActionListener *
            --> java.lang.String *
            --> javax.swing.AbstractButton *
            --> javax.swing.ButtonGroup.ButtonGroup() *
            --> javax.swing.ButtonGroup.add(javax.swing.AbstractButton) *
            --> javax.swing.ButtonGroup.setSelected(javax.swing.ButtonModel, boolean) *
            --> javax.swing.ButtonModel *
            --> javax.swing.JFrame.JFrame(java.lang.String) *
            --> javax.swing.JFrame.add(java.awt.Component) *
            --> javax.swing.JFrame.setDefaultCloseOperation(int) *
            --> javax.swing.JFrame.setLocationRelativeTo(java.awt.Component) *
            --> javax.swing.JFrame.setSize(int, int) *
            --> javax.swing.JFrame.setVisible(boolean) *
            --> javax.swing.JPanel.JPanel() *
            --> javax.swing.JPanel.add(java.awt.Component) *
            --> javax.swing.JRadioButton.JRadioButton(java.lang.String) *
            --> javax.swing.JRadioButton.addActionListener(java.awt.event.ActionListener) *
            --> javax.swing.JRadioButton.getModel() *
            --> javax.swing.JRadioButton.setActionCommand(java.lang.String) *
            --> javax.swing.JTextField.JTextField(int) *
            --> javax.swing.JTextField.addActionListener(java.awt.event.ActionListener) *
            --> javax.swing.JTextField.setText(java.lang.String) *
            --> javax.swing.JTextField.setToolTipText(java.lang.String) *
        currentDir
            --> java.lang.String *
            <-- mtb_io.Open_Image.open()
            <-- mtb_io.Open_Image.static {}
        fc
            --> javax.swing.JFileChooser *
        inputFile
            --> java.io.File *
            <-- mtb_io.Open_Image.open()
        inputImg
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            <-- mtb_io.Open_Image.open()
        open()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.show()
            --> de.unihalle.informatik.MiToBo.io.files.ImageFilter.ImageFilter()
            --> de.unihalle.informatik.MiToBo.io.files.ImgOpen.ImgOpen(java.io.File)
            --> de.unihalle.informatik.MiToBo.io.files.ImgOpen.open()
            --> java.awt.Component *
            --> java.io.File *
            --> java.io.File.toString() *
            --> java.io.PrintStream *
            --> java.io.PrintStream.println(java.lang.String) *
            --> java.lang.String *
            --> java.lang.System.out *
            --> javax.swing.JFileChooser.JFileChooser(java.lang.String) *
            --> javax.swing.JFileChooser.addChoosableFileFilter(javax.swing.filechooser.FileFilter) *
            --> javax.swing.JFileChooser.getCurrentDirectory() *
            --> javax.swing.JFileChooser.getSelectedFile() *
            --> javax.swing.JFileChooser.setAcceptAllFileFilterUsed(boolean) *
            --> javax.swing.JFileChooser.showOpenDialog(java.awt.Component) *
            --> javax.swing.filechooser.FileFilter *
            --> mtb_io.Open_Image.currentDir
            --> mtb_io.Open_Image.inputFile
            --> mtb_io.Open_Image.inputImg
            <-- mtb_io.Open_Image.run(java.lang.String)
        run(java.lang.String)
            --> java.lang.String *
            --> mtb_io.Open_Image.open()
        static {}
            --> java.lang.String *
            --> java.lang.System.getProperty(java.lang.String) *
            --> mtb_io.Open_Image.currentDir
    Save_Image
        --> ij.plugin.filter.PlugInFilter *
        --> javax.swing.JFrame *
        Save_Image()
            --> javax.swing.JFrame.JFrame() *
        currentDir
            --> java.lang.String *
            <-- mtb_io.Save_Image.save()
            <-- mtb_io.Save_Image.static {}
        img
            --> ij.ImagePlus *
            <-- mtb_io.Save_Image.save()
            <-- mtb_io.Save_Image.setup(java.lang.String, ij.ImagePlus)
        inputFile
            --> java.io.File *
            <-- mtb_io.Save_Image.save()
        inputImg
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            <-- mtb_io.Save_Image.save()
        run(ij.process.ImageProcessor)
            --> ij.process.ImageProcessor *
            --> mtb_io.Save_Image.save()
        save()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.createMTBImage(ij.ImagePlus)
            --> de.unihalle.informatik.MiToBo.io.files.ImageFilter.ImageFilter()
            --> de.unihalle.informatik.MiToBo.io.files.ImageFilter.accept(java.io.File)
            --> de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.io.File, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> de.unihalle.informatik.MiToBo.io.files.ImgSave.saveFile(boolean)
            --> ij.ImagePlus *
            --> java.awt.Component *
            --> java.io.File *
            --> java.io.File.exists() *
            --> java.io.File.toString() *
            --> java.io.PrintStream *
            --> java.io.PrintStream.println(java.lang.String) *
            --> java.lang.Object *
            --> java.lang.String *
            --> java.lang.StringBuilder *
            --> java.lang.StringBuilder.StringBuilder(java.lang.String) *
            --> java.lang.StringBuilder.append(java.lang.Object) *
            --> java.lang.StringBuilder.toString() *
            --> java.lang.System.out *
            --> javax.swing.Icon *
            --> javax.swing.JFileChooser.JFileChooser(java.lang.String) *
            --> javax.swing.JFileChooser.addChoosableFileFilter(javax.swing.filechooser.FileFilter) *
            --> javax.swing.JFileChooser.getCurrentDirectory() *
            --> javax.swing.JFileChooser.getSelectedFile() *
            --> javax.swing.JFileChooser.setAcceptAllFileFilterUsed(boolean) *
            --> javax.swing.JFileChooser.showSaveDialog(java.awt.Component) *
            --> javax.swing.JOptionPane.showMessageDialog(java.awt.Component, java.lang.Object, java.lang.String, int) *
            --> javax.swing.JOptionPane.showOptionDialog(java.awt.Component, java.lang.Object, java.lang.String, int, int, javax.swing.Icon, java.lang.Object[], java.lang.Object) *
            --> javax.swing.filechooser.FileFilter *
            --> mtb_io.Save_Image.currentDir
            --> mtb_io.Save_Image.img
            --> mtb_io.Save_Image.inputFile
            --> mtb_io.Save_Image.inputImg
            <-- mtb_io.Save_Image.run(ij.process.ImageProcessor)
        setup(java.lang.String, ij.ImagePlus)
            --> ij.ImagePlus *
            --> java.lang.String *
            --> mtb_io.Save_Image.img
        static {}
            --> java.lang.String *
            --> java.lang.System.getProperty(java.lang.String) *
            --> mtb_io.Save_Image.currentDir
mtb_morphology
    CalcOtsuThreshold_Image
        --> de.unihalle.informatik.MiToBo.meta.MTBOpBase
        --> ij.plugin.filter.PlugInFilter *
        CalcOtsuThreshold_Image()
            --> de.unihalle.informatik.MiToBo.meta.MTBOpBase.MTBOpBase()
        getMetaParams()
            --> java.util.LinkedList *
            --> java.util.LinkedList.LinkedList() *
        inputImage
            --> ij.ImagePlus *
            <-- mtb_morphology.CalcOtsuThreshold_Image.run(ij.process.ImageProcessor)
            <-- mtb_morphology.CalcOtsuThreshold_Image.setup(java.lang.String, ij.ImagePlus)
        inputProc
            --> ij.process.ImageProcessor *
            <-- mtb_morphology.CalcOtsuThreshold_Image.run(ij.process.ImageProcessor)
            <-- mtb_morphology.CalcOtsuThreshold_Image.setup(java.lang.String, ij.ImagePlus)
        mtbInput
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            <-- mtb_morphology.CalcOtsuThreshold_Image.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            <-- mtb_morphology.CalcOtsuThreshold_Image.run(ij.process.ImageProcessor)
        operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.meta.MTBMetaData
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams.getMetaDataObject()
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu$OtsuParams.CalcGlobalThreshOtsu$OtsuParams(de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu, de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu$OtsuParams.getParameter(java.lang.String) *
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu.CalcGlobalThreshOtsu()
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu.runOp(de.unihalle.informatik.MiToBo.meta.MTBOpParams) *
            --> ij.IJ.showMessage(java.lang.String) *
            --> java.lang.Class *
            --> java.lang.Object *
            --> java.lang.Object.getClass() *
            --> java.lang.String *
            --> java.lang.StringBuilder *
            --> java.lang.StringBuilder.StringBuilder() *
            --> java.lang.StringBuilder.StringBuilder(java.lang.String) *
            --> java.lang.StringBuilder.append(java.lang.Object) *
            --> java.lang.StringBuilder.append(java.lang.String) *
            --> java.lang.StringBuilder.toString() *
            --> mtb_morphology.CalcOtsuThreshold_Image.mtbInput
        run(ij.process.ImageProcessor)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.createMTBImage(ij.ImagePlus)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getMetaData()
            --> de.unihalle.informatik.MiToBo.meta.MTBMetaData
            --> de.unihalle.informatik.MiToBo.meta.MTBMetaData.clone()
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams.MTBOpParams()
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams.setMetaDataObject(de.unihalle.informatik.MiToBo.meta.MTBMetaData)
            --> ij.ImagePlus *
            --> ij.process.ImageProcessor *
            --> java.lang.Object *
            --> mtb_morphology.CalcOtsuThreshold_Image.inputImage
            --> mtb_morphology.CalcOtsuThreshold_Image.inputProc
            --> mtb_morphology.CalcOtsuThreshold_Image.mtbInput
            --> mtb_morphology.CalcOtsuThreshold_Image.runOp(de.unihalle.informatik.MiToBo.meta.MTBOpParams) *
        runOp(de.unihalle.informatik.MiToBo.meta.MTBOpParams) *
            <-- mtb_morphology.CalcOtsuThreshold_Image.run(ij.process.ImageProcessor)
        setup(java.lang.String, ij.ImagePlus)
            --> ij.ImagePlus *
            --> ij.ImagePlus.getProcessor() *
            --> ij.process.ImageProcessor *
            --> java.lang.String *
            --> mtb_morphology.CalcOtsuThreshold_Image.inputImage
            --> mtb_morphology.CalcOtsuThreshold_Image.inputProc
    Dilate_Image
        --> de.unihalle.informatik.MiToBo.meta.MTBOpBasePlugin
        Dilate_Image()
            --> de.unihalle.informatik.MiToBo.meta.MTBOpBasePlugin.MTBOpBasePlugin()
        mtbInput *
            <-- mtb_morphology.Dilate_Image.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte
            --> de.unihalle.informatik.MiToBo.meta.MTBMetaData
            --> de.unihalle.informatik.MiToBo.meta.MTBMetaData.writeToFile(java.lang.String)
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams.getMetaDataObject()
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams.setParameter(java.lang.String, java.lang.Object)
            --> de.unihalle.informatik.MiToBo.morphology.ImgDilate
            --> de.unihalle.informatik.MiToBo.morphology.ImgDilate$ImgDilateParams.ImgDilate$ImgDilateParams(de.unihalle.informatik.MiToBo.morphology.ImgDilate, de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            --> de.unihalle.informatik.MiToBo.morphology.ImgDilate$ImgDilateParams.getResultImage()
            --> de.unihalle.informatik.MiToBo.morphology.ImgDilate.ImgDilate()
            --> de.unihalle.informatik.MiToBo.morphology.ImgDilate.runOp(de.unihalle.informatik.MiToBo.meta.MTBOpParams) *
            --> ij.IJ.error(java.lang.String) *
            --> ij.IJ.getNumber(java.lang.String, double) *
            --> java.lang.Class *
            --> java.lang.Object *
            --> java.lang.Object.getClass() *
            --> java.lang.String *
            --> mtb_morphology.Dilate_Image.mtbInput *
        setup(java.lang.String, ij.ImagePlus)
            --> de.unihalle.informatik.MiToBo.meta.MTBOpBasePlugin.setup(java.lang.String, ij.ImagePlus)
            --> ij.ImagePlus *
            --> java.lang.String *
    Erode_Image
        --> de.unihalle.informatik.MiToBo.meta.MTBOpBasePlugin
        Erode_Image()
            --> de.unihalle.informatik.MiToBo.meta.MTBOpBasePlugin.MTBOpBasePlugin()
        mtbInput *
            <-- mtb_morphology.Erode_Image.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte
            --> de.unihalle.informatik.MiToBo.meta.MTBMetaData
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams.getMetaDataObject()
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams.setParameter(java.lang.String, java.lang.Object)
            --> de.unihalle.informatik.MiToBo.morphology.ImgErode
            --> de.unihalle.informatik.MiToBo.morphology.ImgErode$ImgErodeParams.ImgErode$ImgErodeParams(de.unihalle.informatik.MiToBo.morphology.ImgErode, de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            --> de.unihalle.informatik.MiToBo.morphology.ImgErode$ImgErodeParams.getResultImage()
            --> de.unihalle.informatik.MiToBo.morphology.ImgErode.ImgErode()
            --> de.unihalle.informatik.MiToBo.morphology.ImgErode.runOp(de.unihalle.informatik.MiToBo.meta.MTBOpParams) *
            --> ij.IJ.error(java.lang.String) *
            --> ij.IJ.getNumber(java.lang.String, double) *
            --> java.lang.Class *
            --> java.lang.Object *
            --> java.lang.Object.getClass() *
            --> java.lang.String *
            --> mtb_morphology.Erode_Image.mtbInput *
        setup(java.lang.String, ij.ImagePlus)
            --> de.unihalle.informatik.MiToBo.meta.MTBOpBasePlugin.setup(java.lang.String, ij.ImagePlus)
            --> ij.ImagePlus *
            --> java.lang.String *
    HDomeTransform_3D
        --> de.unihalle.informatik.MiToBo.meta.MTBOpBase
        --> ij.plugin.filter.PlugInFilter *
        HDomeTransform_3D()
            --> de.unihalle.informatik.MiToBo.meta.MTBOpBase.MTBOpBase()
        getMetaParams()
            --> java.lang.Object *
            --> java.util.LinkedList *
            --> java.util.LinkedList.LinkedList() *
            --> java.util.LinkedList.add(java.lang.Object) *
        m_img
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            <-- mtb_morphology.HDomeTransform_3D.parameterDialog()
            <-- mtb_morphology.HDomeTransform_3D.run(ij.process.ImageProcessor)
            <-- mtb_morphology.HDomeTransform_3D.setup(java.lang.String, ij.ImagePlus)
        operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams
            --> de.unihalle.informatik.MiToBo.morphology.HDomeTransform3D.HDomeTransform3D()
            --> de.unihalle.informatik.MiToBo.morphology.HDomeTransform3D.runOp(de.unihalle.informatik.MiToBo.meta.MTBOpParams) *
        parameterDialog()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.morphology.HDomeTransform3DParams
            --> de.unihalle.informatik.MiToBo.morphology.HDomeTransform3DParams.HDomeTransform3DParams(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double)
            --> ij.IJ.showMessage(java.lang.String) *
            --> ij.gui.GenericDialog.GenericDialog(java.lang.String) *
            --> ij.gui.GenericDialog.addNumericField(java.lang.String, double, int) *
            --> ij.gui.GenericDialog.getNextNumber() *
            --> ij.gui.GenericDialog.showDialog() *
            --> ij.gui.GenericDialog.wasOKed() *
            --> java.lang.String *
            --> mtb_morphology.HDomeTransform_3D.m_img
            <-- mtb_morphology.HDomeTransform_3D.run(ij.process.ImageProcessor)
        run(ij.process.ImageProcessor)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getImagePlus()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getMetaData()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.setMetaData(de.unihalle.informatik.MiToBo.meta.MTBMetaData)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.show()
            --> de.unihalle.informatik.MiToBo.meta.MTBMetaData
            --> de.unihalle.informatik.MiToBo.meta.MTBMetaData.clone()
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams
            --> de.unihalle.informatik.MiToBo.morphology.HDomeTransform3DParams
            --> de.unihalle.informatik.MiToBo.morphology.HDomeTransform3DParams.getH()
            --> de.unihalle.informatik.MiToBo.morphology.HDomeTransform3DParams.getInputImage()
            --> de.unihalle.informatik.MiToBo.morphology.HDomeTransform3DParams.getResultImage()
            --> de.unihalle.informatik.MiToBo.morphology.HDomeTransform3DParams.setMetaDataObject(de.unihalle.informatik.MiToBo.meta.MTBMetaData) *
            --> ij.IJ.showStatus(java.lang.String) *
            --> ij.ImagePlus *
            --> ij.ImagePlus.getTitle() *
            --> ij.ImagePlus.setTitle(java.lang.String) *
            --> ij.process.ImageProcessor *
            --> java.lang.Object *
            --> java.lang.String *
            --> java.lang.String.valueOf(java.lang.Object) *
            --> java.lang.StringBuilder *
            --> java.lang.StringBuilder.StringBuilder(java.lang.String) *
            --> java.lang.StringBuilder.append(double) *
            --> java.lang.StringBuilder.append(java.lang.String) *
            --> java.lang.StringBuilder.toString() *
            --> mtb_morphology.HDomeTransform_3D.m_img
            --> mtb_morphology.HDomeTransform_3D.parameterDialog()
            --> mtb_morphology.HDomeTransform_3D.runOp(de.unihalle.informatik.MiToBo.meta.MTBOpParams) *
        runOp(de.unihalle.informatik.MiToBo.meta.MTBOpParams) *
            <-- mtb_morphology.HDomeTransform_3D.run(ij.process.ImageProcessor)
        setup(java.lang.String, ij.ImagePlus)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.createMTBImage(ij.ImagePlus)
            --> ij.ImagePlus *
            --> java.lang.IllegalArgumentException *
            --> java.lang.String *
            --> mtb_morphology.HDomeTransform_3D.m_img
    Link_Components
        --> ij.plugin.filter.PlugInFilter *
        --> java.lang.Object *
        Link_Components()
            --> java.lang.Object.Object() *
        run(ij.process.ImageProcessor)
            --> de.unihalle.informatik.MiToBo.morphology.ComponentPostprocess.ComponentPostprocess()
            --> de.unihalle.informatik.MiToBo.morphology.ComponentPostprocess.LinkAdjacentComponents(ij.process.ImageProcessor, double)
            --> ij.ImagePlus *
            --> ij.ImagePlus.show() *
            --> ij.process.ImageProcessor *
        setup(java.lang.String, ij.ImagePlus)
            --> ij.ImagePlus *
            --> java.lang.String *
    Morph_3D
        --> ij.plugin.PlugIn *
        --> java.lang.Object *
        Morph_3D()
            --> java.lang.Object.Object() *
        run(java.lang.String)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.createMTBImage(ij.ImagePlus)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getImagePlus()
            --> de.unihalle.informatik.MiToBo.morphology.Morphology3D.close(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.morphology.StructuringElement, de.unihalle.informatik.MiToBo.morphology.StructuringElement)
            --> de.unihalle.informatik.MiToBo.morphology.Morphology3D.dilate(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.morphology.StructuringElement)
            --> de.unihalle.informatik.MiToBo.morphology.Morphology3D.erode(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.morphology.StructuringElement)
            --> de.unihalle.informatik.MiToBo.morphology.Morphology3D.open(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.morphology.StructuringElement, de.unihalle.informatik.MiToBo.morphology.StructuringElement)
            --> de.unihalle.informatik.MiToBo.morphology.StructuringElement
            --> de.unihalle.informatik.MiToBo.morphology.StructuringElement.createCube(int)
            --> de.unihalle.informatik.MiToBo.morphology.StructuringElement.createSphere(int)
            --> ij.ImagePlus *
            --> ij.ImagePlus.ImagePlus(java.lang.String) *
            --> ij.ImagePlus.show() *
            --> ij.gui.GenericDialog.GenericDialog(java.lang.String) *
            --> ij.gui.GenericDialog.addChoice(java.lang.String, java.lang.String[], java.lang.String) *
            --> ij.gui.GenericDialog.addNumericField(java.lang.String, double, int) *
            --> ij.gui.GenericDialog.getNextChoice() *
            --> ij.gui.GenericDialog.getNextNumber() *
            --> ij.gui.GenericDialog.showDialog() *
            --> ij.io.OpenDialog.OpenDialog(java.lang.String, java.lang.String) *
            --> ij.io.OpenDialog.getDirectory() *
            --> ij.io.OpenDialog.getFileName() *
            --> java.io.PrintStream *
            --> java.io.PrintStream.println(java.lang.String) *
            --> java.lang.Object *
            --> java.lang.String *
            --> java.lang.String.equalsIgnoreCase(java.lang.String) *
            --> java.lang.String.valueOf(java.lang.Object) *
            --> java.lang.StringBuilder *
            --> java.lang.StringBuilder.StringBuilder(java.lang.String) *
            --> java.lang.StringBuilder.append(java.lang.String) *
            --> java.lang.StringBuilder.toString() *
            --> java.lang.System.out *
    Threshold_Image
        --> ij.gui.DialogListener *
        --> ij.plugin.filter.PlugInFilter *
        --> java.lang.Object *
        Threshold_Image()
            --> java.lang.Object.Object() *
        dialogItemChanged(ij.gui.GenericDialog, java.awt.AWTEvent)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.updateAndRepaintWindow()
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThresh
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThresh.applyThresholdToSlice(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double, int)
            --> ij.ImagePlus *
            --> ij.ImagePlus.getCurrentSlice() *
            --> ij.ImagePlus.getDisplayRangeMax() *
            --> ij.gui.GenericDialog *
            --> ij.gui.GenericDialog.getChoices() *
            --> ij.gui.GenericDialog.getNextNumber() *
            --> java.awt.AWTEvent *
            --> java.awt.Choice *
            --> java.awt.Choice.getSelectedIndex() *
            --> java.lang.Math.round(double) *
            --> java.lang.Object *
            --> java.util.Vector *
            --> java.util.Vector.get(int) *
            --> mtb_morphology.Threshold_Image.m_bg
            --> mtb_morphology.Threshold_Image.m_fg
            --> mtb_morphology.Threshold_Image.m_img
            --> mtb_morphology.Threshold_Image.m_imgPlus
            --> mtb_morphology.Threshold_Image.m_th
            --> mtb_morphology.Threshold_Image.m_thresh
            --> mtb_morphology.Threshold_Image.m_threshImg
        m_bg
            <-- mtb_morphology.Threshold_Image.dialogItemChanged(ij.gui.GenericDialog, java.awt.AWTEvent)
            <-- mtb_morphology.Threshold_Image.run(ij.process.ImageProcessor)
        m_fg
            <-- mtb_morphology.Threshold_Image.dialogItemChanged(ij.gui.GenericDialog, java.awt.AWTEvent)
            <-- mtb_morphology.Threshold_Image.run(ij.process.ImageProcessor)
        m_img
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            <-- mtb_morphology.Threshold_Image.dialogItemChanged(ij.gui.GenericDialog, java.awt.AWTEvent)
            <-- mtb_morphology.Threshold_Image.run(ij.process.ImageProcessor)
        m_imgMax
            <-- mtb_morphology.Threshold_Image.run(ij.process.ImageProcessor)
            <-- mtb_morphology.Threshold_Image.thresholdSetupDialog()
        m_imgPlus
            --> ij.ImagePlus *
            <-- mtb_morphology.Threshold_Image.dialogItemChanged(ij.gui.GenericDialog, java.awt.AWTEvent)
            <-- mtb_morphology.Threshold_Image.run(ij.process.ImageProcessor)
            <-- mtb_morphology.Threshold_Image.setup(java.lang.String, ij.ImagePlus)
        m_th
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThresh
            <-- mtb_morphology.Threshold_Image.dialogItemChanged(ij.gui.GenericDialog, java.awt.AWTEvent)
            <-- mtb_morphology.Threshold_Image.run(ij.process.ImageProcessor)
        m_thresh
            <-- mtb_morphology.Threshold_Image.dialogItemChanged(ij.gui.GenericDialog, java.awt.AWTEvent)
            <-- mtb_morphology.Threshold_Image.run(ij.process.ImageProcessor)
        m_threshImg
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            <-- mtb_morphology.Threshold_Image.dialogItemChanged(ij.gui.GenericDialog, java.awt.AWTEvent)
            <-- mtb_morphology.Threshold_Image.run(ij.process.ImageProcessor)
        run(ij.process.ImageProcessor)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.close()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.createMTBImage(ij.ImagePlus)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.duplicate()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getImagePlus()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getMinMaxDouble()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeStack()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.show()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.updateAndRepaintWindow()
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThresh
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThresh.ImgThresh()
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThresh.applyThresholdToSlice(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double, int)
            --> ij.ImagePlus *
            --> ij.ImagePlus.getCurrentSlice() *
            --> ij.ImagePlus.setDisplayRange(double, double) *
            --> ij.ImagePlus.setPosition(int) *
            --> ij.process.ImageProcessor *
            --> mtb_morphology.Threshold_Image.m_bg
            --> mtb_morphology.Threshold_Image.m_fg
            --> mtb_morphology.Threshold_Image.m_img
            --> mtb_morphology.Threshold_Image.m_imgMax
            --> mtb_morphology.Threshold_Image.m_imgPlus
            --> mtb_morphology.Threshold_Image.m_th
            --> mtb_morphology.Threshold_Image.m_thresh
            --> mtb_morphology.Threshold_Image.m_threshImg
            --> mtb_morphology.Threshold_Image.thresholdSetupDialog()
        setup(java.lang.String, ij.ImagePlus)
            --> ij.ImagePlus *
            --> java.lang.String *
            --> mtb_morphology.Threshold_Image.m_imgPlus
        thresholdSetupDialog()
            --> ij.gui.DialogListener *
            --> ij.gui.GenericDialog.GenericDialog(java.lang.String) *
            --> ij.gui.GenericDialog.addChoice(java.lang.String, java.lang.String[], java.lang.String) *
            --> ij.gui.GenericDialog.addDialogListener(ij.gui.DialogListener) *
            --> ij.gui.GenericDialog.addMessage(java.lang.String) *
            --> ij.gui.GenericDialog.addSlider(java.lang.String, double, double, double) *
            --> ij.gui.GenericDialog.showDialog() *
            --> ij.gui.GenericDialog.wasOKed() *
            --> java.lang.String *
            --> mtb_morphology.Threshold_Image.m_imgMax
            <-- mtb_morphology.Threshold_Image.run(ij.process.ImageProcessor)
    Threshold_Image_Niblack
        --> de.unihalle.informatik.MiToBo.meta.MTBOpBasePlugin
        Threshold_Image_Niblack()
            --> de.unihalle.informatik.MiToBo.meta.MTBOpBasePlugin.MTBOpBasePlugin()
        mtbInput *
            <-- mtb_morphology.Threshold_Image_Niblack.operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
        operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte
            --> de.unihalle.informatik.MiToBo.meta.MTBMetaData
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams.getMetaDataObject()
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams.setParameter(java.lang.String, java.lang.Object)
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$Mode
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$Mode.STD
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams.ImgThreshNiblack$NiblackParams(de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack, de.unihalle.informatik.MiToBo.meta.MTBMetaData, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$Mode, double, double, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack$NiblackParams.getResultImage()
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.ImgThreshNiblack()
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.runOp(de.unihalle.informatik.MiToBo.meta.MTBOpParams) *
            --> ij.gui.GenericDialog.GenericDialog(java.lang.String) *
            --> ij.gui.GenericDialog.addNumericField(java.lang.String, double, int) *
            --> ij.gui.GenericDialog.getNextNumber() *
            --> ij.gui.GenericDialog.showDialog() *
            --> java.lang.Class *
            --> java.lang.Object *
            --> java.lang.Object.getClass() *
            --> java.lang.String *
            --> mtb_morphology.Threshold_Image_Niblack.mtbInput *
        setup(java.lang.String, ij.ImagePlus)
            --> de.unihalle.informatik.MiToBo.meta.MTBOpBasePlugin.setup(java.lang.String, ij.ImagePlus)
            --> ij.ImagePlus *
            --> java.lang.String *
mtb_neurites
    Neurit_Detector_2D
        --> ij.plugin.PlugIn *
        --> java.lang.Object *
        GVF
        Neurit_Detector_2D()
            --> java.lang.Object.Object() *
        activeContours(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, java.util.Vector, int, double)
            --> de.unihalle.informatik.MiToBo.datatypes.Snake
            --> de.unihalle.informatik.MiToBo.datatypes.Snake.Snake(java.util.Vector, boolean)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.segmentation.contours.snakes.SnakeAlgos.SnakeAlgos(de.unihalle.informatik.MiToBo.datatypes.Snake)
            --> de.unihalle.informatik.MiToBo.segmentation.contours.snakes.SnakeAlgos.calcSnake(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double[], double[], int, double)
            --> java.io.PrintStream *
            --> java.io.PrintStream.println(java.lang.String) *
            --> java.lang.String *
            --> java.lang.System.out *
            --> java.util.Vector *
            --> mtb_neurites.Neurit_Detector_2D.energyVector_U
            --> mtb_neurites.Neurit_Detector_2D.energyVector_V
            <-- mtb_neurites.Neurit_Detector_2D.process()
        cells
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
            <-- mtb_neurites.Neurit_Detector_2D.process()
        cores
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
        createResultDir(java.lang.String)
            --> java.io.File *
            --> java.io.File.File(java.lang.String) *
            --> java.io.File.exists() *
            --> java.io.File.getParent() *
            --> java.io.File.mkdir() *
            --> java.io.File.separator *
            --> java.io.File.toString() *
            --> java.io.PrintStream *
            --> java.io.PrintStream.println(java.lang.String) *
            --> java.lang.Object *
            --> java.lang.String *
            --> java.lang.String.valueOf(java.lang.Object) *
            --> java.lang.StringBuilder *
            --> java.lang.StringBuilder.StringBuilder(java.lang.String) *
            --> java.lang.StringBuilder.append(int) *
            --> java.lang.StringBuilder.append(java.lang.String) *
            --> java.lang.StringBuilder.toString() *
            --> java.lang.System.out *
            --> mtb_neurites.Neurit_Detector_2D.getDate()
            --> mtb_neurites.Neurit_Detector_2D.paramfile
            <-- mtb_neurites.Neurit_Detector_2D.process()
            --> mtb_neurites.Neurit_Detector_2D.resultDir
        drawSnakeRegion(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.Region2D)
            --> de.unihalle.informatik.MiToBo.datatypes.Region2D
            --> de.unihalle.informatik.MiToBo.datatypes.Region2D.getPoints()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeC()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeT()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeX()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeY()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeZ()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getType()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getValueDouble(int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.putValueDouble(int, int, double)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.createMTBImage(int, int, int, int, int, int) *
            --> java.awt.geom.Point2D$Double *
            --> java.awt.geom.Point2D$Double.getX() *
            --> java.awt.geom.Point2D$Double.getY() *
            --> java.lang.Math.round(double) *
            --> java.lang.Object *
            --> java.util.Vector *
            --> java.util.Vector.elementAt(int) *
            --> java.util.Vector.size() *
            <-- mtb_neurites.Neurit_Detector_2D.process()
        energyVector_U
            <-- mtb_neurites.Neurit_Detector_2D.activeContours(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, java.util.Vector, int, double)
            <-- mtb_neurites.Neurit_Detector_2D.getExtEnergy(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, int)
            <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
        energyVector_V
            <-- mtb_neurites.Neurit_Detector_2D.activeContours(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, java.util.Vector, int, double)
            <-- mtb_neurites.Neurit_Detector_2D.getExtEnergy(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, int)
            <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
        file_name_noExtension
            --> java.lang.String *
            <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
            <-- mtb_neurites.Neurit_Detector_2D.process()
        files
            --> java.lang.String *
            <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
            <-- mtb_neurites.Neurit_Detector_2D.process()
        getControlPoints(de.unihalle.informatik.MiToBo.datatypes.Contour2D)
            --> de.unihalle.informatik.MiToBo.datatypes.Contour2D
            --> de.unihalle.informatik.MiToBo.datatypes.Contour2D.getLength()
            --> de.unihalle.informatik.MiToBo.datatypes.Contour2D.getPointAt(int)
            --> java.awt.geom.Point2D$Double *
            --> java.lang.Object *
            --> java.util.Vector *
            --> java.util.Vector.Vector() *
            --> java.util.Vector.addElement(java.lang.Object) *
            <-- mtb_neurites.Neurit_Detector_2D.process()
        getDate()
            --> java.lang.String *
            --> java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String) *
            --> java.text.SimpleDateFormat.format(java.util.Date) *
            --> java.util.Date *
            --> java.util.Date.Date() *
            <-- mtb_neurites.Neurit_Detector_2D.createResultDir(java.lang.String)
        getExtEnergy(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> mtb_fields.Create_GVF.GVF_field(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            --> mtb_fields.Create_GVF.get_U()
            --> mtb_fields.Create_GVF.get_V()
            --> mtb_neurites.Neurit_Detector_2D.energyVector_U
            --> mtb_neurites.Neurit_Detector_2D.energyVector_V
            <-- mtb_neurites.Neurit_Detector_2D.process()
        getSnakeRegion(java.awt.Polygon)
            --> B[] *
            --> de.unihalle.informatik.MiToBo.datatypes.Region2D
            --> de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential.LabelComponentsSequential()
            --> de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential.regionSegmentation(ij.process.ImageProcessor, boolean)
            --> ij.ImagePlus *
            --> ij.ImagePlus.getProcessor() *
            --> ij.gui.NewImage.createByteImage(java.lang.String, int, int, int, int) *
            --> ij.process.ImageProcessor *
            --> ij.process.ImageProcessor.getPixels() *
            --> java.awt.Polygon *
            --> java.awt.Polygon.contains(int, int) *
            --> java.awt.Polygon.npoints *
            --> java.awt.Polygon.xpoints *
            --> java.awt.Polygon.ypoints *
            --> java.lang.Object *
            --> java.lang.String *
            --> java.util.Vector *
            --> java.util.Vector.elementAt(int) *
            --> mtb_neurites.Neurit_Detector_2D.height
            <-- mtb_neurites.Neurit_Detector_2D.process()
            --> mtb_neurites.Neurit_Detector_2D.width
        height
            <-- mtb_neurites.Neurit_Detector_2D.getSnakeRegion(java.awt.Polygon)
            <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
            <-- mtb_neurites.Neurit_Detector_2D.process()
            <-- mtb_neurites.Neurit_Detector_2D.removeCellBody(de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        imageDir
            --> java.lang.String *
            <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
            <-- mtb_neurites.Neurit_Detector_2D.process()
        noCellbody
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte
            <-- mtb_neurites.Neurit_Detector_2D.process()
            <-- mtb_neurites.Neurit_Detector_2D.removeCellBody(de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        opening
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte
            <-- mtb_neurites.Neurit_Detector_2D.process()
            <-- mtb_neurites.Neurit_Detector_2D.removeCellBody(de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
        paramfile
            --> java.io.File *
            <-- mtb_neurites.Neurit_Detector_2D.createResultDir(java.lang.String)
            <-- mtb_neurites.Neurit_Detector_2D.process()
        preSegmentation(int)
            --> de.unihalle.informatik.MiToBo.datatypes.Contour2D
            --> de.unihalle.informatik.MiToBo.datatypes.Region2D
            --> de.unihalle.informatik.MiToBo.datatypes.Region2D.getArea()
            --> de.unihalle.informatik.MiToBo.datatypes.Region2D.getPoints()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.createMTBImage(ij.ImagePlus)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getImagePlus()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.getImagePlus()
            --> de.unihalle.informatik.MiToBo.io.files.ImageFilter.ImageFilter()
            --> de.unihalle.informatik.MiToBo.io.files.ImageFilter.getName(java.io.File)
            --> de.unihalle.informatik.MiToBo.io.files.ImgOpen.ImgOpen(java.io.File)
            --> de.unihalle.informatik.MiToBo.io.files.ImgOpen.deleteBorder(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            --> de.unihalle.informatik.MiToBo.io.files.ImgOpen.open()
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams
            --> de.unihalle.informatik.MiToBo.morphology.ComponentPostprocess.ComponentPostprocess()
            --> de.unihalle.informatik.MiToBo.morphology.ComponentPostprocess.EraseSmallComponents(ij.process.ImageProcessor, int)
            --> de.unihalle.informatik.MiToBo.morphology.ComponentPostprocess.LinkAdjacentComponents(ij.process.ImageProcessor, double)
            --> de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential.LabelComponentsSequential()
            --> de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential.regionSegmentation(ij.process.ImageProcessor, boolean)
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu$OtsuParams.CalcGlobalThreshOtsu$OtsuParams(de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu$OtsuParams.getOtsuThreshold()
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu.CalcGlobalThreshOtsu()
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.CalcGlobalThreshOtsu.runOp(de.unihalle.informatik.MiToBo.meta.MTBOpParams) *
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThresh.ImgThresh()
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThresh.applyThreshold(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.ImgThreshNiblack()
            --> de.unihalle.informatik.MiToBo.segmentation.thresholds.ImgThreshNiblack.applyNiblackThresholdWholeImage(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            --> ij.ImagePlus *
            --> ij.ImagePlus.ImagePlus(java.lang.String, ij.process.ImageProcessor) *
            --> ij.ImagePlus.getProcessor() *
            --> ij.ImagePlus.getStack() *
            --> ij.ImageStack *
            --> ij.ImageStack.getProcessor(int) *
            --> ij.gui.NewImage.createByteImage(java.lang.String, int, int, int, int) *
            --> ij.process.ImageProcessor *
            --> ij.process.ImageProcessor.copyBits(ij.process.ImageProcessor, int, int, int) *
            --> ij.process.ImageProcessor.getHeight() *
            --> ij.process.ImageProcessor.getWidth() *
            --> ij.process.ImageProcessor.putPixel(int, int, int) *
            --> java.awt.geom.Point2D$Double *
            --> java.awt.geom.Point2D$Double.getX() *
            --> java.awt.geom.Point2D$Double.getY() *
            --> java.io.File *
            --> java.io.File.File(java.lang.String, java.lang.String) *
            --> java.io.File.isDirectory() *
            --> java.io.File.isFile() *
            --> java.io.File.separator *
            --> java.io.File.toString() *
            --> java.io.PrintStream *
            --> java.io.PrintStream.println(java.lang.String) *
            --> java.lang.Class *
            --> java.lang.Math.round(double) *
            --> java.lang.Object *
            --> java.lang.Object.getClass() *
            --> java.lang.String *
            --> java.lang.String.valueOf(java.lang.Object) *
            --> java.lang.StringBuilder *
            --> java.lang.StringBuilder.StringBuilder(java.lang.String) *
            --> java.lang.StringBuilder.append(java.lang.String) *
            --> java.lang.StringBuilder.toString() *
            --> java.lang.System.out *
            --> java.util.Vector *
            --> java.util.Vector.Vector(int) *
            --> java.util.Vector.addElement(java.lang.Object) *
            --> java.util.Vector.elementAt(int) *
            --> java.util.Vector.get(int) *
            --> java.util.Vector.remove(int) *
            --> java.util.Vector.removeElementAt(int) *
            --> java.util.Vector.size() *
            --> mtb_contours.Contour_on_Labeled_Components.get_ContoursOnRegions(ij.process.ImageProcessor, java.util.Vector)
            --> mtb_neurites.Neurit_Detector_2D.cells
            --> mtb_neurites.Neurit_Detector_2D.cores
            --> mtb_neurites.Neurit_Detector_2D.energyVector_U
            --> mtb_neurites.Neurit_Detector_2D.energyVector_V
            --> mtb_neurites.Neurit_Detector_2D.file_name_noExtension
            --> mtb_neurites.Neurit_Detector_2D.files
            --> mtb_neurites.Neurit_Detector_2D.height
            --> mtb_neurites.Neurit_Detector_2D.imageDir
            <-- mtb_neurites.Neurit_Detector_2D.process()
            --> mtb_neurites.Neurit_Detector_2D.protein
            --> mtb_neurites.Neurit_Detector_2D.resultDir
            --> mtb_neurites.Neurit_Detector_2D.result_bin_init
            --> mtb_neurites.Neurit_Detector_2D.result_bin_linked
            --> mtb_neurites.Neurit_Detector_2D.result_profiles
            --> mtb_neurites.Neurit_Detector_2D.result_snakes
            --> mtb_neurites.Neurit_Detector_2D.setResultDirs()
            --> mtb_neurites.Neurit_Detector_2D.testRegions(de.unihalle.informatik.MiToBo.datatypes.Region2D, de.unihalle.informatik.MiToBo.datatypes.Region2D)
            --> mtb_neurites.Neurit_Detector_2D.testRegions2(de.unihalle.informatik.MiToBo.datatypes.Region2D, de.unihalle.informatik.MiToBo.datatypes.Region2D)
            --> mtb_neurites.Neurit_Detector_2D.width
        process()
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.saveProfileList(java.util.LinkedList, java.lang.String)
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfile.saveVoronoiImage(java.lang.String)
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.NeuriteProfileExtraction()
            --> de.unihalle.informatik.MiToBo.apps.neurites2D.NeuriteProfileExtraction.calcLongestPathProfiles(ij.ImagePlus, ij.ImagePlus, ij.ImagePlus)
            --> de.unihalle.informatik.MiToBo.datatypes.Contour2D
            --> de.unihalle.informatik.MiToBo.datatypes.Region2D
            --> de.unihalle.informatik.MiToBo.datatypes.Region2D.toMTBImageByte(java.lang.String, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.Snake
            --> de.unihalle.informatik.MiToBo.datatypes.Snake.Snake(java.util.Vector, boolean)
            --> de.unihalle.informatik.MiToBo.datatypes.Snake.getPoints()
            --> de.unihalle.informatik.MiToBo.datatypes.Snake.getSnakePolygon()
            --> de.unihalle.informatik.MiToBo.datatypes.Snake.setPoints(java.util.Vector)
            --> de.unihalle.informatik.MiToBo.datatypes.Snake.toMTBImage(java.lang.String, int, int, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> de.unihalle.informatik.MiToBo.datatypes.Snake.toMTBImageByte(java.lang.String, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getImagePlus()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.getImagePlus()
            --> de.unihalle.informatik.MiToBo.io.files.ImgSave.ImgSave(java.io.File, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage)
            --> de.unihalle.informatik.MiToBo.io.files.ImgSave.saveFile(boolean)
            --> de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.Resampler(java.util.Vector, double)
            --> de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.getPoints()
            --> de.unihalle.informatik.MiToBo.segmentation.contours.snakes.Resampler.rearrange(int)
            --> de.unihalle.informatik.MiToBo.segmentation.contours.snakes.SnakeAlgos.SnakeAlgos(de.unihalle.informatik.MiToBo.datatypes.Snake)
            --> de.unihalle.informatik.MiToBo.segmentation.contours.snakes.SnakeAlgos.addAllPoints()
            --> ij.ImagePlus *
            --> java.awt.Polygon *
            --> java.io.BufferedReader.BufferedReader(java.io.Reader) *
            --> java.io.BufferedReader.readLine() *
            --> java.io.File *
            --> java.io.File.File(java.lang.String) *
            --> java.io.File.getName() *
            --> java.io.File.list() *
            --> java.io.File.separator *
            --> java.io.FileReader.FileReader(java.io.File) *
            --> java.io.IOException *
            --> java.io.PrintStream *
            --> java.io.PrintStream.println(java.lang.String) *
            --> java.io.Reader *
            --> java.lang.Double *
            --> java.lang.Double.doubleValue() *
            --> java.lang.Double.valueOf(java.lang.String) *
            --> java.lang.Integer *
            --> java.lang.Integer.intValue() *
            --> java.lang.Integer.valueOf(java.lang.String) *
            --> java.lang.Object *
            --> java.lang.String *
            --> java.lang.String.valueOf(java.lang.Object) *
            --> java.lang.StringBuilder *
            --> java.lang.StringBuilder.StringBuilder(java.lang.String) *
            --> java.lang.StringBuilder.append(double) *
            --> java.lang.StringBuilder.append(int) *
            --> java.lang.StringBuilder.append(java.lang.Object) *
            --> java.lang.StringBuilder.append(java.lang.String) *
            --> java.lang.StringBuilder.toString() *
            --> java.lang.System.out *
            --> java.util.LinkedList *
            --> java.util.LinkedList.get(int) *
            --> java.util.LinkedList.size() *
            --> java.util.Vector *
            --> mtb_neurites.Neurit_Detector_2D.activeContours(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, java.util.Vector, int, double)
            --> mtb_neurites.Neurit_Detector_2D.cells
            --> mtb_neurites.Neurit_Detector_2D.createResultDir(java.lang.String)
            --> mtb_neurites.Neurit_Detector_2D.drawSnakeRegion(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, de.unihalle.informatik.MiToBo.datatypes.Region2D)
            --> mtb_neurites.Neurit_Detector_2D.file_name_noExtension
            --> mtb_neurites.Neurit_Detector_2D.files
            --> mtb_neurites.Neurit_Detector_2D.getControlPoints(de.unihalle.informatik.MiToBo.datatypes.Contour2D)
            --> mtb_neurites.Neurit_Detector_2D.getExtEnergy(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int, int)
            --> mtb_neurites.Neurit_Detector_2D.getSnakeRegion(java.awt.Polygon)
            --> mtb_neurites.Neurit_Detector_2D.height
            --> mtb_neurites.Neurit_Detector_2D.imageDir
            --> mtb_neurites.Neurit_Detector_2D.noCellbody
            --> mtb_neurites.Neurit_Detector_2D.opening
            --> mtb_neurites.Neurit_Detector_2D.paramfile
            --> mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
            --> mtb_neurites.Neurit_Detector_2D.protein
            --> mtb_neurites.Neurit_Detector_2D.removeCellBody(de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            --> mtb_neurites.Neurit_Detector_2D.result_profiles
            --> mtb_neurites.Neurit_Detector_2D.result_snakes
            <-- mtb_neurites.Neurit_Detector_2D.run(java.lang.String)
            --> mtb_neurites.Neurit_Detector_2D.width
        protein
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
            <-- mtb_neurites.Neurit_Detector_2D.process()
        removeCellBody(de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
            --> B[] *
            --> de.unihalle.informatik.MiToBo.datatypes.Region2D
            --> de.unihalle.informatik.MiToBo.datatypes.Region2D.getArea()
            --> de.unihalle.informatik.MiToBo.datatypes.Region2D.getPoints()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.createMTBImage(int, int, int, int, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.createMTBImage(ij.ImagePlus) *
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.getImagePlus()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte.show() *
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams
            --> de.unihalle.informatik.MiToBo.morphology.ImgDilate
            --> de.unihalle.informatik.MiToBo.morphology.ImgDilate$ImgDilateParams.ImgDilate$ImgDilateParams(de.unihalle.informatik.MiToBo.morphology.ImgDilate, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            --> de.unihalle.informatik.MiToBo.morphology.ImgDilate$ImgDilateParams.getResultImage()
            --> de.unihalle.informatik.MiToBo.morphology.ImgDilate.ImgDilate()
            --> de.unihalle.informatik.MiToBo.morphology.ImgDilate.runOp(de.unihalle.informatik.MiToBo.meta.MTBOpParams) *
            --> de.unihalle.informatik.MiToBo.morphology.ImgErode
            --> de.unihalle.informatik.MiToBo.morphology.ImgErode$ImgErodeParams.ImgErode$ImgErodeParams(de.unihalle.informatik.MiToBo.morphology.ImgErode, de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, int)
            --> de.unihalle.informatik.MiToBo.morphology.ImgErode$ImgErodeParams.getResultImage()
            --> de.unihalle.informatik.MiToBo.morphology.ImgErode.ImgErode()
            --> de.unihalle.informatik.MiToBo.morphology.ImgErode.runOp(de.unihalle.informatik.MiToBo.meta.MTBOpParams) *
            --> de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential.LabelComponentsSequential()
            --> de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential.regionSegmentation(ij.process.ImageProcessor, boolean)
            --> ij.ImagePlus *
            --> ij.ImagePlus.getProcessor() *
            --> ij.gui.NewImage.createByteImage(java.lang.String, int, int, int, int) *
            --> ij.process.ImageProcessor *
            --> ij.process.ImageProcessor.copyBits(ij.process.ImageProcessor, int, int, int) *
            --> ij.process.ImageProcessor.getPixels() *
            --> java.awt.geom.Point2D$Double *
            --> java.awt.geom.Point2D$Double.getX() *
            --> java.awt.geom.Point2D$Double.getY() *
            --> java.lang.Class *
            --> java.lang.Object *
            --> java.lang.Object.getClass() *
            --> java.lang.String *
            --> java.util.Vector *
            --> java.util.Vector.elementAt(int) *
            --> java.util.Vector.size() *
            --> mtb_neurites.Neurit_Detector_2D.height
            --> mtb_neurites.Neurit_Detector_2D.noCellbody
            --> mtb_neurites.Neurit_Detector_2D.opening
            <-- mtb_neurites.Neurit_Detector_2D.process()
            --> mtb_neurites.Neurit_Detector_2D.width
        resultDir
            --> java.lang.String *
            <-- mtb_neurites.Neurit_Detector_2D.createResultDir(java.lang.String)
            <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
        result_bin_init
            --> java.lang.String *
            <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
            <-- mtb_neurites.Neurit_Detector_2D.setResultDirs()
        result_bin_linked
            --> java.lang.String *
            <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
            <-- mtb_neurites.Neurit_Detector_2D.setResultDirs()
        result_profiles
            --> java.lang.String *
            <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
            <-- mtb_neurites.Neurit_Detector_2D.process()
            <-- mtb_neurites.Neurit_Detector_2D.setResultDirs()
        result_snakes
            --> java.lang.String *
            <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
            <-- mtb_neurites.Neurit_Detector_2D.process()
            <-- mtb_neurites.Neurit_Detector_2D.setResultDirs()
        run(java.lang.String)
            --> java.io.PrintStream *
            --> java.io.PrintStream.println(java.lang.String) *
            --> java.lang.String *
            --> java.lang.System.out *
            --> mtb_neurites.Neurit_Detector_2D.process()
        setResultDirs()
            --> java.io.File.File(java.lang.String) *
            --> java.io.File.mkdirs() *
            --> java.lang.String *
            <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
            --> mtb_neurites.Neurit_Detector_2D.result_bin_init
            --> mtb_neurites.Neurit_Detector_2D.result_bin_linked
            --> mtb_neurites.Neurit_Detector_2D.result_profiles
            --> mtb_neurites.Neurit_Detector_2D.result_snakes
        testRegions(de.unihalle.informatik.MiToBo.datatypes.Region2D, de.unihalle.informatik.MiToBo.datatypes.Region2D)
            --> de.unihalle.informatik.MiToBo.datatypes.Region2D
            --> de.unihalle.informatik.MiToBo.datatypes.Region2D.getArea()
            --> de.unihalle.informatik.MiToBo.datatypes.Region2D.getPoints()
            --> java.lang.Object *
            --> java.util.Vector *
            --> java.util.Vector.contains(java.lang.Object) *
            --> java.util.Vector.elementAt(int) *
            <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
        testRegions2(de.unihalle.informatik.MiToBo.datatypes.Region2D, de.unihalle.informatik.MiToBo.datatypes.Region2D)
            --> de.unihalle.informatik.MiToBo.datatypes.Region2D
            --> de.unihalle.informatik.MiToBo.datatypes.Region2D.getArea()
            --> de.unihalle.informatik.MiToBo.datatypes.Region2D.getPoints()
            --> java.lang.Object *
            --> java.util.Vector *
            --> java.util.Vector.contains(java.lang.Object) *
            --> java.util.Vector.elementAt(int) *
            <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
        width
            <-- mtb_neurites.Neurit_Detector_2D.getSnakeRegion(java.awt.Polygon)
            <-- mtb_neurites.Neurit_Detector_2D.preSegmentation(int)
            <-- mtb_neurites.Neurit_Detector_2D.process()
            <-- mtb_neurites.Neurit_Detector_2D.removeCellBody(de.unihalle.informatik.MiToBo.datatypes.images.MTBImageByte)
mtb_regions
    Label_Components_Recursive
        --> ij.plugin.filter.PlugInFilter *
        --> java.lang.Object *
        Label_Components_Recursive()
            --> java.lang.Object.Object() *
        height
            <-- mtb_regions.Label_Components_Recursive.run(ij.process.ImageProcessor)
            <-- mtb_regions.Label_Components_Recursive.setup(java.lang.String, ij.ImagePlus)
        run(ij.process.ImageProcessor)
            --> de.unihalle.informatik.MiToBo.datatypes.Region2D
            --> de.unihalle.informatik.MiToBo.datatypes.Region2D.getPoints()
            --> de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsRecursive.LabelComponentsRecursive()
            --> de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsRecursive.regionSegmentation(ij.process.ImageProcessor)
            --> ij.ImagePlus *
            --> ij.ImagePlus.getProcessor() *
            --> ij.ImagePlus.show() *
            --> ij.gui.NewImage.createRGBImage(java.lang.String, int, int, int, int) *
            --> ij.process.ImageProcessor *
            --> ij.process.ImageProcessor.putPixel(int, int, int) *
            --> java.awt.geom.Point2D$Double *
            --> java.awt.geom.Point2D$Double.getX() *
            --> java.awt.geom.Point2D$Double.getY() *
            --> java.lang.Math.round(double) *
            --> java.lang.Object *
            --> java.lang.String *
            --> java.util.Random.Random() *
            --> java.util.Random.nextInt() *
            --> java.util.Vector *
            --> java.util.Vector.elementAt(int) *
            --> java.util.Vector.size() *
            --> mtb_regions.Label_Components_Recursive.height
            --> mtb_regions.Label_Components_Recursive.width
        setup(java.lang.String, ij.ImagePlus)
            --> ij.ImagePlus *
            --> ij.ImagePlus.getHeight() *
            --> ij.ImagePlus.getWidth() *
            --> java.lang.String *
            --> mtb_regions.Label_Components_Recursive.height
            --> mtb_regions.Label_Components_Recursive.width
        width
            <-- mtb_regions.Label_Components_Recursive.run(ij.process.ImageProcessor)
            <-- mtb_regions.Label_Components_Recursive.setup(java.lang.String, ij.ImagePlus)
    Label_Components_Sequential
        --> ij.plugin.filter.PlugInFilter *
        --> java.lang.Object *
        Label_Components_Sequential()
            --> java.lang.Object.Object() *
            --> mtb_regions.Label_Components_Sequential.NEIGH_4
            --> mtb_regions.Label_Components_Sequential.NEIGH_8
            --> mtb_regions.Label_Components_Sequential.NEIGH_CANCELED
        NEIGH_4
            <-- mtb_regions.Label_Components_Sequential.Label_Components_Sequential()
        NEIGH_8
            <-- mtb_regions.Label_Components_Sequential.Label_Components_Sequential()
        NEIGH_CANCELED
            <-- mtb_regions.Label_Components_Sequential.Label_Components_Sequential()
        chooseNeighborhoodDialog()
            --> ij.gui.GenericDialog.GenericDialog(java.lang.String) *
            --> ij.gui.GenericDialog.addChoice(java.lang.String, java.lang.String[], java.lang.String) *
            --> ij.gui.GenericDialog.getNextChoiceIndex() *
            --> ij.gui.GenericDialog.showDialog() *
            --> ij.gui.GenericDialog.wasCanceled() *
            --> java.lang.String *
            <-- mtb_regions.Label_Components_Sequential.run(ij.process.ImageProcessor)
        m_height
            <-- mtb_regions.Label_Components_Sequential.run(ij.process.ImageProcessor)
            <-- mtb_regions.Label_Components_Sequential.setup(java.lang.String, ij.ImagePlus)
        m_title
            --> java.lang.String *
            <-- mtb_regions.Label_Components_Sequential.run(ij.process.ImageProcessor)
            <-- mtb_regions.Label_Components_Sequential.setup(java.lang.String, ij.ImagePlus)
        m_width
            <-- mtb_regions.Label_Components_Sequential.run(ij.process.ImageProcessor)
            <-- mtb_regions.Label_Components_Sequential.setup(java.lang.String, ij.ImagePlus)
        run(ij.process.ImageProcessor)
            --> de.unihalle.informatik.MiToBo.datatypes.Region2D
            --> de.unihalle.informatik.MiToBo.datatypes.Region2D.getPoints()
            --> de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential.LabelComponentsSequential()
            --> de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential.regionSegmentation(ij.process.ImageProcessor, boolean)
            --> ij.IJ.error(java.lang.String) *
            --> ij.ImagePlus *
            --> ij.ImagePlus.getProcessor() *
            --> ij.ImagePlus.show() *
            --> ij.gui.NewImage.createRGBImage(java.lang.String, int, int, int, int) *
            --> ij.process.ImageProcessor *
            --> ij.process.ImageProcessor.putPixel(int, int, int) *
            --> java.awt.geom.Point2D$Double *
            --> java.awt.geom.Point2D$Double.getX() *
            --> java.awt.geom.Point2D$Double.getY() *
            --> java.lang.Math.round(double) *
            --> java.lang.Object *
            --> java.lang.String *
            --> java.lang.String.valueOf(java.lang.Object) *
            --> java.lang.StringBuilder *
            --> java.lang.StringBuilder.StringBuilder(java.lang.String) *
            --> java.lang.StringBuilder.append(int) *
            --> java.lang.StringBuilder.append(java.lang.String) *
            --> java.lang.StringBuilder.toString() *
            --> java.util.Random.Random() *
            --> java.util.Random.nextInt() *
            --> java.util.Vector *
            --> java.util.Vector.elementAt(int) *
            --> java.util.Vector.size() *
            --> mtb_regions.Label_Components_Sequential.chooseNeighborhoodDialog()
            --> mtb_regions.Label_Components_Sequential.m_height
            --> mtb_regions.Label_Components_Sequential.m_title
            --> mtb_regions.Label_Components_Sequential.m_width
        setup(java.lang.String, ij.ImagePlus)
            --> ij.ImagePlus *
            --> ij.ImagePlus.getHeight() *
            --> ij.ImagePlus.getTitle() *
            --> ij.ImagePlus.getWidth() *
            --> java.lang.String *
            --> mtb_regions.Label_Components_Sequential.m_height
            --> mtb_regions.Label_Components_Sequential.m_title
            --> mtb_regions.Label_Components_Sequential.m_width
    Label_Components_Sequential_3D
        --> de.unihalle.informatik.MiToBo.meta.MTBOpBase
        --> ij.plugin.filter.PlugInFilter *
        --> loci.formats.StatusListener *
        Label_Components_Sequential_3D()
            --> de.unihalle.informatik.MiToBo.meta.MTBOpBase.MTBOpBase()
        getMetaParams()
            --> java.lang.Object *
            --> java.util.LinkedList *
            --> java.util.LinkedList.LinkedList() *
            --> java.util.LinkedList.add(java.lang.Object) *
        m_actC
            <-- mtb_regions.Label_Components_Sequential_3D.run(ij.process.ImageProcessor)
            <-- mtb_regions.Label_Components_Sequential_3D.setup(java.lang.String, ij.ImagePlus)
        m_actSlice
            <-- mtb_regions.Label_Components_Sequential_3D.run(ij.process.ImageProcessor)
            <-- mtb_regions.Label_Components_Sequential_3D.setup(java.lang.String, ij.ImagePlus)
        m_actT
            <-- mtb_regions.Label_Components_Sequential_3D.run(ij.process.ImageProcessor)
            <-- mtb_regions.Label_Components_Sequential_3D.setup(java.lang.String, ij.ImagePlus)
        m_actZ
            <-- mtb_regions.Label_Components_Sequential_3D.run(ij.process.ImageProcessor)
            <-- mtb_regions.Label_Components_Sequential_3D.setup(java.lang.String, ij.ImagePlus)
        m_img
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            <-- mtb_regions.Label_Components_Sequential_3D.parameterDialog()
            <-- mtb_regions.Label_Components_Sequential_3D.run(ij.process.ImageProcessor)
            <-- mtb_regions.Label_Components_Sequential_3D.setup(java.lang.String, ij.ImagePlus)
        operate(de.unihalle.informatik.MiToBo.meta.MTBOpParams)
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams
            --> de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3D.LabelComponentsSequential3D()
            --> de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3D.runOp(de.unihalle.informatik.MiToBo.meta.MTBOpParams) *
        parameterDialog()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3DParams
            --> de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3DParams.LabelComponentsSequential3DParams(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, boolean)
            --> ij.gui.GenericDialog.GenericDialog(java.lang.String) *
            --> ij.gui.GenericDialog.addChoice(java.lang.String, java.lang.String[], java.lang.String) *
            --> ij.gui.GenericDialog.getNextChoiceIndex() *
            --> ij.gui.GenericDialog.showDialog() *
            --> ij.gui.GenericDialog.wasOKed() *
            --> java.lang.String *
            --> mtb_regions.Label_Components_Sequential_3D.m_img
            <-- mtb_regions.Label_Components_Sequential_3D.run(ij.process.ImageProcessor)
        run(ij.process.ImageProcessor)
            --> de.unihalle.informatik.MiToBo.datatypes.Point3D
            --> de.unihalle.informatik.MiToBo.datatypes.Point3D.getX()
            --> de.unihalle.informatik.MiToBo.datatypes.Point3D.getY()
            --> de.unihalle.informatik.MiToBo.datatypes.Point3D.getZ()
            --> de.unihalle.informatik.MiToBo.datatypes.Region3D
            --> de.unihalle.informatik.MiToBo.datatypes.Region3D.getPoints()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.createMTBImage(int, int, int, int, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getImagePlus()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getMetaData()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeC()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeT()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeX()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeY()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeZ()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.putValueInt(int, int, int, int, int, int)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.setMetaData(de.unihalle.informatik.MiToBo.meta.MTBMetaData)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImageInt.getImagePlusRGB()
            --> de.unihalle.informatik.MiToBo.meta.MTBMetaData
            --> de.unihalle.informatik.MiToBo.meta.MTBMetaData.clone()
            --> de.unihalle.informatik.MiToBo.meta.MTBOpParams
            --> de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3DParams
            --> de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3DParams.getInputImage()
            --> de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3DParams.getResultingRegions(int, int)
            --> de.unihalle.informatik.MiToBo.segmentation.regions.labeling.LabelComponentsSequential3DParams.setMetaDataObject(de.unihalle.informatik.MiToBo.meta.MTBMetaData) *
            --> ij.IJ.showStatus(java.lang.String) *
            --> ij.ImagePlus *
            --> ij.ImagePlus.getTitle() *
            --> ij.ImagePlus.getWindow() *
            --> ij.ImagePlus.setOpenAsHyperStack(boolean) *
            --> ij.ImagePlus.setPosition(int) *
            --> ij.ImagePlus.setTitle(java.lang.String) *
            --> ij.ImagePlus.show() *
            --> ij.gui.ImageWindow *
            --> ij.gui.StackWindow *
            --> ij.gui.StackWindow.setPosition(int, int, int) *
            --> ij.gui.StackWindow.updateSliceSelector() *
            --> ij.process.ImageProcessor *
            --> java.lang.Math.round(double) *
            --> java.lang.Object *
            --> java.lang.String *
            --> java.lang.String.valueOf(java.lang.Object) *
            --> java.lang.StringBuilder *
            --> java.lang.StringBuilder.StringBuilder(java.lang.String) *
            --> java.lang.StringBuilder.append(java.lang.String) *
            --> java.lang.StringBuilder.toString() *
            --> java.util.Random.Random() *
            --> java.util.Random.nextInt() *
            --> java.util.Vector *
            --> java.util.Vector.elementAt(int) *
            --> java.util.Vector.size() *
            --> mtb_regions.Label_Components_Sequential_3D.m_actC
            --> mtb_regions.Label_Components_Sequential_3D.m_actSlice
            --> mtb_regions.Label_Components_Sequential_3D.m_actT
            --> mtb_regions.Label_Components_Sequential_3D.m_actZ
            --> mtb_regions.Label_Components_Sequential_3D.m_img
            --> mtb_regions.Label_Components_Sequential_3D.parameterDialog()
            --> mtb_regions.Label_Components_Sequential_3D.runOp(de.unihalle.informatik.MiToBo.meta.MTBOpParams) *
        runOp(de.unihalle.informatik.MiToBo.meta.MTBOpParams) *
            <-- mtb_regions.Label_Components_Sequential_3D.run(ij.process.ImageProcessor)
        setup(java.lang.String, ij.ImagePlus)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.createMTBImage(ij.ImagePlus)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeC()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeZ()
            --> ij.ImagePlus *
            --> ij.ImagePlus.getCurrentSlice() *
            --> java.lang.IllegalArgumentException *
            --> java.lang.String *
            --> mtb_regions.Label_Components_Sequential_3D.m_actC
            --> mtb_regions.Label_Components_Sequential_3D.m_actSlice
            --> mtb_regions.Label_Components_Sequential_3D.m_actT
            --> mtb_regions.Label_Components_Sequential_3D.m_actZ
            --> mtb_regions.Label_Components_Sequential_3D.m_img
        statusUpdated(loci.formats.StatusEvent)
            --> ij.IJ.showProgress(int, int) *
            --> ij.IJ.showStatus(java.lang.String) *
            --> java.lang.String *
            --> loci.formats.StatusEvent *
            --> loci.formats.StatusEvent.getProgressMaximum() *
            --> loci.formats.StatusEvent.getProgressValue() *
            --> loci.formats.StatusEvent.getStatusMessage() *
    Segment_No_Edges3D
        --> ij.plugin.filter.PlugInFilter *
        --> java.lang.Object *
        Segment_No_Edges3D()
            --> java.lang.Object.Object() *
        img
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            <-- mtb_regions.Segment_No_Edges3D.run(ij.process.ImageProcessor)
            <-- mtb_regions.Segment_No_Edges3D.setup(java.lang.String, ij.ImagePlus)
        run(ij.process.ImageProcessor)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getImagePlus()
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.getSizeC()
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.NoEdgesSolver3D(de.unihalle.informatik.MiToBo.datatypes.images.MTBImage, double, double, double, double, int)
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.getLevelSetAsBinary()
            --> de.unihalle.informatik.MiToBo.segmentation.levelset.NoEdgesSolver3D.solve()
            --> ij.IJ.showMessage(java.lang.String) *
            --> ij.IJ.showStatus(java.lang.String) *
            --> ij.ImagePlus *
            --> ij.ImagePlus.show() *
            --> ij.gui.GenericDialog.GenericDialog(java.lang.String) *
            --> ij.gui.GenericDialog.addNumericField(java.lang.String, double, int) *
            --> ij.gui.GenericDialog.getNextNumber() *
            --> ij.gui.GenericDialog.showDialog() *
            --> ij.process.ImageProcessor *
            --> java.io.PrintStream *
            --> java.io.PrintStream.println(java.lang.String) *
            --> java.lang.String *
            --> java.lang.StringBuilder *
            --> java.lang.StringBuilder.StringBuilder(java.lang.String) *
            --> java.lang.StringBuilder.append(double) *
            --> java.lang.StringBuilder.append(java.lang.String) *
            --> java.lang.StringBuilder.append(long) *
            --> java.lang.StringBuilder.toString() *
            --> java.lang.System.currentTimeMillis() *
            --> java.lang.System.out *
            --> mtb_regions.Segment_No_Edges3D.img
        setup(java.lang.String, ij.ImagePlus)
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage
            --> de.unihalle.informatik.MiToBo.datatypes.images.MTBImage.createMTBImage(ij.ImagePlus)
            --> ij.ImagePlus *
            --> java.io.PrintStream *
            --> java.io.PrintStream.println(java.lang.String) *
            --> java.lang.IllegalArgumentException *
            --> java.lang.IllegalArgumentException.getMessage() *
            --> java.lang.String *
            --> java.lang.System.err *
            --> mtb_regions.Segment_No_Edges3D.img
org.apache.tools.ant *
    BuildException *
        <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.execute()
        <-- de.unihalle.informatik.MiToBo_admin.ant.GetLastCvsTag.execute()
        <-- de.unihalle.informatik.MiToBo_admin.ant.MakePluginConfig.execute()
    Project *
        <-- de.unihalle.informatik.MiToBo_admin.ant.GetLastCvsTag.execute()
        setUserProperty(java.lang.String, java.lang.String) *
            <-- de.unihalle.informatik.MiToBo_admin.ant.GetLastCvsTag.execute()
    Task *
        <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList
        <-- de.unihalle.informatik.MiToBo_admin.ant.GetLastCvsTag
        <-- de.unihalle.informatik.MiToBo_admin.ant.MakePluginConfig
        Task() *
            <-- de.unihalle.informatik.MiToBo_admin.ant.ExtractClassDepList.ExtractClassDepList()
            <-- de.unihalle.informatik.MiToBo_admin.ant.GetLastCvsTag.GetLastCvsTag()
            <-- de.unihalle.informatik.MiToBo_admin.ant.MakePluginConfig.MakePluginConfig()
org.w3c.dom *
    DOMImplementation *
        <-- de.unihalle.informatik.MiToBo.meta.MTBMetaData.MTBMetaData()
        createDocument(java.lang.String, java.lang.String, org.w3c.dom.DocumentType) *
            <-- de.unihalle.informatik.MiToBo.meta.MTBMetaData.MTBMetaData()
        createDocumentType(java.lang.String, java.lang.String, java.lang.String) *
            <-- de.unihalle.informatik.MiToBo.meta.MTBMetaData.MTBMetaData()
    Document *
        <-- de.unihalle.informatik.MiToBo.meta.MTBMetaData.MTBMetaData()
        <-- de.unihalle.informatik.MiToBo.meta.MTBMetaData.MTBMetaData(de.unihalle.informatik.MiToBo.meta.MTBMetaData)
        <-- de.unihalle.informatik.MiToBo.meta.MTBMetaData.addNewTag(java.lang.String)
        <-- de.unihalle.informatik.MiToBo.meta.MTBMetaData.readFromFile(java.lang.String)
        <-- de.unihalle.informatik.MiToBo.meta.MTBMetaData.writeToFile(java.lang.String)
        <-- de.unihalle.informatik.MiToBo.meta.MTBMetaData.xmlDoc
        <-- de.unihalle.informatik.MiToBo.meta.xml.MTBxmlIO.readFromFile(java.lang.String)
        <-- de.unihalle.informatik.MiToBo.meta.xml.MTBxmlIO.saveToFile(org.w3c.dom.Document, java.lang.String)
        cloneNode(boolean) *
            <-- de.unihalle.informatik.MiToBo.meta.MTBMetaData.MTBMetaData(de.unihalle.informatik.MiToBo.meta.MTBMetaData)
        createElement(java.lang.String) *
            <-- de.unihalle.informatik.MiToBo.meta.MTBMetaData.addNewTag(java.lang.String)
        getDocumentElement() *
            <-- de.unihalle.informatik.MiToBo.meta.MTBMetaData.MTBMetaData()
            <-- de.unihalle.informatik.MiToBo.meta.MTBMetaData.MTBMetaData(de.unihalle.informatik.MiToBo.meta.MTBMetaData)
    DocumentType *
        <-- de.unihalle.informatik.MiToBo.meta.MTBMetaData.MTBMetaData()
    Element *
        <-- de.unihalle.informatik.MiToBo.meta.MTBMetaData.MTBMetaData()
        <-- de.unihalle.informatik.MiToBo.meta.MTBMetaData.MTBMetaData(de.unihalle.informatik.MiToBo.meta.MTBMetaData)
        <-- de.unihalle.informatik.MiToBo.meta.MTBMetaData.activePlugElement
        <-- de.unihalle.informatik.MiToBo.meta.MTBMetaData.addNewTag(java.lang.String)
        <-- de.unihalle.informatik.MiToBo.meta.MTBMetaData.closeTag()
        <-- de.unihalle.informatik.MiToBo.meta.MTBMetaData.setAttributeValue(java.lang.String, java.lang.String)
        <-- de.unihalle.informatik.MiToBo.meta.MTBMetaData.setTagText(java.lang.String)
        <-- de.unihalle.informatik.MiToBo.meta.MTBMetaData.xmlElem
        <-- de.unihalle.informatik.MiToBo.meta.MTBOpParams.logToMetaDataObj_start(de.unihalle.informatik.MiToBo.meta.MTBOpBase)
        appendChild(org.w3c.dom.Node) *
            <-- de.unihalle.informatik.MiToBo.meta.MTBMetaData.addNewTag(java.lang.String)
        getParentNode() *
            <-- de.unihalle.informatik.MiToBo.meta.MTBMetaData.closeTag()
        setAttribute(java.lang.String, java.lang.String) *
            <-- de.unihalle.informatik.MiToBo.meta.MTBMetaData.setAttributeValue(java.lang.String, java.lang.String)
        setTextContent(java.lang.String) *
            <-- de.unihalle.informatik.MiToBo.meta.MTBMetaData.setTagText(java.lang.String)
    Node *
        <-- de.unihalle.informatik.MiToBo.meta.MTBMetaData.MTBMetaData(de.unihalle.informatik.MiToBo.meta.MTBMetaData)
        <-- de.unihalle.informatik.MiToBo.meta.MTBMetaData.addNewTag(java.lang.String)
        <-- de.unihalle.informatik.MiToBo.meta.MTBMetaData.closeTag()
        <-- de.unihalle.informatik.MiToBo.meta.xml.MTBxmlIO.saveToFile(org.w3c.dom.Document, java.lang.String)
