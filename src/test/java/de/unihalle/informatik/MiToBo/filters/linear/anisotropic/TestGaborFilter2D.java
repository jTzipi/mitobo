/*
 * This file is part of MiToBo, the Microscope Image Analysis Toolbox.
 *
 * Copyright (C) 2010 - @YEAR@
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Fore more information on MiToBo, visit
 *
 *    http://www.informatik.uni-halle.de/mitobo/
 *
 */

package de.unihalle.informatik.MiToBo.filters.linear.anisotropic;

import static org.junit.Assert.*;

import org.junit.Before;
import org.junit.Test;

import de.unihalle.informatik.Alida.exceptions.ALDOperatorException;
import de.unihalle.informatik.MiToBo.core.datatypes.images.MTBImageDouble;
import de.unihalle.informatik.MiToBo.filters.linear.anisotropic.GaborFilter2D.KernelPart;
import de.unihalle.informatik.MiToBo.filters.linear.anisotropic.GaborFilter2D.ResultType;

/**
 * JUnit test class for {@link GaborFilter2D}.
 * 
 * All groundtruth results have been calculated with Octave 3.2.4 on a
 * 64-bit machine running Xubuntu 12.04, Kernel 3.2.0-54-generic, using 
 * the following settings and commands:
 * 
 * Settings:
 * ---------
 * format long; 
 * 
 * Visualization:
 * --------------
 * x = y = linspace (-10, 10, 21)'; 
 * [xx, yy] = meshgrid (x, y); 
 * xxx = xx.*cos(angle) + yy.*sin(angle); 
 * yyy = -xx.*sin(angle) + yy.*cos(angle); 
 * z = ... do some calculations...
 * mesh(x,y,z); 
 * 
 * Saving z to file:
 * -----------------
 * filename = "/tmp/tab.txt"; 
 * fid = fopen (filename, "w"); 
 * for i=1:21 ; 
 * 		fprintf(fid,"{"); 
 * 				for j=1:21; 
 * 						fprintf(fid,"%.10f",z(i,j)); 
 * 						if (j!=21) 
 * 								fprintf(fid,","); 
 * 						endif;  
 * 				endfor; 
 * 				if (i!=21) 
 * 						fprintf(fid,"},\n") 
 * 				else 
 * 						fprintf(fid,"}") 
 * 				endif; 
 * endfor; 
 * fclose(fid);
 * 
 * @author Birgit Moeller
 */
public class TestGaborFilter2D {
	
	/**
	 * Local accuracy for numerical tests.
	 */
	private static final double accuracy = 1.0e-10;
	
	/**
	 * Size of kernels to be calculated.
	 */
	private static final int kernelSize = 21;
	
	/**
	 * Test object.
	 */
	private GaborFilter2D testObject;
	
	/**
	 * Fixture.
	 */
	@Before
	public void initTestClass() {
		boolean thrown = false;
		try {
	    this.testObject = new GaborFilter2D();
    } catch (ALDOperatorException e) {
    	thrown = true;
    }
		assertFalse("[TestGaborFilter2D] could not construct test object!",thrown);
	}

	/**
	 * Test calculation of filter masks.
	 */
	@Test
	public void testGetKernel() {
		
		// test the Gaussian kernel part
		this.testGaussianKernels();

		// test the cosine kernel part
		this.testRealKernels();
		
		// test product of Gaussian and cosine kernels, i.e. real part of filter
		this.testGaborRealPartKernels();

		// test the sinus kernel part
		this.testComplexKernels();
		
		// test product of Gaussian and sinus kernels, i.e. complex part of filter
		this.testGaborComplexPartKernels();
	}
	
	/**
	 * Helper method to compare a given kernel with groundtruth.
	 * 
	 * @param expected		Expected kernel elements.
	 * @param kernel			Kernel to test.
	 */
	protected void compareKernels(double[][] expected, MTBImageDouble kernel) {
		assertTrue("Kernel dimension in x should be " + kernelSize + ", got " 
			+ kernel.getSizeX(), kernel.getSizeX() == kernelSize);
		assertTrue("Kernel dimension in y should be " + kernelSize + ", got " 
			+ kernel.getSizeY(), kernel.getSizeY() == kernelSize);
		for (int i=0; i<kernelSize; ++i) {
			for (int j=0; j<kernelSize; ++j) {
				assertTrue("Angle = " + 0.0 + " , kernel entry does not match: " + 
					i + " , " + j + " = " + kernel.getValueDouble(j, i) +
						" , expected " + expected[i][j],
							Math.abs(kernel.getValueDouble(j, i) - expected[i][j])
								< accuracy);
			}
		}
	}
	
	/**
	 * Run unit tests on Gaussian kernels.
	 */
	protected void testGaussianKernels() {

		/*
		 * All groundtruth results have been calculated with Octave 3.2.4 on a
		 * 64-bit machine running Xubuntu 12.04, Kernel 3.2.0-54-generic, using 
		 * the following commands:
		 * 
		 * stdx=1; stdy=3; angle= <degrees>/180*pi;
		 * x = y = linspace (-10, 10, 21)'; 
		 * [xx, yy] = meshgrid (x, y); 
		 * xxx = xx.*cos(angle) + yy.*sin(angle); 
		 * yyy = -xx.*sin(angle) + yy.*cos(angle); 
		 * z = e.^(-0.5.*(xxx.^2./(stdx^2)+yyy.^2./(stdy^2))); 
		 * 
		 * (expected kernels: see end of file)
		 */

		// test gauss kernel of different angles
		double angle = 0, sigmaX = 1, sigmaY = 3;
		this.testObject.setSigmaX(sigmaX);
		this.testObject.setSigmaY(sigmaY);
		this.testObject.setKernelSize(21);

		// do the tests...
		angle= 0.0;
		MTBImageDouble kernel = this.testObject.getGaussianKernel(angle);
		this.compareKernels(expectedKernelGaussian_0, kernel);
		
		angle= 45.0;
		kernel = this.testObject.getGaussianKernel(angle);
		this.compareKernels(expectedKernelGaussian_45, kernel);
		
		angle = 125;
		kernel = this.testObject.getGaussianKernel(angle);
		this.compareKernels(expectedKernelGaussian_125, kernel);
	}
	
	/**
	 * Run unit tests on cosine part of kernel.
	 */
	protected void testRealKernels() {

		/*
		 * All groundtruth results have been calculated with Octave 3.2.4 on a
		 * 64-bit machine running Xubuntu 12.04, Kernel 3.2.0-54-generic, using 
		 * the following commands:
		 * 
		 * stdx=1; stdy=3; angle= <degrees>/180*pi; f= 0.1;
		 * x = y = linspace (-10, 10, 21)'; 
		 * [xx, yy] = meshgrid (x, y); 
		 * xxx = xx.*cos(angle) + yy.*sin(angle); 
		 * yyy = -xx.*sin(angle) + yy.*cos(angle); 
		 * z = cos( 2 * pi.* f .* xxx);  
		 * 
		 * (expected kernels: see end of file)
		 */

		// test real sinusoidal kernel parts of different angles
		double angle = 0, sigmaX = 1, sigmaY = 3, frequency = 0.1;
		this.testObject.setSigmaX(sigmaX);
		this.testObject.setSigmaY(sigmaY);
		this.testObject.setFrequency(frequency);
		this.testObject.setKernelSize(21);
		this.testObject.setResultType(ResultType.RESPONSE_REALPART);

		// do the tests...
		angle= 0.0;
		MTBImageDouble kernel = this.testObject.getRealKernel(angle);
		this.compareKernels(expectedKernelReal_0, kernel);
		
		angle= 45.0;
		kernel = this.testObject.getRealKernel(angle);
		this.compareKernels(expectedKernelReal_45, kernel);
		
		angle = 125;
		kernel = this.testObject.getRealKernel(angle);
		this.compareKernels(expectedKernelReal_125, kernel);
	}
	
	/**
	 * Run tests on real part of Gabor filter kernel.
	 */
	public void testGaborRealPartKernels() {
		
		// test real sinusoidal kernel parts of different angles
		double angle = 0, sigmaX = 1, sigmaY = 3, frequency = 0.1;
		this.testObject.setSigmaX(sigmaX);
		this.testObject.setSigmaY(sigmaY);
		this.testObject.setFrequency(frequency);
		this.testObject.setKernelSize(21);
		this.testObject.setKernelPart(KernelPart.REAL);

		angle = 0;
		MTBImageDouble kernel = this.testObject.getKernel(angle);
		assertTrue("Kernel dimension in x should be " + kernelSize + ", got " 
				+ kernel.getSizeX(), kernel.getSizeX() == kernelSize);
		assertTrue("Kernel dimension in y should be " + kernelSize + ", got " 
				+ kernel.getSizeY(), kernel.getSizeY() == kernelSize);
		for (int i=0; i<kernelSize; ++i) {
			for (int j=0; j<kernelSize; ++j) {
				assertTrue("Angle = " + angle + " , kernel entry does not match: " + 
					i + " , " + j + " = " + kernel.getValueDouble(j, i) + " , expected " 
						+ expectedKernelGaussian_0[i][j]*expectedKernelReal_0[i][j],
						Math.abs( kernel.getValueDouble(j, i) 
								- expectedKernelGaussian_0[i][j]*expectedKernelReal_0[i][j])
							< accuracy);
			}
		}

		angle= 45.0;
		kernel = this.testObject.getKernel(angle);
		assertTrue("Kernel dimension in x should be " + kernelSize + ", got " 
				+ kernel.getSizeX(), kernel.getSizeX() == kernelSize);
		assertTrue("Kernel dimension in y should be " + kernelSize + ", got " 
				+ kernel.getSizeY(), kernel.getSizeY() == kernelSize);
		for (int i=0; i<kernelSize; ++i) {
			for (int j=0; j<kernelSize; ++j) {
				assertTrue("Angle = " + angle + " , kernel entry does not match: " + 
					i + " , " + j + " = " + kernel.getValueDouble(j, i) + " , expected " 
						+ expectedKernelGaussian_45[i][j]*expectedKernelReal_45[i][j],
						Math.abs( kernel.getValueDouble(j, i) 
								- expectedKernelGaussian_45[i][j]*expectedKernelReal_45[i][j])
							< accuracy);
			}
		}

		angle= 125.0;
		kernel = this.testObject.getKernel(angle);
		assertTrue("Kernel dimension in x should be " + kernelSize + ", got " 
				+ kernel.getSizeX(), kernel.getSizeX() == kernelSize);
		assertTrue("Kernel dimension in y should be " + kernelSize + ", got " 
				+ kernel.getSizeY(), kernel.getSizeY() == kernelSize);
		for (int i=0; i<kernelSize; ++i) {
			for (int j=0; j<kernelSize; ++j) {
				assertTrue("Angle = " + angle + " , kernel entry does not match: " + 
					i + " , " + j + " = " + kernel.getValueDouble(j, i) + " , expected " 
						+ expectedKernelGaussian_125[i][j]*expectedKernelReal_125[i][j],
						Math.abs( kernel.getValueDouble(j, i) 
							- expectedKernelGaussian_125[i][j]*expectedKernelReal_125[i][j])
							< accuracy);
			}
		}
	}
	
	/**
	 * Run unit tests on sinus part of kernel.
	 */
	protected void testComplexKernels() {

		/*
		 * All groundtruth results have been calculated with Octave 3.2.4 on a
		 * 64-bit machine running Xubuntu 12.04, Kernel 3.2.0-54-generic, using 
		 * the following commands:
		 * 
		 * stdx=1; stdy=3; angle= <degrees>/180*pi; f=0.1;
		 * x = y = linspace (-10, 10, 21)'; 
		 * [xx, yy] = meshgrid (x, y); 
		 * xxx = xx.*cos(angle) + yy.*sin(angle); 
		 * yyy = -xx.*sin(angle) + yy.*cos(angle); 
		 * z = sin( 2 * pi.* f .* xxx); mesh(x,y,z);   
		 * 
		 * (expected kernels: see end of file)
		 */

		// test real sinusoidal kernel parts of different angles
		double angle = 0, sigmaX = 1, sigmaY = 3, frequency = 0.1;
		this.testObject.setSigmaX(sigmaX);
		this.testObject.setSigmaY(sigmaY);
		this.testObject.setFrequency(frequency);
		this.testObject.setKernelSize(21);

		angle= 0.0;
		MTBImageDouble kernel = this.testObject.getComplexKernel(angle);
		this.compareKernels(expectedKernelComplex_0, kernel);
		
		angle= 45.0;
		kernel = this.testObject.getComplexKernel(angle);
		this.compareKernels(expectedKernelComplex_45, kernel);		

		angle = 125;
		kernel = this.testObject.getComplexKernel(angle);
		this.compareKernels(expectedKernelComplex_125, kernel);
	}
	
	/**
	 * Run tests on complex part of Gabor filter kernel.
	 */
	protected void testGaborComplexPartKernels() {
		
		// test real sinusoidal kernel parts of different angles
		double angle = 0, sigmaX = 1, sigmaY = 3, frequency = 0.1;
		this.testObject.setSigmaX(sigmaX);
		this.testObject.setSigmaY(sigmaY);
		this.testObject.setKernelSize(21);
		this.testObject.setFrequency(frequency);
		this.testObject.setKernelPart(KernelPart.COMPLEX);
		
		MTBImageDouble kernel = this.testObject.getKernel(angle);
		assertTrue("Kernel dimension in x should be " + kernelSize + ", got " 
				+ kernel.getSizeX(), kernel.getSizeX() == kernelSize);
		assertTrue("Kernel dimension in y should be " + kernelSize + ", got " 
				+ kernel.getSizeY(), kernel.getSizeY() == kernelSize);
		for (int i=0; i<kernelSize; ++i) {
			for (int j=0; j<kernelSize; ++j) {
				assertTrue("Angle = " + angle + " , kernel entry does not match: " + 
					i + " , " + j + " = " + kernel.getValueDouble(j, i) +	" , expected " 
						+ expectedKernelGaussian_0[i][j]*expectedKernelComplex_0[i][j],
						Math.abs(kernel.getValueDouble(j, i) 
							- expectedKernelGaussian_0[i][j]*expectedKernelComplex_0[i][j])
						< accuracy);
			}
		}

		angle= 45.0;
		kernel = this.testObject.getKernel(angle);
		assertTrue("Kernel dimension in x should be " + kernelSize + ", got " 
				+ kernel.getSizeX(), kernel.getSizeX() == kernelSize);
		assertTrue("Kernel dimension in y should be " + kernelSize + ", got " 
				+ kernel.getSizeY(), kernel.getSizeY() == kernelSize);
		for (int i=0; i<kernelSize; ++i) {
			for (int j=0; j<kernelSize; ++j) {
				assertTrue("Angle = " + angle + " , kernel entry does not match: " + 
						i + " , " + j + " = " + kernel.getValueDouble(j, i) +	" , expected " 
						+ expectedKernelGaussian_45[i][j]*expectedKernelComplex_45[i][j],
						Math.abs(kernel.getValueDouble(j, i) 
								- expectedKernelGaussian_45[i][j]*expectedKernelComplex_45[i][j])
								< accuracy);
			}
		}

		angle= 125.0;
		kernel = this.testObject.getKernel(angle);
		assertTrue("Kernel dimension in x should be " + kernelSize + ", got " 
				+ kernel.getSizeX(), kernel.getSizeX() == kernelSize);
		assertTrue("Kernel dimension in y should be " + kernelSize + ", got " 
				+ kernel.getSizeY(), kernel.getSizeY() == kernelSize);
		for (int i=0; i<kernelSize; ++i) {
			for (int j=0; j<kernelSize; ++j) {
				assertTrue("Angle = " + angle + " , kernel entry does not match: " + 
					i + " , " + j + " = " + kernel.getValueDouble(j, i) +	" , expected " 
					+ expectedKernelGaussian_125[i][j]*expectedKernelComplex_125[i][j],
					Math.abs(kernel.getValueDouble(j, i) 
						- expectedKernelGaussian_125[i][j]*expectedKernelComplex_125[i][j])
						< accuracy);
			}
		}
	}
	
	/**
	 * 21 x 21 kernel mask of Gaussian, s_x = 1, s_y = 3, angle = 0.
	 */
	private static final double[][] expectedKernelGaussian_0 = new double[][]{
		{0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000001,0.0000000144,0.0000012969,0.0000429465,0.0005231954,0.0023447991,0.0038659201,0.0023447991,0.0005231954,0.0000429465,0.0000012969,0.0000000144,0.0000000001,0.0000000000,0.0000000000,0.0000000000,0.0000000000},                                                                                                                          
		{0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000002,0.0000000414,0.0000037267,0.0001234098,0.0015034392,0.0067379470,0.0111089965,0.0067379470,0.0015034392,0.0001234098,0.0000037267,0.0000000414,0.0000000002,0.0000000000,0.0000000000,0.0000000000,0.0000000000},                                                                                                                          
		{0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000004,0.0000001065,0.0000095827,0.0003173340,0.0038659201,0.0173258520,0.0285655008,0.0173258520,0.0038659201,0.0003173340,0.0000095827,0.0000001065,0.0000000004,0.0000000000,0.0000000000,0.0000000000,0.0000000000},                                                                                                                          
		{0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000010,0.0000002449,0.0000220495,0.0007301780,0.0088953890,0.0398663678,0.0657285286,0.0398663678,0.0088953890,0.0007301780,0.0000220495,0.0000002449,0.0000000010,0.0000000000,0.0000000000,0.0000000000,0.0000000000},                                                                                                                          
		{0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000021,0.0000005043,0.0000453999,0.0015034392,0.0183156389,0.0820849986,0.1353352832,0.0820849986,0.0183156389,0.0015034392,0.0000453999,0.0000005043,0.0000000021,0.0000000000,0.0000000000,0.0000000000,0.0000000000},                                                                                                                          
		{0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000038,0.0000009292,0.0000836483,0.0027700528,0.0337461518,0.1512397597,0.2493522088,0.1512397597,0.0337461518,0.0027700528,0.0000836483,0.0000009292,0.0000000038,0.0000000000,0.0000000000,0.0000000000,0.0000000000},                                                                                                                          
		{0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000063,0.0000015321,0.0001379128,0.0045670450,0.0556379983,0.2493522088,0.4111122905,0.2493522088,0.0556379983,0.0045670450,0.0001379128,0.0000015321,0.0000000063,0.0000000000,0.0000000000,0.0000000000,0.0000000000},                                                                                                                          
		{0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000092,0.0000022603,0.0002034684,0.0067379470,0.0820849986,0.3678794412,0.6065306597,0.3678794412,0.0820849986,0.0067379470,0.0002034684,0.0000022603,0.0000000092,0.0000000000,0.0000000000,0.0000000000,0.0000000000},                                                                                                                          
		{0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000122,0.0000029841,0.0002686175,0.0088953890,0.1083680232,0.4856717852,0.8007374029,0.4856717852,0.1083680232,0.0088953890,0.0002686175,0.0000029841,0.0000000122,0.0000000000,0.0000000000,0.0000000000,0.0000000000},                                                                                                                          
		{0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000144,0.0000035253,0.0003173340,0.0105086605,0.1280216927,0.5737534207,0.9459594689,0.5737534207,0.1280216927,0.0105086605,0.0003173340,0.0000035253,0.0000000144,0.0000000000,0.0000000000,0.0000000000,0.0000000000},                                                                                                                          
		{0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000152,0.0000037267,0.0003354626,0.0111089965,0.1353352832,0.6065306597,1.0000000000,0.6065306597,0.1353352832,0.0111089965,0.0003354626,0.0000037267,0.0000000152,0.0000000000,0.0000000000,0.0000000000,0.0000000000},                                                                                                                          
		{0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000144,0.0000035253,0.0003173340,0.0105086605,0.1280216927,0.5737534207,0.9459594689,0.5737534207,0.1280216927,0.0105086605,0.0003173340,0.0000035253,0.0000000144,0.0000000000,0.0000000000,0.0000000000,0.0000000000},                                                                                                                          
		{0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000122,0.0000029841,0.0002686175,0.0088953890,0.1083680232,0.4856717852,0.8007374029,0.4856717852,0.1083680232,0.0088953890,0.0002686175,0.0000029841,0.0000000122,0.0000000000,0.0000000000,0.0000000000,0.0000000000},                                                                                                                          
		{0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000092,0.0000022603,0.0002034684,0.0067379470,0.0820849986,0.3678794412,0.6065306597,0.3678794412,0.0820849986,0.0067379470,0.0002034684,0.0000022603,0.0000000092,0.0000000000,0.0000000000,0.0000000000,0.0000000000},                                                                                                                          
		{0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000063,0.0000015321,0.0001379128,0.0045670450,0.0556379983,0.2493522088,0.4111122905,0.2493522088,0.0556379983,0.0045670450,0.0001379128,0.0000015321,0.0000000063,0.0000000000,0.0000000000,0.0000000000,0.0000000000},                                                                                                                          
		{0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000038,0.0000009292,0.0000836483,0.0027700528,0.0337461518,0.1512397597,0.2493522088,0.1512397597,0.0337461518,0.0027700528,0.0000836483,0.0000009292,0.0000000038,0.0000000000,0.0000000000,0.0000000000,0.0000000000},                                                                                                                          
		{0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000021,0.0000005043,0.0000453999,0.0015034392,0.0183156389,0.0820849986,0.1353352832,0.0820849986,0.0183156389,0.0015034392,0.0000453999,0.0000005043,0.0000000021,0.0000000000,0.0000000000,0.0000000000,0.0000000000},                                                                                                                          
		{0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000010,0.0000002449,0.0000220495,0.0007301780,0.0088953890,0.0398663678,0.0657285286,0.0398663678,0.0088953890,0.0007301780,0.0000220495,0.0000002449,0.0000000010,0.0000000000,0.0000000000,0.0000000000,0.0000000000},                                                                                                                          
		{0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000004,0.0000001065,0.0000095827,0.0003173340,0.0038659201,0.0173258520,0.0285655008,0.0173258520,0.0038659201,0.0003173340,0.0000095827,0.0000001065,0.0000000004,0.0000000000,0.0000000000,0.0000000000,0.0000000000},                                                                                                                          
		{0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000002,0.0000000414,0.0000037267,0.0001234098,0.0015034392,0.0067379470,0.0111089965,0.0067379470,0.0015034392,0.0001234098,0.0000037267,0.0000000414,0.0000000002,0.0000000000,0.0000000000,0.0000000000,0.0000000000},                                                                                                                          
		{0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000001,0.0000000144,0.0000012969,0.0000429465,0.0005231954,0.0023447991,0.0038659201,0.0023447991,0.0005231954,0.0000429465,0.0000012969,0.0000000144,0.0000000001,0.0000000000,0.0000000000,0.0000000000,0.0000000000}
	};

	/**
	 * 21 x 21 kernel mask of Gaussian, s_x = 1, s_y = 3, angle = 45.
	 */
	private static final double[][] expectedKernelGaussian_45 = new double[][]{
			{0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000001,0.0000000021,0.0000000438,0.0000005332,0.0000037267,0.0000149453,0.0000343889,0.0000453999,0.0000343889,0.0000149453},
			{0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000002,0.0000000070,0.0000001660,0.0000022603,0.0000176558,0.0000791279,0.0002034684,0.0003001851,0.0002541012,0.0001234098,0.0000343889},
			{0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000004,0.0000000190,0.0000005043,0.0000076732,0.0000669804,0.0003354626,0.0009639757,0.0015893273,0.0015034392,0.0008159878,0.0002541012,0.0000453999},
			{0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000008,0.0000000414,0.0000012268,0.0000208579,0.0002034684,0.0011388028,0.0036570038,0.0067379470,0.0071228707,0.0043202395,0.0015034392,0.0003001851,0.0000343889},
			{0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000013,0.0000000722,0.0000023895,0.0000453999,0.0004949216,0.0030955869,0.0111089965,0.0228734649,0.0270218060,0.0183156389,0.0071228707,0.0015893273,0.0002034684,0.0000149453},
			{0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000016,0.0000001007,0.0000037267,0.0000791279,0.0009639757,0.0067379470,0.0270218060,0.0621765240,0.0820849986,0.0621765240,0.0270218060,0.0067379470,0.0009639757,0.0000791279,0.0000037267},
			{0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000016,0.0000001125,0.0000046540,0.0001104319,0.0015034392,0.0117436285,0.0526312913,0.1353352832,0.1996656401,0.1690133154,0.0820849986,0.0228734649,0.0036570038,0.0003354626,0.0000176558,0.0000005332},
			{0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000013,0.0000001007,0.0000046540,0.0001234098,0.0018775683,0.0163895538,0.0820849986,0.2358770830,0.3888955640,0.3678794412,0.1996656401,0.0621765240,0.0111089965,0.0011388028,0.0000669804,0.0000022603,0.0000000438},
			{0.0000000000,0.0000000000,0.0000000000,0.0000000008,0.0000000722,0.0000037267,0.0001104319,0.0018775683,0.0183156389,0.1025117577,0.3291929878,0.6065306597,0.6411803884,0.3888955640,0.1353352832,0.0270218060,0.0030955869,0.0002034684,0.0000076732,0.0000001660,0.0000000021},
			{0.0000000000,0.0000000000,0.0000000004,0.0000000414,0.0000023895,0.0000791279,0.0015034392,0.0163895538,0.1025117577,0.3678794412,0.7574651284,0.8948393168,0.6065306597,0.2358770830,0.0526312913,0.0067379470,0.0004949216,0.0000208579,0.0000005043,0.0000000070,0.0000000001},
			{0.0000000000,0.0000000002,0.0000000190,0.0000012268,0.0000453999,0.0009639757,0.0117436285,0.0820849986,0.3291929878,0.7574651284,1.0000000000,0.7574651284,0.3291929878,0.0820849986,0.0117436285,0.0009639757,0.0000453999,0.0000012268,0.0000000190,0.0000000002,0.0000000000},
			{0.0000000001,0.0000000070,0.0000005043,0.0000208579,0.0004949216,0.0067379470,0.0526312913,0.2358770830,0.6065306597,0.8948393168,0.7574651284,0.3678794412,0.1025117577,0.0163895538,0.0015034392,0.0000791279,0.0000023895,0.0000000414,0.0000000004,0.0000000000,0.0000000000},
			{0.0000000021,0.0000001660,0.0000076732,0.0002034684,0.0030955869,0.0270218060,0.1353352832,0.3888955640,0.6411803884,0.6065306597,0.3291929878,0.1025117577,0.0183156389,0.0018775683,0.0001104319,0.0000037267,0.0000000722,0.0000000008,0.0000000000,0.0000000000,0.0000000000},
			{0.0000000438,0.0000022603,0.0000669804,0.0011388028,0.0111089965,0.0621765240,0.1996656401,0.3678794412,0.3888955640,0.2358770830,0.0820849986,0.0163895538,0.0018775683,0.0001234098,0.0000046540,0.0000001007,0.0000000013,0.0000000000,0.0000000000,0.0000000000,0.0000000000},
			{0.0000005332,0.0000176558,0.0003354626,0.0036570038,0.0228734649,0.0820849986,0.1690133154,0.1996656401,0.1353352832,0.0526312913,0.0117436285,0.0015034392,0.0001104319,0.0000046540,0.0000001125,0.0000000016,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000},
			{0.0000037267,0.0000791279,0.0009639757,0.0067379470,0.0270218060,0.0621765240,0.0820849986,0.0621765240,0.0270218060,0.0067379470,0.0009639757,0.0000791279,0.0000037267,0.0000001007,0.0000000016,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000},
			{0.0000149453,0.0002034684,0.0015893273,0.0071228707,0.0183156389,0.0270218060,0.0228734649,0.0111089965,0.0030955869,0.0004949216,0.0000453999,0.0000023895,0.0000000722,0.0000000013,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000},
			{0.0000343889,0.0003001851,0.0015034392,0.0043202395,0.0071228707,0.0067379470,0.0036570038,0.0011388028,0.0002034684,0.0000208579,0.0000012268,0.0000000414,0.0000000008,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000},
			{0.0000453999,0.0002541012,0.0008159878,0.0015034392,0.0015893273,0.0009639757,0.0003354626,0.0000669804,0.0000076732,0.0000005043,0.0000000190,0.0000000004,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000},
			{0.0000343889,0.0001234098,0.0002541012,0.0003001851,0.0002034684,0.0000791279,0.0000176558,0.0000022603,0.0000001660,0.0000000070,0.0000000002,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000},
			{0.0000149453,0.0000343889,0.0000453999,0.0000343889,0.0000149453,0.0000037267,0.0000005332,0.0000000438,0.0000000021,0.0000000001,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000}
		};

	/**
	 * 21 x 21 kernel mask of Gaussian, s_x = 1, s_y = 3, angle = 125.
	 */
	private static final double[][] expectedKernelGaussian_125 = new double[][]{
		{0.0000010244,0.0000007271,0.0000003448,0.0000001092,0.0000000231,0.0000000033,0.0000000003,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000},
		{0.0000130596,0.0000140756,0.0000101332,0.0000048727,0.0000015651,0.0000003358,0.0000000481,0.0000000046,0.0000000003,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000},
		{0.0000820566,0.0001342861,0.0001467880,0.0001071747,0.0000522679,0.0000170263,0.0000037047,0.0000005384,0.0000000523,0.0000000034,0.0000000001,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000},
		{0.0002541009,0.0006313978,0.0010479530,0.0011617763,0.0008602905,0.0004255100,0.0001405776,0.0000310216,0.0000045725,0.0000004502,0.0000000296,0.0000000013,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000},
		{0.0003877998,0.0014631324,0.0036872420,0.0062067120,0.0069785225,0.0052409173,0.0026290150,0.0008808882,0.0001971471,0.0000294715,0.0000029428,0.0000001963,0.0000000087,0.0000000003,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000},
		{0.0002916873,0.0016709861,0.0063939627,0.0163421543,0.0278991164,0.0318136521,0.0242314021,0.0123277977,0.0041892318,0.0009508789,0.0001441644,0.0000145993,0.0000009875,0.0000000446,0.0000000013,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000},
		{0.0001081275,0.0009405257,0.0054644594,0.0212063371,0.0549700403,0.0951762059,0.1100709356,0.0850273932,0.0438719571,0.0151201845,0.0034807202,0.0005352086,0.0000549691,0.0000037710,0.0000001728,0.0000000053,0.0000000001,0.0000000000,0.0000000000,0.0000000000,0.0000000000},
		{0.0000197544,0.0002609019,0.0023016164,0.0135622159,0.0533789837,0.1403304400,0.2464196917,0.2890286338,0.2264374562,0.1184943388,0.0414179761,0.0096699022,0.0015079857,0.0001570776,0.0000109288,0.0000005079,0.0000000158,0.0000000003,0.0000000000,0.0000000000,0.0000000000},
		{0.0000017787,0.0000356691,0.0004777793,0.0042746866,0.0255460163,0.1019727248,0.2718859719,0.4842075021,0.5759942718,0.4576640002,0.2428942741,0.0861052712,0.0203884466,0.0032246343,0.0003406581,0.0000240380,0.0000011330,0.0000000357,0.0000000008,0.0000000000,0.0000000000},
		{0.0000000789,0.0000024033,0.0000488799,0.0006640282,0.0060253837,0.0365194981,0.1478450640,0.3997889592,0.7220989278,0.8711732690,0.7020278144,0.3778731505,0.1358562701,0.0326253573,0.0052332659,0.0005607022,0.0000401267,0.0000019181,0.0000000612,0.0000000013,0.0000000000},
		{0.0000000017,0.0000000798,0.0000024646,0.0000508367,0.0007004141,0.0064457612,0.0396219182,0.1626817056,0.4461530582,0.8172801831,1.0000000000,0.8172801831,0.4461530582,0.1626817056,0.0396219182,0.0064457612,0.0007004141,0.0000508367,0.0000024646,0.0000000798,0.0000000017},
		{0.0000000000,0.0000000013,0.0000000612,0.0000019181,0.0000401267,0.0005607022,0.0052332659,0.0326253573,0.1358562701,0.3778731505,0.7020278144,0.8711732690,0.7220989278,0.3997889592,0.1478450640,0.0365194981,0.0060253837,0.0006640282,0.0000488799,0.0000024033,0.0000000789},
		{0.0000000000,0.0000000000,0.0000000008,0.0000000357,0.0000011330,0.0000240380,0.0003406581,0.0032246343,0.0203884466,0.0861052712,0.2428942741,0.4576640002,0.5759942718,0.4842075021,0.2718859719,0.1019727248,0.0255460163,0.0042746866,0.0004777793,0.0000356691,0.0000017787},
		{0.0000000000,0.0000000000,0.0000000000,0.0000000003,0.0000000158,0.0000005079,0.0000109288,0.0001570776,0.0015079857,0.0096699022,0.0414179761,0.1184943388,0.2264374562,0.2890286338,0.2464196917,0.1403304400,0.0533789837,0.0135622159,0.0023016164,0.0002609019,0.0000197544},
		{0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000001,0.0000000053,0.0000001728,0.0000037710,0.0000549691,0.0005352086,0.0034807202,0.0151201845,0.0438719571,0.0850273932,0.1100709356,0.0951762059,0.0549700403,0.0212063371,0.0054644594,0.0009405257,0.0001081275},
		{0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000013,0.0000000446,0.0000009875,0.0000145993,0.0001441644,0.0009508789,0.0041892318,0.0123277977,0.0242314021,0.0318136521,0.0278991164,0.0163421543,0.0063939627,0.0016709861,0.0002916873},
		{0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000003,0.0000000087,0.0000001963,0.0000029428,0.0000294715,0.0001971471,0.0008808882,0.0026290150,0.0052409173,0.0069785225,0.0062067120,0.0036872420,0.0014631324,0.0003877998},
		{0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000013,0.0000000296,0.0000004502,0.0000045725,0.0000310216,0.0001405776,0.0004255100,0.0008602905,0.0011617763,0.0010479530,0.0006313978,0.0002541009},
		{0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000001,0.0000000034,0.0000000523,0.0000005384,0.0000037047,0.0000170263,0.0000522679,0.0001071747,0.0001467880,0.0001342861,0.0000820566},
		{0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000003,0.0000000046,0.0000000481,0.0000003358,0.0000015651,0.0000048727,0.0000101332,0.0000140756,0.0000130596},
		{0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000000,0.0000000003,0.0000000033,0.0000000231,0.0000001092,0.0000003448,0.0000007271,0.0000010244}
	};

	/**
	 * 21 x 21 kernel mask of cosine part, frequency = 0.1, angle = 0.
	 */
	private static final double[][] expectedKernelReal_0 = new double[][]{
		{1.0000000000,0.8090169944,0.3090169944,-0.3090169944,-0.8090169944,-1.0000000000,-0.8090169944,-0.3090169944,0.3090169944,0.8090169944,1.0000000000,0.8090169944,0.3090169944,-0.3090169944,-0.8090169944,-1.0000000000,-0.8090169944,-0.3090169944,0.3090169944,0.8090169944,1.0000000000},
		{1.0000000000,0.8090169944,0.3090169944,-0.3090169944,-0.8090169944,-1.0000000000,-0.8090169944,-0.3090169944,0.3090169944,0.8090169944,1.0000000000,0.8090169944,0.3090169944,-0.3090169944,-0.8090169944,-1.0000000000,-0.8090169944,-0.3090169944,0.3090169944,0.8090169944,1.0000000000},
		{1.0000000000,0.8090169944,0.3090169944,-0.3090169944,-0.8090169944,-1.0000000000,-0.8090169944,-0.3090169944,0.3090169944,0.8090169944,1.0000000000,0.8090169944,0.3090169944,-0.3090169944,-0.8090169944,-1.0000000000,-0.8090169944,-0.3090169944,0.3090169944,0.8090169944,1.0000000000},
		{1.0000000000,0.8090169944,0.3090169944,-0.3090169944,-0.8090169944,-1.0000000000,-0.8090169944,-0.3090169944,0.3090169944,0.8090169944,1.0000000000,0.8090169944,0.3090169944,-0.3090169944,-0.8090169944,-1.0000000000,-0.8090169944,-0.3090169944,0.3090169944,0.8090169944,1.0000000000},
		{1.0000000000,0.8090169944,0.3090169944,-0.3090169944,-0.8090169944,-1.0000000000,-0.8090169944,-0.3090169944,0.3090169944,0.8090169944,1.0000000000,0.8090169944,0.3090169944,-0.3090169944,-0.8090169944,-1.0000000000,-0.8090169944,-0.3090169944,0.3090169944,0.8090169944,1.0000000000},
		{1.0000000000,0.8090169944,0.3090169944,-0.3090169944,-0.8090169944,-1.0000000000,-0.8090169944,-0.3090169944,0.3090169944,0.8090169944,1.0000000000,0.8090169944,0.3090169944,-0.3090169944,-0.8090169944,-1.0000000000,-0.8090169944,-0.3090169944,0.3090169944,0.8090169944,1.0000000000},
		{1.0000000000,0.8090169944,0.3090169944,-0.3090169944,-0.8090169944,-1.0000000000,-0.8090169944,-0.3090169944,0.3090169944,0.8090169944,1.0000000000,0.8090169944,0.3090169944,-0.3090169944,-0.8090169944,-1.0000000000,-0.8090169944,-0.3090169944,0.3090169944,0.8090169944,1.0000000000},
		{1.0000000000,0.8090169944,0.3090169944,-0.3090169944,-0.8090169944,-1.0000000000,-0.8090169944,-0.3090169944,0.3090169944,0.8090169944,1.0000000000,0.8090169944,0.3090169944,-0.3090169944,-0.8090169944,-1.0000000000,-0.8090169944,-0.3090169944,0.3090169944,0.8090169944,1.0000000000},
		{1.0000000000,0.8090169944,0.3090169944,-0.3090169944,-0.8090169944,-1.0000000000,-0.8090169944,-0.3090169944,0.3090169944,0.8090169944,1.0000000000,0.8090169944,0.3090169944,-0.3090169944,-0.8090169944,-1.0000000000,-0.8090169944,-0.3090169944,0.3090169944,0.8090169944,1.0000000000},
		{1.0000000000,0.8090169944,0.3090169944,-0.3090169944,-0.8090169944,-1.0000000000,-0.8090169944,-0.3090169944,0.3090169944,0.8090169944,1.0000000000,0.8090169944,0.3090169944,-0.3090169944,-0.8090169944,-1.0000000000,-0.8090169944,-0.3090169944,0.3090169944,0.8090169944,1.0000000000},
		{1.0000000000,0.8090169944,0.3090169944,-0.3090169944,-0.8090169944,-1.0000000000,-0.8090169944,-0.3090169944,0.3090169944,0.8090169944,1.0000000000,0.8090169944,0.3090169944,-0.3090169944,-0.8090169944,-1.0000000000,-0.8090169944,-0.3090169944,0.3090169944,0.8090169944,1.0000000000},
		{1.0000000000,0.8090169944,0.3090169944,-0.3090169944,-0.8090169944,-1.0000000000,-0.8090169944,-0.3090169944,0.3090169944,0.8090169944,1.0000000000,0.8090169944,0.3090169944,-0.3090169944,-0.8090169944,-1.0000000000,-0.8090169944,-0.3090169944,0.3090169944,0.8090169944,1.0000000000},
		{1.0000000000,0.8090169944,0.3090169944,-0.3090169944,-0.8090169944,-1.0000000000,-0.8090169944,-0.3090169944,0.3090169944,0.8090169944,1.0000000000,0.8090169944,0.3090169944,-0.3090169944,-0.8090169944,-1.0000000000,-0.8090169944,-0.3090169944,0.3090169944,0.8090169944,1.0000000000},
		{1.0000000000,0.8090169944,0.3090169944,-0.3090169944,-0.8090169944,-1.0000000000,-0.8090169944,-0.3090169944,0.3090169944,0.8090169944,1.0000000000,0.8090169944,0.3090169944,-0.3090169944,-0.8090169944,-1.0000000000,-0.8090169944,-0.3090169944,0.3090169944,0.8090169944,1.0000000000},
		{1.0000000000,0.8090169944,0.3090169944,-0.3090169944,-0.8090169944,-1.0000000000,-0.8090169944,-0.3090169944,0.3090169944,0.8090169944,1.0000000000,0.8090169944,0.3090169944,-0.3090169944,-0.8090169944,-1.0000000000,-0.8090169944,-0.3090169944,0.3090169944,0.8090169944,1.0000000000},
		{1.0000000000,0.8090169944,0.3090169944,-0.3090169944,-0.8090169944,-1.0000000000,-0.8090169944,-0.3090169944,0.3090169944,0.8090169944,1.0000000000,0.8090169944,0.3090169944,-0.3090169944,-0.8090169944,-1.0000000000,-0.8090169944,-0.3090169944,0.3090169944,0.8090169944,1.0000000000},
		{1.0000000000,0.8090169944,0.3090169944,-0.3090169944,-0.8090169944,-1.0000000000,-0.8090169944,-0.3090169944,0.3090169944,0.8090169944,1.0000000000,0.8090169944,0.3090169944,-0.3090169944,-0.8090169944,-1.0000000000,-0.8090169944,-0.3090169944,0.3090169944,0.8090169944,1.0000000000},
		{1.0000000000,0.8090169944,0.3090169944,-0.3090169944,-0.8090169944,-1.0000000000,-0.8090169944,-0.3090169944,0.3090169944,0.8090169944,1.0000000000,0.8090169944,0.3090169944,-0.3090169944,-0.8090169944,-1.0000000000,-0.8090169944,-0.3090169944,0.3090169944,0.8090169944,1.0000000000},
		{1.0000000000,0.8090169944,0.3090169944,-0.3090169944,-0.8090169944,-1.0000000000,-0.8090169944,-0.3090169944,0.3090169944,0.8090169944,1.0000000000,0.8090169944,0.3090169944,-0.3090169944,-0.8090169944,-1.0000000000,-0.8090169944,-0.3090169944,0.3090169944,0.8090169944,1.0000000000},
		{1.0000000000,0.8090169944,0.3090169944,-0.3090169944,-0.8090169944,-1.0000000000,-0.8090169944,-0.3090169944,0.3090169944,0.8090169944,1.0000000000,0.8090169944,0.3090169944,-0.3090169944,-0.8090169944,-1.0000000000,-0.8090169944,-0.3090169944,0.3090169944,0.8090169944,1.0000000000},
		{1.0000000000,0.8090169944,0.3090169944,-0.3090169944,-0.8090169944,-1.0000000000,-0.8090169944,-0.3090169944,0.3090169944,0.8090169944,1.0000000000,0.8090169944,0.3090169944,-0.3090169944,-0.8090169944,-1.0000000000,-0.8090169944,-0.3090169944,0.3090169944,0.8090169944,1.0000000000}
	};

	/**
	 * 21 x 21 kernel mask of cosine part, frequency = 0.1, angle = 45.
	 */
	private static final double[][] expectedKernelReal_45 = new double[][]{
		{-0.8582161857,-0.5542785626,-0.1427186623,0.2965524079,0.6782429624,0.9282415176,0.9980067522,0.8739926011,0.5802784466,0.1738937108,-0.2662553420,-0.6547065517,-0.9160357423,-0.9995015638,-0.8888977575,-0.6056998671,-0.2048954095,0.2356928536,0.6305174821,0.9029167963,1.0000000000},
		{-0.5542785626,-0.1427186623,0.2965524079,0.6782429624,0.9282415176,0.9980067522,0.8739926011,0.5802784466,0.1738937108,-0.2662553420,-0.6547065517,-0.9160357423,-0.9995015638,-0.8888977575,-0.6056998671,-0.2048954095,0.2356928536,0.6305174821,0.9029167963,1.0000000000,0.9029167963},
		{-0.1427186623,0.2965524079,0.6782429624,0.9282415176,0.9980067522,0.8739926011,0.5802784466,0.1738937108,-0.2662553420,-0.6547065517,-0.9160357423,-0.9995015638,-0.8888977575,-0.6056998671,-0.2048954095,0.2356928536,0.6305174821,0.9029167963,1.0000000000,0.9029167963,0.6305174821},
		{0.2965524079,0.6782429624,0.9282415176,0.9980067522,0.8739926011,0.5802784466,0.1738937108,-0.2662553420,-0.6547065517,-0.9160357423,-0.9995015638,-0.8888977575,-0.6056998671,-0.2048954095,0.2356928536,0.6305174821,0.9029167963,1.0000000000,0.9029167963,0.6305174821,0.2356928536},
		{0.6782429624,0.9282415176,0.9980067522,0.8739926011,0.5802784466,0.1738937108,-0.2662553420,-0.6547065517,-0.9160357423,-0.9995015638,-0.8888977575,-0.6056998671,-0.2048954095,0.2356928536,0.6305174821,0.9029167963,1.0000000000,0.9029167963,0.6305174821,0.2356928536,-0.2048954095},
		{0.9282415176,0.9980067522,0.8739926011,0.5802784466,0.1738937108,-0.2662553420,-0.6547065517,-0.9160357423,-0.9995015638,-0.8888977575,-0.6056998671,-0.2048954095,0.2356928536,0.6305174821,0.9029167963,1.0000000000,0.9029167963,0.6305174821,0.2356928536,-0.2048954095,-0.6056998671},
		{0.9980067522,0.8739926011,0.5802784466,0.1738937108,-0.2662553420,-0.6547065517,-0.9160357423,-0.9995015638,-0.8888977575,-0.6056998671,-0.2048954095,0.2356928536,0.6305174821,0.9029167963,1.0000000000,0.9029167963,0.6305174821,0.2356928536,-0.2048954095,-0.6056998671,-0.8888977575},
		{0.8739926011,0.5802784466,0.1738937108,-0.2662553420,-0.6547065517,-0.9160357423,-0.9995015638,-0.8888977575,-0.6056998671,-0.2048954095,0.2356928536,0.6305174821,0.9029167963,1.0000000000,0.9029167963,0.6305174821,0.2356928536,-0.2048954095,-0.6056998671,-0.8888977575,-0.9995015638},
		{0.5802784466,0.1738937108,-0.2662553420,-0.6547065517,-0.9160357423,-0.9995015638,-0.8888977575,-0.6056998671,-0.2048954095,0.2356928536,0.6305174821,0.9029167963,1.0000000000,0.9029167963,0.6305174821,0.2356928536,-0.2048954095,-0.6056998671,-0.8888977575,-0.9995015638,-0.9160357423},
		{0.1738937108,-0.2662553420,-0.6547065517,-0.9160357423,-0.9995015638,-0.8888977575,-0.6056998671,-0.2048954095,0.2356928536,0.6305174821,0.9029167963,1.0000000000,0.9029167963,0.6305174821,0.2356928536,-0.2048954095,-0.6056998671,-0.8888977575,-0.9995015638,-0.9160357423,-0.6547065517},
		{-0.2662553420,-0.6547065517,-0.9160357423,-0.9995015638,-0.8888977575,-0.6056998671,-0.2048954095,0.2356928536,0.6305174821,0.9029167963,1.0000000000,0.9029167963,0.6305174821,0.2356928536,-0.2048954095,-0.6056998671,-0.8888977575,-0.9995015638,-0.9160357423,-0.6547065517,-0.2662553420},
		{-0.6547065517,-0.9160357423,-0.9995015638,-0.8888977575,-0.6056998671,-0.2048954095,0.2356928536,0.6305174821,0.9029167963,1.0000000000,0.9029167963,0.6305174821,0.2356928536,-0.2048954095,-0.6056998671,-0.8888977575,-0.9995015638,-0.9160357423,-0.6547065517,-0.2662553420,0.1738937108},
		{-0.9160357423,-0.9995015638,-0.8888977575,-0.6056998671,-0.2048954095,0.2356928536,0.6305174821,0.9029167963,1.0000000000,0.9029167963,0.6305174821,0.2356928536,-0.2048954095,-0.6056998671,-0.8888977575,-0.9995015638,-0.9160357423,-0.6547065517,-0.2662553420,0.1738937108,0.5802784466},
		{-0.9995015638,-0.8888977575,-0.6056998671,-0.2048954095,0.2356928536,0.6305174821,0.9029167963,1.0000000000,0.9029167963,0.6305174821,0.2356928536,-0.2048954095,-0.6056998671,-0.8888977575,-0.9995015638,-0.9160357423,-0.6547065517,-0.2662553420,0.1738937108,0.5802784466,0.8739926011},
		{-0.8888977575,-0.6056998671,-0.2048954095,0.2356928536,0.6305174821,0.9029167963,1.0000000000,0.9029167963,0.6305174821,0.2356928536,-0.2048954095,-0.6056998671,-0.8888977575,-0.9995015638,-0.9160357423,-0.6547065517,-0.2662553420,0.1738937108,0.5802784466,0.8739926011,0.9980067522},
		{-0.6056998671,-0.2048954095,0.2356928536,0.6305174821,0.9029167963,1.0000000000,0.9029167963,0.6305174821,0.2356928536,-0.2048954095,-0.6056998671,-0.8888977575,-0.9995015638,-0.9160357423,-0.6547065517,-0.2662553420,0.1738937108,0.5802784466,0.8739926011,0.9980067522,0.9282415176},
		{-0.2048954095,0.2356928536,0.6305174821,0.9029167963,1.0000000000,0.9029167963,0.6305174821,0.2356928536,-0.2048954095,-0.6056998671,-0.8888977575,-0.9995015638,-0.9160357423,-0.6547065517,-0.2662553420,0.1738937108,0.5802784466,0.8739926011,0.9980067522,0.9282415176,0.6782429624},
		{0.2356928536,0.6305174821,0.9029167963,1.0000000000,0.9029167963,0.6305174821,0.2356928536,-0.2048954095,-0.6056998671,-0.8888977575,-0.9995015638,-0.9160357423,-0.6547065517,-0.2662553420,0.1738937108,0.5802784466,0.8739926011,0.9980067522,0.9282415176,0.6782429624,0.2965524079},
		{0.6305174821,0.9029167963,1.0000000000,0.9029167963,0.6305174821,0.2356928536,-0.2048954095,-0.6056998671,-0.8888977575,-0.9995015638,-0.9160357423,-0.6547065517,-0.2662553420,0.1738937108,0.5802784466,0.8739926011,0.9980067522,0.9282415176,0.6782429624,0.2965524079,-0.1427186623},
		{0.9029167963,1.0000000000,0.9029167963,0.6305174821,0.2356928536,-0.2048954095,-0.6056998671,-0.8888977575,-0.9995015638,-0.9160357423,-0.6547065517,-0.2662553420,0.1738937108,0.5802784466,0.8739926011,0.9980067522,0.9282415176,0.6782429624,0.2965524079,-0.1427186623,-0.5542785626},
		{1.0000000000,0.9029167963,0.6305174821,0.2356928536,-0.2048954095,-0.6056998671,-0.8888977575,-0.9995015638,-0.9160357423,-0.6547065517,-0.2662553420,0.1738937108,0.5802784466,0.8739926011,0.9980067522,0.9282415176,0.6782429624,0.2965524079,-0.1427186623,-0.5542785626,-0.8582161857}
	};
		
	/**
	 * 21 x 21 kernel mask of cosine part, frequency = 0.1, angle = 125.
	 */
	private static final double[][] expectedKernelReal_125 = new double[][]{
		{0.0277956948,-0.3264916483,-0.6388312287,-0.8690935462,-0.9876944166,-0.9793959582,-0.8452643596,-0.6025328963,-0.2823877928,0.0740385944,0.4209524768,0.7137822357,0.9149049998,0.9984804450,0.9537707685,0.7865202854,0.5182173971,0.1833337538,-0.1751046752,-0.5110455934,-0.7813271926},
		{0.5162681068,0.1810942461,-0.1773466676,-0.5130020185,-0.7827466881,-0.9519237857,-0.9987973776,-0.9173451282,-0.7180320514,-0.4264659620,-0.0801073745,0.2765434369,0.5976638494,0.8419961986,0.9781485775,0.9886280803,0.8720882967,0.6435022995,0.3322388985,-0.0217106739,-0.3728708513},
		{0.8709714766,0.6417572268,0.3300897809,-0.0239877172,-0.3749832648,-0.6778008296,-0.8935343034,-0.9944661730,-0.9676286760,-0.8164699035,-0.5604107882,-0.2323498961,0.1255633930,0.4673442529,0.7490805574,0.9345747262,0.9999944028,0.9369344438,0.7534968151,0.4732496484,0.1321991991},
		{0.9999994295,0.9361359679,0.7519974251,0.4712419864,0.1299412102,-0.2280544588,-0.5567496101,-0.8139133740,-0.9665052589,-0.9949202053,-0.8955074510,-0.6810395817,-0.3790715054,-0.0284001877,0.3259199963,0.6383658635,0.8687942581,0.9875996584,0.9795179043,0.8455873424,0.6030154188},
		{0.8699198293,0.9879546705,0.9790567453,0.8443692623,0.6011969169,0.2807825784,-0.0757068053,-0.4224693518,-0.7149528862,-0.9155790202,-0.9985712369,-0.9532666670,-0.7854860576,-0.5167859209,-0.1816889458,0.1767514895,0.5124828307,0.7823701961,0.9517383612,0.9988268441,0.9175856998},
		{0.5144373020,0.7837867099,0.9524349232,0.9987139598,0.9166778727,0.7168666873,0.4249522157,0.0784397328,-0.2781507149,-0.5990042601,-0.8428975255,-0.9784950178,-0.9883751232,-0.8712684423,-0.6422208829,-0.3306605566,0.0233831552,0.3744225909,0.6773560794,0.8932626186,0.9944024597},
		{0.0256601082,0.3765335767,0.6790298778,0.8942841793,0.9946405323,0.9672051170,0.8155028451,0.5590244785,0.2307224487,-0.1272228833,-0.4688225740,-0.7501877742,-0.9351685830,-0.9999986007,-0.9363484435,-0.7523959061,-0.4717752759,-0.1305407909,0.2274656212,0.5562471696,0.8135618844},
		{-0.4697658173,-0.1282823058,0.2296829619,0.5581384812,0.8148841704,0.9669332524,0.9947504072,0.8947616769,0.6798136490,0.3775229223,0.0267279167,-0.3275011011,-0.6396526613,-0.8696214207,-0.9878609116,-0.9791796821,-0.8446930999,-0.6016800485,-0.2813629312,0.0751037954,0.4219211596},
		{-0.8434718019,-0.5998592549,-0.2791765782,0.0773748043,0.4239850445,0.7161215358,0.9162504783,0.9986592343,0.9527598977,0.7844496315,0.5153529984,0.1800436294,-0.1783978090,-0.5139186337,-0.7834110100,-0.9522504619,-0.9987444367,-0.9169193721,-0.7172881813,-0.4254995506,-0.0790425868},
		{-0.9986277470,-0.9160080517,-0.7156993170,-0.4234372802,-0.0767718715,0.2797572145,0.6003429944,0.8437964934,0.9788387197,0.9881194001,0.8704461495,0.6409376689,0.3290812893,-0.0250555710,-0.3759732827,-0.6785858137,-0.8940133987,-0.9945778252,-0.9673585399,-0.8158526863,-0.5595257902},
		{-0.8950315526,-0.9948121081,-0.9667788512,-0.8145335045,-0.5576366044,-0.2290943555,0.1288820174,0.4702995830,0.7512928914,0.9357598227,1.0000000000,0.9357598227,0.7512928914,0.4702995830,0.1288820174,-0.2290943555,-0.5576366044,-0.8145335045,-0.9667788512,-0.9948121081,-0.8950315526},
		{-0.5595257902,-0.8158526863,-0.9673585399,-0.9945778252,-0.8940133987,-0.6785858137,-0.3759732827,-0.0250555710,0.3290812893,0.6409376689,0.8704461495,0.9881194001,0.9788387197,0.8437964934,0.6003429944,0.2797572145,-0.0767718715,-0.4234372802,-0.7156993170,-0.9160080517,-0.9986277470},
		{-0.0790425868,-0.4254995506,-0.7172881813,-0.9169193721,-0.9987444367,-0.9522504619,-0.7834110100,-0.5139186337,-0.1783978090,0.1800436294,0.5153529984,0.7844496315,0.9527598977,0.9986592343,0.9162504783,0.7161215358,0.4239850445,0.0773748043,-0.2791765782,-0.5998592549,-0.8434718019},
		{0.4219211596,0.0751037954,-0.2813629312,-0.6016800485,-0.8446930999,-0.9791796821,-0.9878609116,-0.8696214207,-0.6396526613,-0.3275011011,0.0267279167,0.3775229223,0.6798136490,0.8947616769,0.9947504072,0.9669332524,0.8148841704,0.5581384812,0.2296829619,-0.1282823058,-0.4697658173},
		{0.8135618844,0.5562471696,0.2274656212,-0.1305407909,-0.4717752759,-0.7523959061,-0.9363484435,-0.9999986007,-0.9351685830,-0.7501877742,-0.4688225740,-0.1272228833,0.2307224487,0.5590244785,0.8155028451,0.9672051170,0.9946405323,0.8942841793,0.6790298778,0.3765335767,0.0256601082},
		{0.9944024597,0.8932626186,0.6773560794,0.3744225909,0.0233831552,-0.3306605566,-0.6422208829,-0.8712684423,-0.9883751232,-0.9784950178,-0.8428975255,-0.5990042601,-0.2781507149,0.0784397328,0.4249522157,0.7168666873,0.9166778727,0.9987139598,0.9524349232,0.7837867099,0.5144373020},
		{0.9175856998,0.9988268441,0.9517383612,0.7823701961,0.5124828307,0.1767514895,-0.1816889458,-0.5167859209,-0.7854860576,-0.9532666670,-0.9985712369,-0.9155790202,-0.7149528862,-0.4224693518,-0.0757068053,0.2807825784,0.6011969169,0.8443692623,0.9790567453,0.9879546705,0.8699198293},
		{0.6030154188,0.8455873424,0.9795179043,0.9875996584,0.8687942581,0.6383658635,0.3259199963,-0.0284001877,-0.3790715054,-0.6810395817,-0.8955074510,-0.9949202053,-0.9665052589,-0.8139133740,-0.5567496101,-0.2280544588,0.1299412102,0.4712419864,0.7519974251,0.9361359679,0.9999994295},
		{0.1321991991,0.4732496484,0.7534968151,0.9369344438,0.9999944028,0.9345747262,0.7490805574,0.4673442529,0.1255633930,-0.2323498961,-0.5604107882,-0.8164699035,-0.9676286760,-0.9944661730,-0.8935343034,-0.6778008296,-0.3749832648,-0.0239877172,0.3300897809,0.6417572268,0.8709714766},
		{-0.3728708513,-0.0217106739,0.3322388985,0.6435022995,0.8720882967,0.9886280803,0.9781485775,0.8419961986,0.5976638494,0.2765434369,-0.0801073745,-0.4264659620,-0.7180320514,-0.9173451282,-0.9987973776,-0.9519237857,-0.7827466881,-0.5130020185,-0.1773466676,0.1810942461,0.5162681068},
		{-0.7813271926,-0.5110455934,-0.1751046752,0.1833337538,0.5182173971,0.7865202854,0.9537707685,0.9984804450,0.9149049998,0.7137822357,0.4209524768,0.0740385944,-0.2823877928,-0.6025328963,-0.8452643596,-0.9793959582,-0.9876944166,-0.8690935462,-0.6388312287,-0.3264916483,0.0277956948}
	};

	/**
	 * 21 x 21 kernel mask of sinus part, frequency = 0.1, angle = 0.
	 */
	private static final double[][] expectedKernelComplex_0 = new double[][]{
		{0.0000000000,0.5877852523,0.9510565163,0.9510565163,0.5877852523,-0.0000000000,-0.5877852523,-0.9510565163,-0.9510565163,-0.5877852523,0.0000000000,0.5877852523,0.9510565163,0.9510565163,0.5877852523,0.0000000000,-0.5877852523,-0.9510565163,-0.9510565163,-0.5877852523,-0.0000000000},
		{0.0000000000,0.5877852523,0.9510565163,0.9510565163,0.5877852523,-0.0000000000,-0.5877852523,-0.9510565163,-0.9510565163,-0.5877852523,0.0000000000,0.5877852523,0.9510565163,0.9510565163,0.5877852523,0.0000000000,-0.5877852523,-0.9510565163,-0.9510565163,-0.5877852523,-0.0000000000},
		{0.0000000000,0.5877852523,0.9510565163,0.9510565163,0.5877852523,-0.0000000000,-0.5877852523,-0.9510565163,-0.9510565163,-0.5877852523,0.0000000000,0.5877852523,0.9510565163,0.9510565163,0.5877852523,0.0000000000,-0.5877852523,-0.9510565163,-0.9510565163,-0.5877852523,-0.0000000000},
		{0.0000000000,0.5877852523,0.9510565163,0.9510565163,0.5877852523,-0.0000000000,-0.5877852523,-0.9510565163,-0.9510565163,-0.5877852523,0.0000000000,0.5877852523,0.9510565163,0.9510565163,0.5877852523,0.0000000000,-0.5877852523,-0.9510565163,-0.9510565163,-0.5877852523,-0.0000000000},
		{0.0000000000,0.5877852523,0.9510565163,0.9510565163,0.5877852523,-0.0000000000,-0.5877852523,-0.9510565163,-0.9510565163,-0.5877852523,0.0000000000,0.5877852523,0.9510565163,0.9510565163,0.5877852523,0.0000000000,-0.5877852523,-0.9510565163,-0.9510565163,-0.5877852523,-0.0000000000},
		{0.0000000000,0.5877852523,0.9510565163,0.9510565163,0.5877852523,-0.0000000000,-0.5877852523,-0.9510565163,-0.9510565163,-0.5877852523,0.0000000000,0.5877852523,0.9510565163,0.9510565163,0.5877852523,0.0000000000,-0.5877852523,-0.9510565163,-0.9510565163,-0.5877852523,-0.0000000000},
		{0.0000000000,0.5877852523,0.9510565163,0.9510565163,0.5877852523,-0.0000000000,-0.5877852523,-0.9510565163,-0.9510565163,-0.5877852523,0.0000000000,0.5877852523,0.9510565163,0.9510565163,0.5877852523,0.0000000000,-0.5877852523,-0.9510565163,-0.9510565163,-0.5877852523,-0.0000000000},
		{0.0000000000,0.5877852523,0.9510565163,0.9510565163,0.5877852523,-0.0000000000,-0.5877852523,-0.9510565163,-0.9510565163,-0.5877852523,0.0000000000,0.5877852523,0.9510565163,0.9510565163,0.5877852523,0.0000000000,-0.5877852523,-0.9510565163,-0.9510565163,-0.5877852523,-0.0000000000},
		{0.0000000000,0.5877852523,0.9510565163,0.9510565163,0.5877852523,-0.0000000000,-0.5877852523,-0.9510565163,-0.9510565163,-0.5877852523,0.0000000000,0.5877852523,0.9510565163,0.9510565163,0.5877852523,0.0000000000,-0.5877852523,-0.9510565163,-0.9510565163,-0.5877852523,-0.0000000000},
		{0.0000000000,0.5877852523,0.9510565163,0.9510565163,0.5877852523,-0.0000000000,-0.5877852523,-0.9510565163,-0.9510565163,-0.5877852523,0.0000000000,0.5877852523,0.9510565163,0.9510565163,0.5877852523,0.0000000000,-0.5877852523,-0.9510565163,-0.9510565163,-0.5877852523,-0.0000000000},
		{0.0000000000,0.5877852523,0.9510565163,0.9510565163,0.5877852523,-0.0000000000,-0.5877852523,-0.9510565163,-0.9510565163,-0.5877852523,0.0000000000,0.5877852523,0.9510565163,0.9510565163,0.5877852523,0.0000000000,-0.5877852523,-0.9510565163,-0.9510565163,-0.5877852523,-0.0000000000},
		{0.0000000000,0.5877852523,0.9510565163,0.9510565163,0.5877852523,-0.0000000000,-0.5877852523,-0.9510565163,-0.9510565163,-0.5877852523,0.0000000000,0.5877852523,0.9510565163,0.9510565163,0.5877852523,0.0000000000,-0.5877852523,-0.9510565163,-0.9510565163,-0.5877852523,-0.0000000000},
		{0.0000000000,0.5877852523,0.9510565163,0.9510565163,0.5877852523,-0.0000000000,-0.5877852523,-0.9510565163,-0.9510565163,-0.5877852523,0.0000000000,0.5877852523,0.9510565163,0.9510565163,0.5877852523,0.0000000000,-0.5877852523,-0.9510565163,-0.9510565163,-0.5877852523,-0.0000000000},
		{0.0000000000,0.5877852523,0.9510565163,0.9510565163,0.5877852523,-0.0000000000,-0.5877852523,-0.9510565163,-0.9510565163,-0.5877852523,0.0000000000,0.5877852523,0.9510565163,0.9510565163,0.5877852523,0.0000000000,-0.5877852523,-0.9510565163,-0.9510565163,-0.5877852523,-0.0000000000},
		{0.0000000000,0.5877852523,0.9510565163,0.9510565163,0.5877852523,-0.0000000000,-0.5877852523,-0.9510565163,-0.9510565163,-0.5877852523,0.0000000000,0.5877852523,0.9510565163,0.9510565163,0.5877852523,0.0000000000,-0.5877852523,-0.9510565163,-0.9510565163,-0.5877852523,-0.0000000000},
		{0.0000000000,0.5877852523,0.9510565163,0.9510565163,0.5877852523,-0.0000000000,-0.5877852523,-0.9510565163,-0.9510565163,-0.5877852523,0.0000000000,0.5877852523,0.9510565163,0.9510565163,0.5877852523,0.0000000000,-0.5877852523,-0.9510565163,-0.9510565163,-0.5877852523,-0.0000000000},
		{0.0000000000,0.5877852523,0.9510565163,0.9510565163,0.5877852523,-0.0000000000,-0.5877852523,-0.9510565163,-0.9510565163,-0.5877852523,0.0000000000,0.5877852523,0.9510565163,0.9510565163,0.5877852523,0.0000000000,-0.5877852523,-0.9510565163,-0.9510565163,-0.5877852523,-0.0000000000},
		{0.0000000000,0.5877852523,0.9510565163,0.9510565163,0.5877852523,-0.0000000000,-0.5877852523,-0.9510565163,-0.9510565163,-0.5877852523,0.0000000000,0.5877852523,0.9510565163,0.9510565163,0.5877852523,0.0000000000,-0.5877852523,-0.9510565163,-0.9510565163,-0.5877852523,-0.0000000000},
		{0.0000000000,0.5877852523,0.9510565163,0.9510565163,0.5877852523,-0.0000000000,-0.5877852523,-0.9510565163,-0.9510565163,-0.5877852523,0.0000000000,0.5877852523,0.9510565163,0.9510565163,0.5877852523,0.0000000000,-0.5877852523,-0.9510565163,-0.9510565163,-0.5877852523,-0.0000000000},
		{0.0000000000,0.5877852523,0.9510565163,0.9510565163,0.5877852523,-0.0000000000,-0.5877852523,-0.9510565163,-0.9510565163,-0.5877852523,0.0000000000,0.5877852523,0.9510565163,0.9510565163,0.5877852523,0.0000000000,-0.5877852523,-0.9510565163,-0.9510565163,-0.5877852523,-0.0000000000},
		{0.0000000000,0.5877852523,0.9510565163,0.9510565163,0.5877852523,-0.0000000000,-0.5877852523,-0.9510565163,-0.9510565163,-0.5877852523,0.0000000000,0.5877852523,0.9510565163,0.9510565163,0.5877852523,0.0000000000,-0.5877852523,-0.9510565163,-0.9510565163,-0.5877852523,-0.0000000000}
	};

	/**
	 * 21 x 21 kernel mask of sinus part, frequency = 0.1, angle = 45.
	 */
	private static final double[][] expectedKernelComplex_45 = new double[][]{
		{-0.5132883972,-0.8323312292,-0.9897632967,-0.9550165807,-0.7348377262,-0.3719780705,0.0631072308,0.4859392279,0.8144181508,0.9847644273,0.9639025328,0.7558831465,0.4010966452,-0.0315693507,-0.4581056392,-0.7956932016,-0.9787838736,-0.9718275972,-0.7761750478,-0.4298153777,0.0000000000},
		{-0.8323312292,-0.9897632967,-0.9550165807,-0.7348377262,-0.3719780705,0.0631072308,0.4859392279,0.8144181508,0.9847644273,0.9639025328,0.7558831465,0.4010966452,-0.0315693507,-0.4581056392,-0.7956932016,-0.9787838736,-0.9718275972,-0.7761750478,-0.4298153777,0.0000000000,0.4298153777},
		{-0.9897632967,-0.9550165807,-0.7348377262,-0.3719780705,0.0631072308,0.4859392279,0.8144181508,0.9847644273,0.9639025328,0.7558831465,0.4010966452,-0.0315693507,-0.4581056392,-0.7956932016,-0.9787838736,-0.9718275972,-0.7761750478,-0.4298153777,0.0000000000,0.4298153777,0.7761750478},
		{-0.9550165807,-0.7348377262,-0.3719780705,0.0631072308,0.4859392279,0.8144181508,0.9847644273,0.9639025328,0.7558831465,0.4010966452,-0.0315693507,-0.4581056392,-0.7956932016,-0.9787838736,-0.9718275972,-0.7761750478,-0.4298153777,0.0000000000,0.4298153777,0.7761750478,0.9718275972},
		{-0.7348377262,-0.3719780705,0.0631072308,0.4859392279,0.8144181508,0.9847644273,0.9639025328,0.7558831465,0.4010966452,-0.0315693507,-0.4581056392,-0.7956932016,-0.9787838736,-0.9718275972,-0.7761750478,-0.4298153777,0.0000000000,0.4298153777,0.7761750478,0.9718275972,0.9787838736},
		{-0.3719780705,0.0631072308,0.4859392279,0.8144181508,0.9847644273,0.9639025328,0.7558831465,0.4010966452,-0.0315693507,-0.4581056392,-0.7956932016,-0.9787838736,-0.9718275972,-0.7761750478,-0.4298153777,0.0000000000,0.4298153777,0.7761750478,0.9718275972,0.9787838736,0.7956932016},
		{0.0631072308,0.4859392279,0.8144181508,0.9847644273,0.9639025328,0.7558831465,0.4010966452,-0.0315693507,-0.4581056392,-0.7956932016,-0.9787838736,-0.9718275972,-0.7761750478,-0.4298153777,0.0000000000,0.4298153777,0.7761750478,0.9718275972,0.9787838736,0.7956932016,0.4581056392},
		{0.4859392279,0.8144181508,0.9847644273,0.9639025328,0.7558831465,0.4010966452,-0.0315693507,-0.4581056392,-0.7956932016,-0.9787838736,-0.9718275972,-0.7761750478,-0.4298153777,0.0000000000,0.4298153777,0.7761750478,0.9718275972,0.9787838736,0.7956932016,0.4581056392,0.0315693507},
		{0.8144181508,0.9847644273,0.9639025328,0.7558831465,0.4010966452,-0.0315693507,-0.4581056392,-0.7956932016,-0.9787838736,-0.9718275972,-0.7761750478,-0.4298153777,0.0000000000,0.4298153777,0.7761750478,0.9718275972,0.9787838736,0.7956932016,0.4581056392,0.0315693507,-0.4010966452},
		{0.9847644273,0.9639025328,0.7558831465,0.4010966452,-0.0315693507,-0.4581056392,-0.7956932016,-0.9787838736,-0.9718275972,-0.7761750478,-0.4298153777,0.0000000000,0.4298153777,0.7761750478,0.9718275972,0.9787838736,0.7956932016,0.4581056392,0.0315693507,-0.4010966452,-0.7558831465},
		{0.9639025328,0.7558831465,0.4010966452,-0.0315693507,-0.4581056392,-0.7956932016,-0.9787838736,-0.9718275972,-0.7761750478,-0.4298153777,0.0000000000,0.4298153777,0.7761750478,0.9718275972,0.9787838736,0.7956932016,0.4581056392,0.0315693507,-0.4010966452,-0.7558831465,-0.9639025328},
		{0.7558831465,0.4010966452,-0.0315693507,-0.4581056392,-0.7956932016,-0.9787838736,-0.9718275972,-0.7761750478,-0.4298153777,-0.0000000000,0.4298153777,0.7761750478,0.9718275972,0.9787838736,0.7956932016,0.4581056392,0.0315693507,-0.4010966452,-0.7558831465,-0.9639025328,-0.9847644273},
		{0.4010966452,-0.0315693507,-0.4581056392,-0.7956932016,-0.9787838736,-0.9718275972,-0.7761750478,-0.4298153777,-0.0000000000,0.4298153777,0.7761750478,0.9718275972,0.9787838736,0.7956932016,0.4581056392,0.0315693507,-0.4010966452,-0.7558831465,-0.9639025328,-0.9847644273,-0.8144181508},
		{-0.0315693507,-0.4581056392,-0.7956932016,-0.9787838736,-0.9718275972,-0.7761750478,-0.4298153777,-0.0000000000,0.4298153777,0.7761750478,0.9718275972,0.9787838736,0.7956932016,0.4581056392,0.0315693507,-0.4010966452,-0.7558831465,-0.9639025328,-0.9847644273,-0.8144181508,-0.4859392279},
		{-0.4581056392,-0.7956932016,-0.9787838736,-0.9718275972,-0.7761750478,-0.4298153777,-0.0000000000,0.4298153777,0.7761750478,0.9718275972,0.9787838736,0.7956932016,0.4581056392,0.0315693507,-0.4010966452,-0.7558831465,-0.9639025328,-0.9847644273,-0.8144181508,-0.4859392279,-0.0631072308},
		{-0.7956932016,-0.9787838736,-0.9718275972,-0.7761750478,-0.4298153777,-0.0000000000,0.4298153777,0.7761750478,0.9718275972,0.9787838736,0.7956932016,0.4581056392,0.0315693507,-0.4010966452,-0.7558831465,-0.9639025328,-0.9847644273,-0.8144181508,-0.4859392279,-0.0631072308,0.3719780705},
		{-0.9787838736,-0.9718275972,-0.7761750478,-0.4298153777,-0.0000000000,0.4298153777,0.7761750478,0.9718275972,0.9787838736,0.7956932016,0.4581056392,0.0315693507,-0.4010966452,-0.7558831465,-0.9639025328,-0.9847644273,-0.8144181508,-0.4859392279,-0.0631072308,0.3719780705,0.7348377262},
		{-0.9718275972,-0.7761750478,-0.4298153777,-0.0000000000,0.4298153777,0.7761750478,0.9718275972,0.9787838736,0.7956932016,0.4581056392,0.0315693507,-0.4010966452,-0.7558831465,-0.9639025328,-0.9847644273,-0.8144181508,-0.4859392279,-0.0631072308,0.3719780705,0.7348377262,0.9550165807},
		{-0.7761750478,-0.4298153777,-0.0000000000,0.4298153777,0.7761750478,0.9718275972,0.9787838736,0.7956932016,0.4581056392,0.0315693507,-0.4010966452,-0.7558831465,-0.9639025328,-0.9847644273,-0.8144181508,-0.4859392279,-0.0631072308,0.3719780705,0.7348377262,0.9550165807,0.9897632967},
		{-0.4298153777,-0.0000000000,0.4298153777,0.7761750478,0.9718275972,0.9787838736,0.7956932016,0.4581056392,0.0315693507,-0.4010966452,-0.7558831465,-0.9639025328,-0.9847644273,-0.8144181508,-0.4859392279,-0.0631072308,0.3719780705,0.7348377262,0.9550165807,0.9897632967,0.8323312292},
		{-0.0000000000,0.4298153777,0.7761750478,0.9718275972,0.9787838736,0.7956932016,0.4581056392,0.0315693507,-0.4010966452,-0.7558831465,-0.9639025328,-0.9847644273,-0.8144181508,-0.4859392279,-0.0631072308,0.3719780705,0.7348377262,0.9550165807,0.9897632967,0.8323312292,0.5132883972}		
	};
	
	/**
	 * 21 x 21 kernel mask of sinus part, frequency = 0.1, angle = 125.
	 */
	private static final double[][] expectedKernelComplex_125 = new double[][]{
		{-0.9996136250,-0.9452000865,-0.7693469057,-0.4946477615,-0.1563960975,0.2019493926,0.5343483530,0.7980940476,0.9593003359,0.9972553768,0.9070826932,0.7003677034,0.4036692227,0.0551071772,-0.3005350581,-0.6175644425,-0.8552489283,-0.9830507285,-0.9845498224,-0.8595536059,-0.6241216373},
		{-0.8564270208,-0.9834657462,-0.9841484438,-0.8583874003,-0.6223404392,-0.3063349577,0.0490285478,0.3980928481,0.6960100381,0.9045036115,0.9967862401,0.9610014191,0.8017467949,0.5394834581,0.2079070953,-0.1503812448,-0.4893485493,-0.7654441786,-0.9431952684,-0.9997642955,-0.9278832514},
		{-0.4913335801,-0.7669078575,-0.9439495413,-0.9997122533,-0.9270315804,-0.7352455613,-0.4489949317,-0.1050572740,0.2523781795,0.5773879950,0.8282147961,0.9726322665,0.9920855983,0.8840754206,0.6624789193,0.3557668915,0.0033458073,-0.3495051474,-0.6574515568,-0.8809283571,-0.9912231695},
		{0.0010681749,-0.3516382369,-0.6591660433,-0.8820039627,-0.9915217002,-0.9736483779,-0.8306803667,-0.5809862474,-0.2566468090,0.1006667025,0.4450465203,0.7322466034,0.9253673831,0.9995966333,0.9453973535,0.7697330864,0.4951732394,0.1569933590,-0.2013570839,-0.5338370973,-0.7977295310},
		{0.4931931576,0.1547435588,-0.2035875473,-0.5357616531,-0.7991009117,-0.9597714018,-0.9971301217,-0.9063772100,-0.6991726328,-0.4021381078,-0.0534367361,0.3021302064,0.6188793528,0.8561146605,0.9833560530,0.9842555110,0.8586974719,0.6228136770,0.3069105601,-0.0484245345,-0.3975380277},
		{0.8575279950,0.6210301067,0.3047420500,-0.0506993733,-0.3996269232,-0.6972102643,-0.9052157833,-0.9969188574,-0.9605374432,-0.8007458376,-0.5380741228,-0.2062704538,0.1520349162,0.4908067863,0.7665196264,0.9437497530,0.9997265766,0.9272581752,0.7356553145,0.4495351980,0.1056586399},
		{0.9996707252,0.9264029715,0.7341106354,0.4474995045,0.1033934786,-0.2539965781,-0.5787530644,-0.8291511517,-0.9730196050,-0.9918741543,-0.8832923605,-0.6612248509,-0.3542029380,-0.0016729060,0.3510720616,0.6587111662,0.8817188265,0.9914429393,0.9737861116,0.8310168989,0.5814783403},
		{0.8827910721,0.9917376921,0.9732655018,0.8297478146,0.5796238339,0.2550295774,-0.1023309696,-0.4465439973,-0.7333848939,-0.9260002393,-0.9996427454,-0.9448507971,-0.7686640833,-0.4937191354,-0.1553409779,0.2029954435,0.5352509384,0.7987372028,0.9596014282,0.9971757217,0.9066325248},
		{0.5371734538,0.8001055394,0.9602397816,0.9970020761,0.9056691902,0.6979756055,0.4006058675,0.0517661456,-0.3037245091,-0.6201925311,-0.8569779968,-0.9836586255,-0.9839584451,-0.8578389347,-0.6215039738,-0.3053179618,0.0500954101,0.3990725061,0.6967766248,0.9049586357,0.9968712402},
		{0.0523700569,0.4011598799,0.6984085392,0.9059254217,0.9970486847,0.9600707791,0.7997426393,0.5366632815,0.2046332350,-0.1536881621,-0.4922636497,-0.7675929289,-0.9443015964,-0.9996860599,-0.9266305038,-0.7345211320,-0.4480402246,-0.1039949503,0.2534116322,0.5782597982,0.8288129403},
		{-0.4460028250,-0.1017293939,0.2556142659,0.5801165141,0.8300851869,0.9734042204,0.9916599344,0.8825068284,0.6599689321,0.3526379933,0.0000000000,-0.3526379933,-0.6599689321,-0.8825068284,-0.9916599344,-0.9734042204,-0.8300851869,-0.5801165141,-0.2556142659,0.1017293939,0.4460028250},
		{-0.8288129403,-0.5782597982,-0.2534116322,0.1039949503,0.4480402246,0.7345211320,0.9266305038,0.9996860599,0.9443015964,0.7675929289,0.4922636497,0.1536881621,-0.2046332350,-0.5366632815,-0.7997426393,-0.9600707791,-0.9970486847,-0.9059254217,-0.6984085392,-0.4011598799,-0.0523700569},
		{-0.9968712402,-0.9049586357,-0.6967766248,-0.3990725061,-0.0500954101,0.3053179618,0.6215039738,0.8578389347,0.9839584451,0.9836586255,0.8569779968,0.6201925311,0.3037245091,-0.0517661456,-0.4006058675,-0.6979756055,-0.9056691902,-0.9970020761,-0.9602397816,-0.8001055394,-0.5371734538},
		{-0.9066325248,-0.9971757217,-0.9596014282,-0.7987372028,-0.5352509384,-0.2029954435,0.1553409779,0.4937191354,0.7686640833,0.9448507971,0.9996427454,0.9260002393,0.7333848939,0.4465439973,0.1023309696,-0.2550295774,-0.5796238339,-0.8297478146,-0.9732655018,-0.9917376921,-0.8827910721},
		{-0.5814783403,-0.8310168989,-0.9737861116,-0.9914429393,-0.8817188265,-0.6587111662,-0.3510720616,0.0016729060,0.3542029380,0.6612248509,0.8832923605,0.9918741543,0.9730196050,0.8291511517,0.5787530644,0.2539965781,-0.1033934786,-0.4474995045,-0.7341106354,-0.9264029715,-0.9996707252},
		{-0.1056586399,-0.4495351980,-0.7356553145,-0.9272581752,-0.9997265766,-0.9437497530,-0.7665196264,-0.4908067863,-0.1520349162,0.2062704538,0.5380741228,0.8007458376,0.9605374432,0.9969188574,0.9052157833,0.6972102643,0.3996269232,0.0506993733,-0.3047420500,-0.6210301067,-0.8575279950},
		{0.3975380277,0.0484245345,-0.3069105601,-0.6228136770,-0.8586974719,-0.9842555110,-0.9833560530,-0.8561146605,-0.6188793528,-0.3021302064,0.0534367361,0.4021381078,0.6991726328,0.9063772100,0.9971301217,0.9597714018,0.7991009117,0.5357616531,0.2035875473,-0.1547435588,-0.4931931576},
		{0.7977295310,0.5338370973,0.2013570839,-0.1569933590,-0.4951732394,-0.7697330864,-0.9453973535,-0.9995966333,-0.9253673831,-0.7322466034,-0.4450465203,-0.1006667025,0.2566468090,0.5809862474,0.8306803667,0.9736483779,0.9915217002,0.8820039627,0.6591660433,0.3516382369,-0.0010681749},
		{0.9912231695,0.8809283571,0.6574515568,0.3495051474,-0.0033458073,-0.3557668915,-0.6624789193,-0.8840754206,-0.9920855983,-0.9726322665,-0.8282147961,-0.5773879950,-0.2523781795,0.1050572740,0.4489949317,0.7352455613,0.9270315804,0.9997122533,0.9439495413,0.7669078575,0.4913335801},
		{0.9278832514,0.9997642955,0.9431952684,0.7654441786,0.4893485493,0.1503812448,-0.2079070953,-0.5394834581,-0.8017467949,-0.9610014191,-0.9967862401,-0.9045036115,-0.6960100381,-0.3980928481,-0.0490285478,0.3063349577,0.6223404392,0.8583874003,0.9841484438,0.9834657462,0.8564270208},
		{0.6241216373,0.8595536059,0.9845498224,0.9830507285,0.8552489283,0.6175644425,0.3005350581,-0.0551071772,-0.4036692227,-0.7003677034,-0.9070826932,-0.9972553768,-0.9593003359,-0.7980940476,-0.5343483530,-0.2019493926,0.1563960975,0.4946477615,0.7693469057,0.9452000865,0.9996136250}
	};
}